
Hexfiles/bootloader_atmega1280.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800200  0001f9f0  00001a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019f0  0001e000  0001e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000559  008002b6  008002b6  00001b3a  2**0
                  ALLOC
  3 .stab         000051cc  00000000  00000000  00001b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000025b8  00000000  00000000  00006d08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	71 c0       	rjmp	.+226    	; 0x1e0e4 <wdt_init>
   1e002:	00 00       	nop
   1e004:	96 c0       	rjmp	.+300    	; 0x1e132 <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	94 c0       	rjmp	.+296    	; 0x1e132 <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	92 c0       	rjmp	.+292    	; 0x1e132 <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	90 c0       	rjmp	.+288    	; 0x1e132 <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	8e c0       	rjmp	.+284    	; 0x1e132 <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	8c c0       	rjmp	.+280    	; 0x1e132 <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	8a c0       	rjmp	.+276    	; 0x1e132 <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	88 c0       	rjmp	.+272    	; 0x1e132 <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	86 c0       	rjmp	.+268    	; 0x1e132 <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	84 c0       	rjmp	.+264    	; 0x1e132 <__bad_interrupt>
   1e02a:	00 00       	nop
   1e02c:	82 c0       	rjmp	.+260    	; 0x1e132 <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	80 c0       	rjmp	.+256    	; 0x1e132 <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	7e c0       	rjmp	.+252    	; 0x1e132 <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	7c c0       	rjmp	.+248    	; 0x1e132 <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	7a c0       	rjmp	.+244    	; 0x1e132 <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	78 c0       	rjmp	.+240    	; 0x1e132 <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	42 c4       	rjmp	.+2180   	; 0x1e8ca <__vector_17>
   1e046:	00 00       	nop
   1e048:	74 c0       	rjmp	.+232    	; 0x1e132 <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	72 c0       	rjmp	.+228    	; 0x1e132 <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	70 c0       	rjmp	.+224    	; 0x1e132 <__bad_interrupt>
   1e052:	00 00       	nop
   1e054:	6e c0       	rjmp	.+220    	; 0x1e132 <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	6c c0       	rjmp	.+216    	; 0x1e132 <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	6a c0       	rjmp	.+212    	; 0x1e132 <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	68 c0       	rjmp	.+208    	; 0x1e132 <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	66 c0       	rjmp	.+204    	; 0x1e132 <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	64 c0       	rjmp	.+200    	; 0x1e132 <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	62 c0       	rjmp	.+196    	; 0x1e132 <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	60 c0       	rjmp	.+192    	; 0x1e132 <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	5e c0       	rjmp	.+188    	; 0x1e132 <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	5c c0       	rjmp	.+184    	; 0x1e132 <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	5a c0       	rjmp	.+180    	; 0x1e132 <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	58 c0       	rjmp	.+176    	; 0x1e132 <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	56 c0       	rjmp	.+172    	; 0x1e132 <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	54 c0       	rjmp	.+168    	; 0x1e132 <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	52 c0       	rjmp	.+164    	; 0x1e132 <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	50 c0       	rjmp	.+160    	; 0x1e132 <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	4e c0       	rjmp	.+156    	; 0x1e132 <__bad_interrupt>
   1e096:	00 00       	nop
   1e098:	4c c0       	rjmp	.+152    	; 0x1e132 <__bad_interrupt>
   1e09a:	00 00       	nop
   1e09c:	4a c0       	rjmp	.+148    	; 0x1e132 <__bad_interrupt>
   1e09e:	00 00       	nop
   1e0a0:	48 c0       	rjmp	.+144    	; 0x1e132 <__bad_interrupt>
   1e0a2:	00 00       	nop
   1e0a4:	46 c0       	rjmp	.+140    	; 0x1e132 <__bad_interrupt>
   1e0a6:	00 00       	nop
   1e0a8:	44 c0       	rjmp	.+136    	; 0x1e132 <__bad_interrupt>
   1e0aa:	00 00       	nop
   1e0ac:	42 c0       	rjmp	.+132    	; 0x1e132 <__bad_interrupt>
   1e0ae:	00 00       	nop
   1e0b0:	40 c0       	rjmp	.+128    	; 0x1e132 <__bad_interrupt>
   1e0b2:	00 00       	nop
   1e0b4:	3e c0       	rjmp	.+124    	; 0x1e132 <__bad_interrupt>
   1e0b6:	00 00       	nop
   1e0b8:	3c c0       	rjmp	.+120    	; 0x1e132 <__bad_interrupt>
   1e0ba:	00 00       	nop
   1e0bc:	3a c0       	rjmp	.+116    	; 0x1e132 <__bad_interrupt>
   1e0be:	00 00       	nop
   1e0c0:	38 c0       	rjmp	.+112    	; 0x1e132 <__bad_interrupt>
   1e0c2:	00 00       	nop
   1e0c4:	36 c0       	rjmp	.+108    	; 0x1e132 <__bad_interrupt>
   1e0c6:	00 00       	nop
   1e0c8:	34 c0       	rjmp	.+104    	; 0x1e132 <__bad_interrupt>
   1e0ca:	00 00       	nop
   1e0cc:	32 c0       	rjmp	.+100    	; 0x1e132 <__bad_interrupt>
   1e0ce:	00 00       	nop
   1e0d0:	30 c0       	rjmp	.+96     	; 0x1e132 <__bad_interrupt>
   1e0d2:	00 00       	nop
   1e0d4:	2e c0       	rjmp	.+92     	; 0x1e132 <__bad_interrupt>
   1e0d6:	00 00       	nop
   1e0d8:	2c c0       	rjmp	.+88     	; 0x1e132 <__bad_interrupt>
   1e0da:	00 00       	nop
   1e0dc:	2a c0       	rjmp	.+84     	; 0x1e132 <__bad_interrupt>
   1e0de:	00 00       	nop
   1e0e0:	28 c0       	rjmp	.+80     	; 0x1e132 <__bad_interrupt>
	...

0001e0e4 <wdt_init>:
   1e0e4:	14 be       	out	0x34, r1	; 52
   1e0e6:	88 e1       	ldi	r24, 0x18	; 24
   1e0e8:	0f b6       	in	r0, 0x3f	; 63
   1e0ea:	f8 94       	cli
   1e0ec:	80 93 60 00 	sts	0x0060, r24
   1e0f0:	10 92 60 00 	sts	0x0060, r1
   1e0f4:	0f be       	out	0x3f, r0	; 63
   1e0f6:	11 24       	eor	r1, r1
   1e0f8:	1f be       	out	0x3f, r1	; 63
   1e0fa:	cf ef       	ldi	r28, 0xFF	; 255
   1e0fc:	d1 e2       	ldi	r29, 0x21	; 33
   1e0fe:	de bf       	out	0x3e, r29	; 62
   1e100:	cd bf       	out	0x3d, r28	; 61

0001e102 <__do_copy_data>:
   1e102:	12 e0       	ldi	r17, 0x02	; 2
   1e104:	a0 e0       	ldi	r26, 0x00	; 0
   1e106:	b2 e0       	ldi	r27, 0x02	; 2
   1e108:	e0 ef       	ldi	r30, 0xF0	; 240
   1e10a:	f9 ef       	ldi	r31, 0xF9	; 249
   1e10c:	01 e0       	ldi	r16, 0x01	; 1
   1e10e:	0b bf       	out	0x3b, r16	; 59
   1e110:	02 c0       	rjmp	.+4      	; 0x1e116 <__do_copy_data+0x14>
   1e112:	07 90       	elpm	r0, Z+
   1e114:	0d 92       	st	X+, r0
   1e116:	a6 3b       	cpi	r26, 0xB6	; 182
   1e118:	b1 07       	cpc	r27, r17
   1e11a:	d9 f7       	brne	.-10     	; 0x1e112 <__do_copy_data+0x10>

0001e11c <__do_clear_bss>:
   1e11c:	18 e0       	ldi	r17, 0x08	; 8
   1e11e:	a6 eb       	ldi	r26, 0xB6	; 182
   1e120:	b2 e0       	ldi	r27, 0x02	; 2
   1e122:	01 c0       	rjmp	.+2      	; 0x1e126 <.do_clear_bss_start>

0001e124 <.do_clear_bss_loop>:
   1e124:	1d 92       	st	X+, r1

0001e126 <.do_clear_bss_start>:
   1e126:	af 30       	cpi	r26, 0x0F	; 15
   1e128:	b1 07       	cpc	r27, r17
   1e12a:	e1 f7       	brne	.-8      	; 0x1e124 <.do_clear_bss_loop>
   1e12c:	03 d0       	rcall	.+6      	; 0x1e134 <main>
   1e12e:	0c 94 f6 fc 	jmp	0x1f9ec	; 0x1f9ec <_exit>

0001e132 <__bad_interrupt>:
   1e132:	66 cf       	rjmp	.-308    	; 0x1e000 <__vectors>

0001e134 <main>:

//----------------------------------------------------------------------------
//Hier startet das Hauptprogramm
int main(void)
{
	ihex_intvector(IHEX_INTVECTOR_BOOT);
   1e134:	81 e0       	ldi	r24, 0x01	; 1
   1e136:	0e 94 67 fa 	call	0x1f4ce	; 0x1f4ce <ihex_intvector>

	//Applikationen starten
	stack_init();
   1e13a:	18 d0       	rcall	.+48     	; 0x1e16c <stack_init>
   1e13c:	9f d7       	rcall	.+3902   	; 0x1f07c <tftp_init>
	tftp_init();
   1e13e:	78 94       	sei
   1e140:	83 e0       	ldi	r24, 0x03	; 3

	//Globale Interrupts einschalten
	sei();
   1e142:	90 e0       	ldi	r25, 0x00	; 0
#if USE_SYSLOG
	console_mode = CONSOLE_SYSLOG;
#endif

#if USE_USART
	console_mode |= CONSOLE_USART;
   1e144:	90 93 a7 07 	sts	0x07A7, r25
   1e148:	80 93 a6 07 	sts	0x07A6, r24
   1e14c:	74 d4       	rcall	.+2280   	; 0x1ea36 <console_init>
   1e14e:	00 d0       	rcall	.+0      	; 0x1e150 <main+0x1c>
#endif

	console_init();
   1e150:	80 e0       	ldi	r24, 0x00	; 0
   1e152:	92 e0       	ldi	r25, 0x02	; 2
	console_write("\n\rBoot\n\r");
   1e154:	ed b7       	in	r30, 0x3d	; 61
   1e156:	fe b7       	in	r31, 0x3e	; 62
   1e158:	92 83       	std	Z+2, r25	; 0x02
   1e15a:	81 83       	std	Z+1, r24	; 0x01
   1e15c:	cb d4       	rcall	.+2454   	; 0x1eaf4 <console_write_P>
   1e15e:	0f 90       	pop	r0
   1e160:	0f 90       	pop	r0
   1e162:	98 d7       	rcall	.+3888   	; 0x1f094 <tftp_request>
   1e164:	b2 d2       	rcall	.+1380   	; 0x1e6ca <eth_get_data>
#endif

	tftp_request();				// send tftp request for bootfile
   1e166:	0e 94 50 fa 	call	0x1f4a0	; 0x1f4a0 <tftp_watchdogcheck>
   1e16a:	fc cf       	rjmp	.-8      	; 0x1e164 <main+0x30>

0001e16c <stack_init>:


//----------------------------------------------------------------------------
//Trägt Anwendung in Anwendungsliste ein
void stack_init (void)
{
   1e16c:	0f 93       	push	r16
   1e16e:	1f 93       	push	r17
   1e170:	cf 93       	push	r28
   1e172:	df 93       	push	r29
	//Timer starten
	timer_init();
   1e174:	95 d3       	rcall	.+1834   	; 0x1e8a0 <timer_init>
   1e176:	8e e1       	ldi	r24, 0x1E	; 30

#if USE_PARAMETERS_FROM_EEPROM
	//IP, NETMASK und ROUTER_IP aus EEPROM auslesen
    (*((unsigned long*)&myip[0])) = para_getip(IP_EEPROM_STORE,MYIP);
   1e178:	90 e0       	ldi	r25, 0x00	; 0
   1e17a:	40 ec       	ldi	r20, 0xC0	; 192
   1e17c:	58 ea       	ldi	r21, 0xA8	; 168
   1e17e:	64 e6       	ldi	r22, 0x64	; 100
   1e180:	7f e6       	ldi	r23, 0x6F	; 111
   1e182:	c2 d3       	rcall	.+1924   	; 0x1e908 <para_getip>
   1e184:	60 93 a0 07 	sts	0x07A0, r22
   1e188:	70 93 a1 07 	sts	0x07A1, r23
   1e18c:	80 93 a2 07 	sts	0x07A2, r24
   1e190:	90 93 a3 07 	sts	0x07A3, r25
   1e194:	88 e1       	ldi	r24, 0x18	; 24
   1e196:	90 e0       	ldi	r25, 0x00	; 0

	//MAC Adresse setzen
	if ( para_getchar(MAC_EEPROM_STORE) != 0xFF )
   1e198:	4c d4       	rcall	.+2200   	; 0x1ea32 <para_getchar>
   1e19a:	8f 3f       	cpi	r24, 0xFF	; 255
   1e19c:	69 f0       	breq	.+26     	; 0x1e1b8 <stack_init+0x4c>
   1e19e:	09 e0       	ldi	r16, 0x09	; 9
   1e1a0:	12 e0       	ldi	r17, 0x02	; 2
   1e1a2:	c8 e1       	ldi	r28, 0x18	; 24
   1e1a4:	d0 e0       	ldi	r29, 0x00	; 0
   1e1a6:	ce 01       	movw	r24, r28
   1e1a8:	44 d4       	rcall	.+2184   	; 0x1ea32 <para_getchar>
   1e1aa:	f8 01       	movw	r30, r16
		for ( int i=0; i<6; i++ )
			mymac[i] = para_getchar(MAC_EEPROM_STORE+i);
   1e1ac:	81 93       	st	Z+, r24
   1e1ae:	8f 01       	movw	r16, r30
   1e1b0:	21 96       	adiw	r28, 0x01	; 1
   1e1b2:	ce 31       	cpi	r28, 0x1E	; 30
   1e1b4:	d1 05       	cpc	r29, r1
   1e1b6:	b9 f7       	brne	.-18     	; 0x1e1a6 <stack_init+0x3a>
   1e1b8:	00 d7       	rcall	.+3584   	; 0x1efba <enc28j60_init>
	//IP, NETMASK und ROUTER_IP aus EEPROM auslesen
    (*((unsigned long*)&myip[0])) = para_getip(IP_EEPROM_STORE,MYIP);

	//MAC Adresse setzen
	if ( para_getchar(MAC_EEPROM_STORE) != 0xFF )
		for ( int i=0; i<6; i++ )
   1e1ba:	8c e3       	ldi	r24, 0x3C	; 60
   1e1bc:	90 e0       	ldi	r25, 0x00	; 0
   1e1be:	6d eb       	ldi	r22, 0xBD	; 189
    (*((unsigned long*)&myip[0])) = MYIP;
#endif

	/*NIC Initialisieren*/
	DEBUG_WRITE("\n\rNIC init:");
	ETH_INIT();
   1e1c0:	72 e0       	ldi	r23, 0x02	; 2
   1e1c2:	bb d6       	rcall	.+3446   	; 0x1ef3a <enc28j60_send_packet>
	DEBUG_WRITE("Ok\r\n");

#if USE_ENC28J60
	ETH_PACKET_SEND(60,eth_buffer);
   1e1c4:	8c e3       	ldi	r24, 0x3C	; 60
   1e1c6:	90 e0       	ldi	r25, 0x00	; 0
   1e1c8:	6d eb       	ldi	r22, 0xBD	; 189
   1e1ca:	72 e0       	ldi	r23, 0x02	; 2
   1e1cc:	b6 d6       	rcall	.+3436   	; 0x1ef3a <enc28j60_send_packet>
   1e1ce:	df 91       	pop	r29
	ETH_PACKET_SEND(60,eth_buffer);
   1e1d0:	cf 91       	pop	r28
   1e1d2:	1f 91       	pop	r17
   1e1d4:	0f 91       	pop	r16
   1e1d6:	08 95       	ret

0001e1d8 <arp_entry_add>:
}

//----------------------------------------------------------------------------
//erzeugt einen ARP - Eintrag wenn noch nicht vorhanden
void arp_entry_add (void)
{
   1e1d8:	cf 93       	push	r28
   1e1da:	df 93       	push	r29
	ip = (struct IP_Header *)&eth_buffer[IP_OFFSET];

	//Eintrag schon vorhanden?
	for (unsigned char a = 0;a<MAX_ARP_ENTRY;a++)
	{
		if(ETHERNET_ARP_DATAGRAMM)
   1e1dc:	60 91 c9 02 	lds	r22, 0x02C9
   1e1e0:	70 91 ca 02 	lds	r23, 0x02CA
   1e1e4:	c4 e7       	ldi	r28, 0x74	; 116
   1e1e6:	d7 e0       	ldi	r29, 0x07	; 7
	return;
}

//----------------------------------------------------------------------------
//erzeugt einen ARP - Eintrag wenn noch nicht vorhanden
void arp_entry_add (void)
   1e1e8:	fe 01       	movw	r30, r28
	ip = (struct IP_Header *)&eth_buffer[IP_OFFSET];

	//Eintrag schon vorhanden?
	for (unsigned char a = 0;a<MAX_ARP_ENTRY;a++)
	{
		if(ETHERNET_ARP_DATAGRAMM)
   1e1ea:	86 e0       	ldi	r24, 0x06	; 6
   1e1ec:	68 30       	cpi	r22, 0x08	; 8
   1e1ee:	78 07       	cpc	r23, r24
   1e1f0:	69 f4       	brne	.+26     	; 0x1e20c <arp_entry_add+0x34>
		{
			if(arp_entry[a].arp_t_ip == arp->ARP_SIPAddr)
   1e1f2:	20 81       	ld	r18, Z
   1e1f4:	31 81       	ldd	r19, Z+1	; 0x01
   1e1f6:	42 81       	ldd	r20, Z+2	; 0x02
   1e1f8:	53 81       	ldd	r21, Z+3	; 0x03
   1e1fa:	80 91 d9 02 	lds	r24, 0x02D9
   1e1fe:	90 91 da 02 	lds	r25, 0x02DA
   1e202:	a0 91 db 02 	lds	r26, 0x02DB
   1e206:	b0 91 dc 02 	lds	r27, 0x02DC
   1e20a:	0f c0       	rjmp	.+30     	; 0x1e22a <arp_entry_add+0x52>
			{
			return;
			}
		}
		if(ETHERNET_IP_DATAGRAMM)
   1e20c:	68 30       	cpi	r22, 0x08	; 8
   1e20e:	71 05       	cpc	r23, r1
   1e210:	91 f4       	brne	.+36     	; 0x1e236 <arp_entry_add+0x5e>
		{
			if(arp_entry[a].arp_t_ip == ip->IP_Srcaddr)
   1e212:	20 81       	ld	r18, Z
   1e214:	31 81       	ldd	r19, Z+1	; 0x01
   1e216:	42 81       	ldd	r20, Z+2	; 0x02
   1e218:	53 81       	ldd	r21, Z+3	; 0x03
   1e21a:	80 91 d7 02 	lds	r24, 0x02D7
   1e21e:	90 91 d8 02 	lds	r25, 0x02D8
   1e222:	a0 91 d9 02 	lds	r26, 0x02D9
   1e226:	b0 91 da 02 	lds	r27, 0x02DA
   1e22a:	28 17       	cp	r18, r24
   1e22c:	39 07       	cpc	r19, r25
   1e22e:	4a 07       	cpc	r20, r26
   1e230:	5b 07       	cpc	r21, r27
   1e232:	09 f4       	brne	.+2      	; 0x1e236 <arp_entry_add+0x5e>
   1e234:	7a c0       	rjmp	.+244    	; 0x1e32a <arp_entry_add+0x152>
   1e236:	3a 96       	adiw	r30, 0x0a	; 10

	struct IP_Header *ip;
	ip = (struct IP_Header *)&eth_buffer[IP_OFFSET];

	//Eintrag schon vorhanden?
	for (unsigned char a = 0;a<MAX_ARP_ENTRY;a++)
   1e238:	87 e0       	ldi	r24, 0x07	; 7
   1e23a:	e6 3a       	cpi	r30, 0xA6	; 166
   1e23c:	f8 07       	cpc	r31, r24
   1e23e:	a9 f6       	brne	.-86     	; 0x1e1ea <arp_entry_add+0x12>
   1e240:	20 e0       	ldi	r18, 0x00	; 0
   1e242:	30 e0       	ldi	r19, 0x00	; 0
   1e244:	52 2f       	mov	r21, r18
   1e246:	43 2f       	mov	r20, r19
	}

	//Freien Eintrag finden
	for (unsigned char b = 0;b<MAX_ARP_ENTRY;b++)
	{
		if(arp_entry[b].arp_t_ip == 0)
   1e248:	88 81       	ld	r24, Y
   1e24a:	99 81       	ldd	r25, Y+1	; 0x01
   1e24c:	aa 81       	ldd	r26, Y+2	; 0x02
   1e24e:	bb 81       	ldd	r27, Y+3	; 0x03
   1e250:	00 97       	sbiw	r24, 0x00	; 0
   1e252:	a1 05       	cpc	r26, r1
   1e254:	b1 05       	cpc	r27, r1
   1e256:	09 f0       	breq	.+2      	; 0x1e25a <arp_entry_add+0x82>
   1e258:	61 c0       	rjmp	.+194    	; 0x1e31c <arp_entry_add+0x144>
		{
			if(ETHERNET_ARP_DATAGRAMM)
   1e25a:	86 e0       	ldi	r24, 0x06	; 6
   1e25c:	68 30       	cpi	r22, 0x08	; 8
   1e25e:	78 07       	cpc	r23, r24
   1e260:	59 f5       	brne	.+86     	; 0x1e2b8 <arp_entry_add+0xe0>
	return;
}

//----------------------------------------------------------------------------
//erzeugt einen ARP - Eintrag wenn noch nicht vorhanden
void arp_entry_add (void)
   1e262:	a3 ec       	ldi	r26, 0xC3	; 195
   1e264:	b2 e0       	ldi	r27, 0x02	; 2
   1e266:	c9 01       	movw	r24, r18
   1e268:	fc 01       	movw	r30, r24
   1e26a:	ee 0f       	add	r30, r30
   1e26c:	ff 1f       	adc	r31, r31
   1e26e:	23 e0       	ldi	r18, 0x03	; 3
   1e270:	88 0f       	add	r24, r24
   1e272:	99 1f       	adc	r25, r25
   1e274:	2a 95       	dec	r18
   1e276:	e1 f7       	brne	.-8      	; 0x1e270 <arp_entry_add+0x98>
   1e278:	e8 0f       	add	r30, r24
   1e27a:	f9 1f       	adc	r31, r25
   1e27c:	e2 59       	subi	r30, 0x92	; 146
   1e27e:	f8 4f       	sbci	r31, 0xF8	; 248
   1e280:	86 e0       	ldi	r24, 0x06	; 6
		{
			if(ETHERNET_ARP_DATAGRAMM)
			{
				for(unsigned char a = 0; a < 6; a++)
				{
					arp_entry[b].arp_t_mac[a] = ethernet->EnetPacketSrc[a];
   1e282:	9d 91       	ld	r25, X+
   1e284:	91 93       	st	Z+, r25
   1e286:	81 50       	subi	r24, 0x01	; 1
	{
		if(arp_entry[b].arp_t_ip == 0)
		{
			if(ETHERNET_ARP_DATAGRAMM)
			{
				for(unsigned char a = 0; a < 6; a++)
   1e288:	e1 f7       	brne	.-8      	; 0x1e282 <arp_entry_add+0xaa>
				{
					arp_entry[b].arp_t_mac[a] = ethernet->EnetPacketSrc[a];
				}
				arp_entry[b].arp_t_ip = arp->ARP_SIPAddr;
   1e28a:	85 2f       	mov	r24, r21
   1e28c:	94 2f       	mov	r25, r20
   1e28e:	fc 01       	movw	r30, r24
   1e290:	ee 0f       	add	r30, r30
   1e292:	ff 1f       	adc	r31, r31
   1e294:	a3 e0       	ldi	r26, 0x03	; 3
   1e296:	88 0f       	add	r24, r24
   1e298:	99 1f       	adc	r25, r25
   1e29a:	aa 95       	dec	r26
   1e29c:	e1 f7       	brne	.-8      	; 0x1e296 <arp_entry_add+0xbe>
   1e29e:	e8 0f       	add	r30, r24
   1e2a0:	f9 1f       	adc	r31, r25
   1e2a2:	e2 59       	subi	r30, 0x92	; 146
   1e2a4:	f8 4f       	sbci	r31, 0xF8	; 248
   1e2a6:	80 91 d9 02 	lds	r24, 0x02D9
   1e2aa:	90 91 da 02 	lds	r25, 0x02DA
   1e2ae:	a0 91 db 02 	lds	r26, 0x02DB
   1e2b2:	b0 91 dc 02 	lds	r27, 0x02DC
   1e2b6:	2d c0       	rjmp	.+90     	; 0x1e312 <arp_entry_add+0x13a>
				return;
			}
			if(ETHERNET_IP_DATAGRAMM)
   1e2b8:	68 30       	cpi	r22, 0x08	; 8
   1e2ba:	71 05       	cpc	r23, r1
   1e2bc:	b1 f5       	brne	.+108    	; 0x1e32a <arp_entry_add+0x152>
	return;
}

//----------------------------------------------------------------------------
//erzeugt einen ARP - Eintrag wenn noch nicht vorhanden
void arp_entry_add (void)
   1e2be:	a3 ec       	ldi	r26, 0xC3	; 195
   1e2c0:	b2 e0       	ldi	r27, 0x02	; 2
   1e2c2:	c9 01       	movw	r24, r18
   1e2c4:	fc 01       	movw	r30, r24
   1e2c6:	ee 0f       	add	r30, r30
   1e2c8:	ff 1f       	adc	r31, r31
   1e2ca:	63 e0       	ldi	r22, 0x03	; 3
   1e2cc:	88 0f       	add	r24, r24
   1e2ce:	99 1f       	adc	r25, r25
   1e2d0:	6a 95       	dec	r22
   1e2d2:	e1 f7       	brne	.-8      	; 0x1e2cc <arp_entry_add+0xf4>
   1e2d4:	e8 0f       	add	r30, r24
   1e2d6:	f9 1f       	adc	r31, r25
   1e2d8:	e2 59       	subi	r30, 0x92	; 146
   1e2da:	f8 4f       	sbci	r31, 0xF8	; 248
   1e2dc:	86 e0       	ldi	r24, 0x06	; 6
			}
			if(ETHERNET_IP_DATAGRAMM)
			{
				for(unsigned char a = 0; a < 6; a++)
				{
					arp_entry[b].arp_t_mac[a] = ethernet->EnetPacketSrc[a];
   1e2de:	9d 91       	ld	r25, X+
   1e2e0:	91 93       	st	Z+, r25
   1e2e2:	81 50       	subi	r24, 0x01	; 1
				arp_entry[b].arp_t_ip = arp->ARP_SIPAddr;
				return;
			}
			if(ETHERNET_IP_DATAGRAMM)
			{
				for(unsigned char a = 0; a < 6; a++)
   1e2e4:	e1 f7       	brne	.-8      	; 0x1e2de <arp_entry_add+0x106>
				{
					arp_entry[b].arp_t_mac[a] = ethernet->EnetPacketSrc[a];
				}
				arp_entry[b].arp_t_ip = ip->IP_Srcaddr;
   1e2e6:	85 2f       	mov	r24, r21
   1e2e8:	94 2f       	mov	r25, r20
   1e2ea:	fc 01       	movw	r30, r24
   1e2ec:	ee 0f       	add	r30, r30
   1e2ee:	ff 1f       	adc	r31, r31
   1e2f0:	23 e0       	ldi	r18, 0x03	; 3
   1e2f2:	88 0f       	add	r24, r24
   1e2f4:	99 1f       	adc	r25, r25
   1e2f6:	2a 95       	dec	r18
   1e2f8:	e1 f7       	brne	.-8      	; 0x1e2f2 <arp_entry_add+0x11a>
   1e2fa:	e8 0f       	add	r30, r24
   1e2fc:	f9 1f       	adc	r31, r25
   1e2fe:	e2 59       	subi	r30, 0x92	; 146
   1e300:	f8 4f       	sbci	r31, 0xF8	; 248
   1e302:	80 91 d7 02 	lds	r24, 0x02D7
   1e306:	90 91 d8 02 	lds	r25, 0x02D8
   1e30a:	a0 91 d9 02 	lds	r26, 0x02D9
   1e30e:	b0 91 da 02 	lds	r27, 0x02DA
   1e312:	86 83       	std	Z+6, r24	; 0x06
   1e314:	97 83       	std	Z+7, r25	; 0x07
   1e316:	a0 87       	std	Z+8, r26	; 0x08
   1e318:	b1 87       	std	Z+9, r27	; 0x09
				return;
   1e31a:	07 c0       	rjmp	.+14     	; 0x1e32a <arp_entry_add+0x152>
   1e31c:	2f 5f       	subi	r18, 0xFF	; 255
   1e31e:	3f 4f       	sbci	r19, 0xFF	; 255
   1e320:	2a 96       	adiw	r28, 0x0a	; 10
			}
		}
	}

	//Freien Eintrag finden
	for (unsigned char b = 0;b<MAX_ARP_ENTRY;b++)
   1e322:	25 30       	cpi	r18, 0x05	; 5
   1e324:	31 05       	cpc	r19, r1
   1e326:	09 f0       	breq	.+2      	; 0x1e32a <arp_entry_add+0x152>
   1e328:	8d cf       	rjmp	.-230    	; 0x1e244 <arp_entry_add+0x6c>
		}
	}
	//Eintrag konnte nicht mehr aufgenommen werden
	DEBUG("ARP table full!\r\n");
	return;
}
   1e32a:	df 91       	pop	r29
   1e32c:	cf 91       	pop	r28
   1e32e:	08 95       	ret

0001e330 <arp_entry_search>:

//----------------------------------------------------------------------------
//Diese Routine such anhand der IP den ARP eintrag
char arp_entry_search (unsigned long dest_ip)
{
	for (unsigned char b = 0;b<MAX_ARP_ENTRY;b++)
   1e330:	e4 e7       	ldi	r30, 0x74	; 116
   1e332:	f7 e0       	ldi	r31, 0x07	; 7
   1e334:	a0 e0       	ldi	r26, 0x00	; 0
	{
		if(arp_entry[b].arp_t_ip == dest_ip)
   1e336:	20 81       	ld	r18, Z
   1e338:	31 81       	ldd	r19, Z+1	; 0x01
   1e33a:	42 81       	ldd	r20, Z+2	; 0x02
   1e33c:	53 81       	ldd	r21, Z+3	; 0x03
   1e33e:	26 17       	cp	r18, r22
   1e340:	37 07       	cpc	r19, r23
   1e342:	48 07       	cpc	r20, r24
   1e344:	59 07       	cpc	r21, r25
   1e346:	21 f0       	breq	.+8      	; 0x1e350 <arp_entry_search+0x20>

//----------------------------------------------------------------------------
//Diese Routine such anhand der IP den ARP eintrag
char arp_entry_search (unsigned long dest_ip)
{
	for (unsigned char b = 0;b<MAX_ARP_ENTRY;b++)
   1e348:	af 5f       	subi	r26, 0xFF	; 255
   1e34a:	3a 96       	adiw	r30, 0x0a	; 10
   1e34c:	a5 30       	cpi	r26, 0x05	; 5
   1e34e:	99 f7       	brne	.-26     	; 0x1e336 <arp_entry_search+0x6>
		{
			return(b);
		}
	}
	return (MAX_ARP_ENTRY);
}
   1e350:	8a 2f       	mov	r24, r26
   1e352:	08 95       	ret

0001e354 <new_eth_header>:

//----------------------------------------------------------------------------
//Diese Routine Erzeugt ein neuen Ethernetheader
void new_eth_header (unsigned char *buffer,unsigned long dest_ip)
{
   1e354:	ef 92       	push	r14
   1e356:	ff 92       	push	r15
   1e358:	0f 93       	push	r16
   1e35a:	1f 93       	push	r17
   1e35c:	cf 93       	push	r28
   1e35e:	df 93       	push	r29
   1e360:	8c 01       	movw	r16, r24
   1e362:	cb 01       	movw	r24, r22
   1e364:	ba 01       	movw	r22, r20
	struct Ethernet_Header *ethernet;
	ethernet = (struct Ethernet_Header *)&buffer[ETHER_OFFSET];

	unsigned char b = arp_entry_search (dest_ip);
   1e366:	e4 df       	rcall	.-56     	; 0x1e330 <arp_entry_search>
   1e368:	85 30       	cpi	r24, 0x05	; 5

	if (b != MAX_ARP_ENTRY) //Eintrag gefunden wenn ungleich
   1e36a:	f1 f0       	breq	.+60     	; 0x1e3a8 <new_eth_header+0x54>
   1e36c:	28 2f       	mov	r18, r24
	return (MAX_ARP_ENTRY);
}

//----------------------------------------------------------------------------
//Diese Routine Erzeugt ein neuen Ethernetheader
void new_eth_header (unsigned char *buffer,unsigned long dest_ip)
   1e36e:	30 e0       	ldi	r19, 0x00	; 0
   1e370:	f9 01       	movw	r30, r18
   1e372:	ee 0f       	add	r30, r30
   1e374:	ff 1f       	adc	r31, r31
   1e376:	43 e0       	ldi	r20, 0x03	; 3
   1e378:	22 0f       	add	r18, r18
   1e37a:	33 1f       	adc	r19, r19
   1e37c:	4a 95       	dec	r20
   1e37e:	e1 f7       	brne	.-8      	; 0x1e378 <new_eth_header+0x24>
   1e380:	e2 0f       	add	r30, r18
   1e382:	f3 1f       	adc	r31, r19
   1e384:	e2 59       	subi	r30, 0x92	; 146
   1e386:	f8 4f       	sbci	r31, 0xF8	; 248
   1e388:	e0 2e       	mov	r14, r16
	struct Ethernet_Header *ethernet;
	ethernet = (struct Ethernet_Header *)&buffer[ETHER_OFFSET];

	unsigned char b = arp_entry_search (dest_ip);

	if (b != MAX_ARP_ENTRY) //Eintrag gefunden wenn ungleich
   1e38a:	e7 01       	movw	r28, r14
   1e38c:	7e 01       	movw	r14, r28
   1e38e:	f1 2e       	mov	r15, r17
   1e390:	e7 01       	movw	r28, r14
   1e392:	a9 e0       	ldi	r26, 0x09	; 9
   1e394:	b2 e0       	ldi	r27, 0x02	; 2
   1e396:	81 91       	ld	r24, Z+
	{
		for(unsigned char a = 0; a < 6; a++)
		{
			//MAC Destadresse wird geschrieben mit MAC Sourceadresse
			ethernet->EnetPacketDest[a] = arp_entry[b].arp_t_mac[a];
   1e398:	89 93       	st	Y+, r24
   1e39a:	8d 91       	ld	r24, X+
			//Meine MAC Adresse wird in Sourceadresse geschrieben
			ethernet->EnetPacketSrc[a] = mymac[a];
   1e39c:	8d 83       	std	Y+5, r24	; 0x05
   1e39e:	32 e0       	ldi	r19, 0x02	; 2

	unsigned char b = arp_entry_search (dest_ip);

	if (b != MAX_ARP_ENTRY) //Eintrag gefunden wenn ungleich
	{
		for(unsigned char a = 0; a < 6; a++)
   1e3a0:	af 30       	cpi	r26, 0x0F	; 15
   1e3a2:	b3 07       	cpc	r27, r19
   1e3a4:	c1 f7       	brne	.-16     	; 0x1e396 <new_eth_header+0x42>
   1e3a6:	0e c0       	rjmp	.+28     	; 0x1e3c4 <new_eth_header+0x70>
   1e3a8:	a0 2f       	mov	r26, r16
   1e3aa:	b1 2f       	mov	r27, r17
   1e3ac:	e9 e0       	ldi	r30, 0x09	; 9
   1e3ae:	f2 e0       	ldi	r31, 0x02	; 2
   1e3b0:	8f ef       	ldi	r24, 0xFF	; 255
	DEBUG("No ARP entry found\r\n");

	for(unsigned char a = 0; a < 6; a++)
	{
		//MAC Destadresse wird geschrieben mit MAC Sourceadresse
		ethernet->EnetPacketDest[a] = 0xFF;
   1e3b2:	8d 93       	st	X+, r24
   1e3b4:	91 91       	ld	r25, Z+
		//Meine MAC Adresse wird in Sourceadresse geschrieben
		ethernet->EnetPacketSrc[a] = mymac[a];
   1e3b6:	15 96       	adiw	r26, 0x05	; 5
   1e3b8:	9c 93       	st	X, r25
   1e3ba:	15 97       	sbiw	r26, 0x05	; 5
   1e3bc:	92 e0       	ldi	r25, 0x02	; 2
		}
		return;
	}
	DEBUG("No ARP entry found\r\n");

	for(unsigned char a = 0; a < 6; a++)
   1e3be:	ef 30       	cpi	r30, 0x0F	; 15
   1e3c0:	f9 07       	cpc	r31, r25
   1e3c2:	b9 f7       	brne	.-18     	; 0x1e3b2 <new_eth_header+0x5e>
   1e3c4:	df 91       	pop	r29
		//Meine MAC Adresse wird in Sourceadresse geschrieben
		ethernet->EnetPacketSrc[a] = mymac[a];
	}
	return;

}
   1e3c6:	cf 91       	pop	r28
   1e3c8:	1f 91       	pop	r17
   1e3ca:	0f 91       	pop	r16
   1e3cc:	ff 90       	pop	r15
   1e3ce:	ef 90       	pop	r14
   1e3d0:	08 95       	ret

0001e3d2 <arp_reply>:

//----------------------------------------------------------------------------
//Diese Routine Antwortet auf ein ARP Packet
void arp_reply (void)
{
   1e3d2:	ef 92       	push	r14
   1e3d4:	ff 92       	push	r15
   1e3d6:	0f 93       	push	r16
   1e3d8:	1f 93       	push	r17
   1e3da:	cf 93       	push	r28
   1e3dc:	df 93       	push	r29
	struct Ethernet_Header *ethernet;
	ethernet = (struct Ethernet_Header *)&eth_buffer[ETHER_OFFSET];

	struct ARP_Header *arp;
	arp = (struct ARP_Header *)&eth_buffer[ARP_OFFSET];
   1e3de:	cb ec       	ldi	r28, 0xCB	; 203
   1e3e0:	d2 e0       	ldi	r29, 0x02	; 2

	//2 Byte Hardware Typ: Enthält den Code für Ethernet
	if(		arp->ARP_HWType == 0x0100 &&
   1e3e2:	80 91 cb 02 	lds	r24, 0x02CB
   1e3e6:	90 91 cc 02 	lds	r25, 0x02CC
   1e3ea:	21 e0       	ldi	r18, 0x01	; 1
   1e3ec:	80 30       	cpi	r24, 0x00	; 0
   1e3ee:	92 07       	cpc	r25, r18
   1e3f0:	09 f0       	breq	.+2      	; 0x1e3f4 <arp_reply+0x22>
   1e3f2:	90 c0       	rjmp	.+288    	; 0x1e514 <arp_reply+0x142>
   1e3f4:	80 91 cd 02 	lds	r24, 0x02CD
   1e3f8:	90 91 ce 02 	lds	r25, 0x02CE
   1e3fc:	88 30       	cpi	r24, 0x08	; 8
   1e3fe:	91 05       	cpc	r25, r1
   1e400:	09 f0       	breq	.+2      	; 0x1e404 <arp_reply+0x32>
   1e402:	88 c0       	rjmp	.+272    	; 0x1e514 <arp_reply+0x142>

			//2 Byte Protokoll Typ: Enthält den Code für IP
			arp->ARP_PRType == 0x0008  &&
   1e404:	80 91 cf 02 	lds	r24, 0x02CF
   1e408:	86 30       	cpi	r24, 0x06	; 6
   1e40a:	09 f0       	breq	.+2      	; 0x1e40e <arp_reply+0x3c>
   1e40c:	83 c0       	rjmp	.+262    	; 0x1e514 <arp_reply+0x142>

			//1Byte Länge der Hardwareadresse:Enthält 6 für 6 Byte MAC Addresse
			arp->ARP_HWLen == 0x06 &&
   1e40e:	80 91 d0 02 	lds	r24, 0x02D0
   1e412:	84 30       	cpi	r24, 0x04	; 4
   1e414:	09 f0       	breq	.+2      	; 0x1e418 <arp_reply+0x46>
   1e416:	7e c0       	rjmp	.+252    	; 0x1e514 <arp_reply+0x142>

			//1Byte Länge der Protokolladresse:Enthält 4 für 4 Byte Adressen
			arp->ARP_PRLen == 0x04 &&
   1e418:	20 91 e3 02 	lds	r18, 0x02E3
   1e41c:	30 91 e4 02 	lds	r19, 0x02E4
   1e420:	40 91 e5 02 	lds	r20, 0x02E5
   1e424:	50 91 e6 02 	lds	r21, 0x02E6
   1e428:	80 91 a0 07 	lds	r24, 0x07A0
   1e42c:	90 91 a1 07 	lds	r25, 0x07A1
   1e430:	a0 91 a2 07 	lds	r26, 0x07A2
   1e434:	b0 91 a3 07 	lds	r27, 0x07A3
   1e438:	28 17       	cp	r18, r24
   1e43a:	39 07       	cpc	r19, r25
   1e43c:	4a 07       	cpc	r20, r26
   1e43e:	5b 07       	cpc	r21, r27
   1e440:	09 f0       	breq	.+2      	; 0x1e444 <arp_reply+0x72>
   1e442:	68 c0       	rjmp	.+208    	; 0x1e514 <arp_reply+0x142>
			//Ist das ARP Packet für meine IP Addresse bestimmt
			//Vergleiche ARP Target IP Adresse mit meiner IP
			arp->ARP_TIPAddr == *((unsigned long*)&myip[0]))
	{
		//Operation handelt es sich um eine anfrage
		if (arp->ARP_Op == 0x0100)
   1e444:	80 91 d1 02 	lds	r24, 0x02D1
   1e448:	90 91 d2 02 	lds	r25, 0x02D2
   1e44c:	a1 e0       	ldi	r26, 0x01	; 1
   1e44e:	80 30       	cpi	r24, 0x00	; 0
   1e450:	9a 07       	cpc	r25, r26
   1e452:	09 f0       	breq	.+2      	; 0x1e456 <arp_reply+0x84>
   1e454:	5a c0       	rjmp	.+180    	; 0x1e50a <arp_reply+0x138>
		{
			//Rechner Eingetragen wenn noch nicht geschehen?
			arp_entry_add();
   1e456:	c0 de       	rcall	.-640    	; 0x1e1d8 <arp_entry_add>
   1e458:	40 91 d9 02 	lds	r20, 0x02D9

			new_eth_header (eth_buffer, arp->ARP_SIPAddr); //Erzeugt ein neuen Ethernetheader
   1e45c:	50 91 da 02 	lds	r21, 0x02DA
   1e460:	60 91 db 02 	lds	r22, 0x02DB
   1e464:	70 91 dc 02 	lds	r23, 0x02DC
   1e468:	ce 01       	movw	r24, r28
   1e46a:	0e 97       	sbiw	r24, 0x0e	; 14
   1e46c:	73 df       	rcall	.-282    	; 0x1e354 <new_eth_header>
   1e46e:	88 e0       	ldi	r24, 0x08	; 8
   1e470:	96 e0       	ldi	r25, 0x06	; 6

			ethernet->EnetPacketType = 0x0608; //Nutzlast 0x0800=IP Datagramm;0x0806 = ARP
   1e472:	90 93 ca 02 	sts	0x02CA, r25
   1e476:	80 93 c9 02 	sts	0x02C9, r24
   1e47a:	e0 90 d9 02 	lds	r14, 0x02D9

			unsigned char b = arp_entry_search (arp->ARP_SIPAddr);
   1e47e:	f0 90 da 02 	lds	r15, 0x02DA
   1e482:	00 91 db 02 	lds	r16, 0x02DB
   1e486:	10 91 dc 02 	lds	r17, 0x02DC
   1e48a:	c8 01       	movw	r24, r16
   1e48c:	b7 01       	movw	r22, r14
   1e48e:	50 df       	rcall	.-352    	; 0x1e330 <arp_entry_search>
   1e490:	85 30       	cpi	r24, 0x05	; 5
   1e492:	09 f1       	breq	.+66     	; 0x1e4d6 <arp_reply+0x104>
   1e494:	28 2f       	mov	r18, r24
			if (b != MAX_ARP_ENTRY) //Eintrag gefunden wenn ungleich
   1e496:	30 e0       	ldi	r19, 0x00	; 0
   1e498:	f9 01       	movw	r30, r18

}

//----------------------------------------------------------------------------
//Diese Routine Antwortet auf ein ARP Packet
void arp_reply (void)
   1e49a:	ee 0f       	add	r30, r30
   1e49c:	ff 1f       	adc	r31, r31
   1e49e:	63 e0       	ldi	r22, 0x03	; 3
   1e4a0:	22 0f       	add	r18, r18
   1e4a2:	33 1f       	adc	r19, r19
   1e4a4:	6a 95       	dec	r22
   1e4a6:	e1 f7       	brne	.-8      	; 0x1e4a0 <arp_reply+0xce>
   1e4a8:	e2 0f       	add	r30, r18
   1e4aa:	f3 1f       	adc	r31, r19
   1e4ac:	e2 59       	subi	r30, 0x92	; 146
   1e4ae:	f8 4f       	sbci	r31, 0xF8	; 248
   1e4b0:	89 e0       	ldi	r24, 0x09	; 9
   1e4b2:	92 e0       	ldi	r25, 0x02	; 2
   1e4b4:	ae 01       	movw	r20, r28
			new_eth_header (eth_buffer, arp->ARP_SIPAddr); //Erzeugt ein neuen Ethernetheader

			ethernet->EnetPacketType = 0x0608; //Nutzlast 0x0800=IP Datagramm;0x0806 = ARP

			unsigned char b = arp_entry_search (arp->ARP_SIPAddr);
			if (b != MAX_ARP_ENTRY) //Eintrag gefunden wenn ungleich
   1e4b6:	48 5f       	subi	r20, 0xF8	; 248
   1e4b8:	5f 4f       	sbci	r21, 0xFF	; 255

}

//----------------------------------------------------------------------------
//Diese Routine Antwortet auf ein ARP Packet
void arp_reply (void)
   1e4ba:	21 91       	ld	r18, Z+
   1e4bc:	da 01       	movw	r26, r20
   1e4be:	1a 96       	adiw	r26, 0x0a	; 10
			if (b != MAX_ARP_ENTRY) //Eintrag gefunden wenn ungleich
			{
				for(unsigned char a = 0; a < 6; a++)
				{
					//ARP MAC Targetadresse wird geschrieben mit ARP Sourceadresse
					arp->ARP_THAddr[a] = arp_entry[b].arp_t_mac[a];
   1e4c0:	2c 93       	st	X, r18
   1e4c2:	dc 01       	movw	r26, r24
   1e4c4:	2d 91       	ld	r18, X+
   1e4c6:	cd 01       	movw	r24, r26
					//ARP MAC Sourceadresse wird geschrieben mit My MAC Adresse
					arp->ARP_SHAddr[a] = mymac[a];
   1e4c8:	da 01       	movw	r26, r20
   1e4ca:	2d 93       	st	X+, r18
   1e4cc:	ad 01       	movw	r20, r26
   1e4ce:	b2 e0       	ldi	r27, 0x02	; 2
   1e4d0:	8f 30       	cpi	r24, 0x0F	; 15
   1e4d2:	9b 07       	cpc	r25, r27
			ethernet->EnetPacketType = 0x0608; //Nutzlast 0x0800=IP Datagramm;0x0806 = ARP

			unsigned char b = arp_entry_search (arp->ARP_SIPAddr);
			if (b != MAX_ARP_ENTRY) //Eintrag gefunden wenn ungleich
			{
				for(unsigned char a = 0; a < 6; a++)
   1e4d4:	91 f7       	brne	.-28     	; 0x1e4ba <arp_reply+0xe8>
   1e4d6:	80 e0       	ldi	r24, 0x00	; 0
   1e4d8:	92 e0       	ldi	r25, 0x02	; 2
   1e4da:	9f 83       	std	Y+7, r25	; 0x07
			{
				DEBUG("No ARP entry found\r\n");//Unwarscheinlich das das jemals passiert!
			}

			//ARP operation wird auf 2 gesetzt damit der andere merkt es ist ein ECHO
			arp->ARP_Op = 0x0200;
   1e4dc:	8e 83       	std	Y+6, r24	; 0x06
   1e4de:	e8 8e       	std	Y+24, r14	; 0x18
   1e4e0:	f9 8e       	std	Y+25, r15	; 0x19
   1e4e2:	0a 8f       	std	Y+26, r16	; 0x1a
			//ARP Target IP Adresse wird geschrieben mit ARP Source IP Adresse
			arp->ARP_TIPAddr = arp->ARP_SIPAddr;
   1e4e4:	1b 8f       	std	Y+27, r17	; 0x1b
   1e4e6:	80 91 a0 07 	lds	r24, 0x07A0
   1e4ea:	90 91 a1 07 	lds	r25, 0x07A1
			//Meine IP Adresse wird in ARP Source IP Adresse geschrieben
			arp->ARP_SIPAddr = *((unsigned long *)&myip[0]);
   1e4ee:	a0 91 a2 07 	lds	r26, 0x07A2
   1e4f2:	b0 91 a3 07 	lds	r27, 0x07A3
   1e4f6:	8e 87       	std	Y+14, r24	; 0x0e
   1e4f8:	9f 87       	std	Y+15, r25	; 0x0f
   1e4fa:	a8 8b       	std	Y+16, r26	; 0x10
   1e4fc:	b9 8b       	std	Y+17, r27	; 0x11
   1e4fe:	8c e3       	ldi	r24, 0x3C	; 60
   1e500:	90 e0       	ldi	r25, 0x00	; 0
   1e502:	6d eb       	ldi	r22, 0xBD	; 189

			//Nun ist das ARP-Packet fertig zum Senden !!!
			//Sendet das erzeugte ARP Packet
			ETH_PACKET_SEND(ARP_REPLY_LEN,eth_buffer);
   1e504:	72 e0       	ldi	r23, 0x02	; 2
   1e506:	19 d5       	rcall	.+2610   	; 0x1ef3a <enc28j60_send_packet>
   1e508:	05 c0       	rjmp	.+10     	; 0x1e514 <arp_reply+0x142>
   1e50a:	22 e0       	ldi	r18, 0x02	; 2
   1e50c:	80 30       	cpi	r24, 0x00	; 0
   1e50e:	92 07       	cpc	r25, r18
			return;
   1e510:	09 f4       	brne	.+2      	; 0x1e514 <arp_reply+0x142>
		}
		//es handelt sich um ein REPLY von einem anderen Client
		if (arp->ARP_Op == 0x0200)
   1e512:	62 de       	rcall	.-828    	; 0x1e1d8 <arp_entry_add>
   1e514:	df 91       	pop	r29
   1e516:	cf 91       	pop	r28
   1e518:	1f 91       	pop	r17
		{
			//Rechner Eingetragen wenn noch nicht geschehen?
			arp_entry_add();
   1e51a:	0f 91       	pop	r16
   1e51c:	ff 90       	pop	r15

			DEBUG("ARP REPLY!\r\n");
		}
	}
	return;
}
   1e51e:	ef 90       	pop	r14
   1e520:	08 95       	ret

0001e522 <checksum>:
#endif

//----------------------------------------------------------------------------
//Diese Routine erzeugt eine Cecksumme
unsigned int checksum (unsigned char *pointer,unsigned int result16,unsigned long result32)
{
   1e522:	ef 92       	push	r14
   1e524:	ff 92       	push	r15
   1e526:	0f 93       	push	r16
   1e528:	1f 93       	push	r17
   1e52a:	cf 93       	push	r28
   1e52c:	df 93       	push	r29
   1e52e:	8c 01       	movw	r16, r24
	unsigned int result16_1 = 0x0000;
	unsigned char DataH;
	unsigned char DataL;

	//Jetzt werden alle Packete in einer While Schleife addiert
	while(result16 > 1)
   1e530:	eb 01       	movw	r28, r22
   1e532:	fc 01       	movw	r30, r24
   1e534:	10 c0       	rjmp	.+32     	; 0x1e556 <checksum+0x34>
	{
		//schreibt Inhalt Pointer nach DATAH danach inc Pointer
		DataH=*pointer++;
   1e536:	90 81       	ld	r25, Z

		//schreibt Inhalt Pointer nach DATAL danach inc Pointer
		DataL=*pointer++;
   1e538:	81 81       	ldd	r24, Z+1	; 0x01
}
#endif

//----------------------------------------------------------------------------
//Diese Routine erzeugt eine Cecksumme
unsigned int checksum (unsigned char *pointer,unsigned int result16,unsigned long result32)
   1e53a:	32 96       	adiw	r30, 0x02	; 2

		//schreibt Inhalt Pointer nach DATAL danach inc Pointer
		DataL=*pointer++;

		//erzeugt Int aus Data L und Data H
		result16_1 = ((DataH << 8)+DataL);
   1e53c:	f9 2e       	mov	r15, r25
   1e53e:	ee 24       	eor	r14, r14
   1e540:	d7 01       	movw	r26, r14
   1e542:	a8 0f       	add	r26, r24
   1e544:	b1 1d       	adc	r27, r1
   1e546:	cd 01       	movw	r24, r26
		//Addiert packet mit vorherigen
		result32 = result32 + result16_1;
   1e548:	a0 e0       	ldi	r26, 0x00	; 0
   1e54a:	b0 e0       	ldi	r27, 0x00	; 0
   1e54c:	28 0f       	add	r18, r24
   1e54e:	39 1f       	adc	r19, r25
   1e550:	4a 1f       	adc	r20, r26
   1e552:	5b 1f       	adc	r21, r27
		//decrimiert Länge von TCP Headerschleife um 2
		result16 -=2;
   1e554:	22 97       	sbiw	r28, 0x02	; 2
	unsigned int result16_1 = 0x0000;
	unsigned char DataH;
	unsigned char DataL;

	//Jetzt werden alle Packete in einer While Schleife addiert
	while(result16 > 1)
   1e556:	c2 30       	cpi	r28, 0x02	; 2
   1e558:	d1 05       	cpc	r29, r1
   1e55a:	68 f7       	brcc	.-38     	; 0x1e536 <checksum+0x14>
}
#endif

//----------------------------------------------------------------------------
//Diese Routine erzeugt eine Cecksumme
unsigned int checksum (unsigned char *pointer,unsigned int result16,unsigned long result32)
   1e55c:	fb 01       	movw	r30, r22
   1e55e:	ee 7f       	andi	r30, 0xFE	; 254
	unsigned int result16_1 = 0x0000;
	unsigned char DataH;
	unsigned char DataL;

	//Jetzt werden alle Packete in einer While Schleife addiert
	while(result16 > 1)
   1e560:	e0 0f       	add	r30, r16
   1e562:	f1 1f       	adc	r31, r17
		//decrimiert Länge von TCP Headerschleife um 2
		result16 -=2;
	}

	//Ist der Wert result16 ungerade ist DataL = 0
	if(result16 > 0)
   1e564:	60 ff       	sbrs	r22, 0
   1e566:	08 c0       	rjmp	.+16     	; 0x1e578 <checksum+0x56>
	{
		//schreibt Inhalt Pointer nach DATAH danach inc Pointer
		DataH=*pointer;
		//erzeugt Int aus Data L ist 0 (ist nicht in der Berechnung) und Data H
		result16_1 = (DataH << 8);
   1e568:	90 81       	ld	r25, Z
   1e56a:	80 e0       	ldi	r24, 0x00	; 0
		//Addiert packet mit vorherigen
		result32 = result32 + result16_1;
   1e56c:	a0 e0       	ldi	r26, 0x00	; 0
   1e56e:	b0 e0       	ldi	r27, 0x00	; 0
   1e570:	28 0f       	add	r18, r24
   1e572:	39 1f       	adc	r19, r25
   1e574:	4a 1f       	adc	r20, r26
   1e576:	5b 1f       	adc	r21, r27
	}

	//Komplementbildung (addiert Long INT_H Byte mit Long INT L Byte)
	result32 = ((result32 & 0x0000FFFF)+ ((result32 & 0xFFFF0000) >> 16));
   1e578:	da 01       	movw	r26, r20
   1e57a:	c9 01       	movw	r24, r18
   1e57c:	a0 70       	andi	r26, 0x00	; 0
   1e57e:	b0 70       	andi	r27, 0x00	; 0
   1e580:	9a 01       	movw	r18, r20
   1e582:	44 27       	eor	r20, r20
   1e584:	55 27       	eor	r21, r21
   1e586:	28 0f       	add	r18, r24
   1e588:	39 1f       	adc	r19, r25
   1e58a:	4a 1f       	adc	r20, r26
   1e58c:	5b 1f       	adc	r21, r27
	result32 = ((result32 & 0x0000FFFF)+ ((result32 & 0xFFFF0000) >> 16));
   1e58e:	da 01       	movw	r26, r20
   1e590:	c9 01       	movw	r24, r18
   1e592:	a0 70       	andi	r26, 0x00	; 0
   1e594:	b0 70       	andi	r27, 0x00	; 0
   1e596:	9a 01       	movw	r18, r20
   1e598:	44 27       	eor	r20, r20
   1e59a:	55 27       	eor	r21, r21
   1e59c:	28 0f       	add	r18, r24
   1e59e:	39 1f       	adc	r19, r25
   1e5a0:	4a 1f       	adc	r20, r26
   1e5a2:	5b 1f       	adc	r21, r27
	result16 =~(result32 & 0x0000FFFF);
   1e5a4:	20 95       	com	r18
   1e5a6:	30 95       	com	r19

	return (result16);
}
   1e5a8:	c9 01       	movw	r24, r18
   1e5aa:	df 91       	pop	r29
   1e5ac:	cf 91       	pop	r28
   1e5ae:	1f 91       	pop	r17
   1e5b0:	0f 91       	pop	r16
   1e5b2:	ff 90       	pop	r15
   1e5b4:	ef 90       	pop	r14
   1e5b6:	08 95       	ret

0001e5b8 <make_ip_header>:

//----------------------------------------------------------------------------
//Diese Routine erzeugt ein IP Packet
void make_ip_header (unsigned char *buffer,unsigned long dest_ip)
{
   1e5b8:	cf 92       	push	r12
   1e5ba:	df 92       	push	r13
   1e5bc:	ef 92       	push	r14
   1e5be:	ff 92       	push	r15
   1e5c0:	0f 93       	push	r16
   1e5c2:	1f 93       	push	r17
   1e5c4:	cf 93       	push	r28
   1e5c6:	df 93       	push	r29
   1e5c8:	8c 01       	movw	r16, r24
   1e5ca:	6a 01       	movw	r12, r20
   1e5cc:	7b 01       	movw	r14, r22

	//------------------------------------------------------------------------
	struct Ethernet_Header *ethernet;
	ethernet = (struct Ethernet_Header *)&buffer[ETHER_OFFSET];
	new_eth_header (buffer, dest_ip); //Erzeugt ein neuen Ethernetheader
   1e5ce:	c2 de       	rcall	.-636    	; 0x1e354 <new_eth_header>
   1e5d0:	88 e0       	ldi	r24, 0x08	; 8
	ethernet->EnetPacketType = 0x0008; //Nutzlast 0x0800=IP
   1e5d2:	90 e0       	ldi	r25, 0x00	; 0
   1e5d4:	f8 01       	movw	r30, r16
   1e5d6:	95 87       	std	Z+13, r25	; 0x0d
   1e5d8:	84 87       	std	Z+12, r24	; 0x0c
   1e5da:	e8 01       	movw	r28, r16
	//------------------------------------------------------------------------

	//Variablen zur Berechnung der Checksumme
	unsigned int result16;

	ip = (struct IP_Header *)&buffer[IP_OFFSET];
   1e5dc:	2e 96       	adiw	r28, 0x0e	; 14
   1e5de:	80 e4       	ldi	r24, 0x40	; 64

	//don't fragment
	ip->IP_Frag_Offset = 0x0040;
   1e5e0:	90 e0       	ldi	r25, 0x00	; 0
   1e5e2:	9f 83       	std	Y+7, r25	; 0x07
   1e5e4:	8e 83       	std	Y+6, r24	; 0x06
   1e5e6:	80 e8       	ldi	r24, 0x80	; 128

	//max. hops
	ip->IP_ttl = 128;
   1e5e8:	88 87       	std	Y+8, r24	; 0x08
   1e5ea:	80 91 b6 02 	lds	r24, 0x02B6
	IP_id_counter++;
   1e5ee:	90 91 b7 02 	lds	r25, 0x02B7
   1e5f2:	01 96       	adiw	r24, 0x01	; 1
   1e5f4:	90 93 b7 02 	sts	0x02B7, r25
   1e5f8:	80 93 b6 02 	sts	0x02B6, r24
   1e5fc:	98 27       	eor	r25, r24
	ip->IP_Id = LBBL_ENDIAN_INT(IP_id_counter);
   1e5fe:	89 27       	eor	r24, r25
   1e600:	98 27       	eor	r25, r24
   1e602:	9d 83       	std	Y+5, r25	; 0x05
   1e604:	8c 83       	std	Y+4, r24	; 0x04
   1e606:	85 e4       	ldi	r24, 0x45	; 69
	ip->IP_Vers_Len = 0x45;	//4 BIT Die Versionsnummer von IP,
   1e608:	86 87       	std	Z+14, r24	; 0x0e
   1e60a:	19 82       	std	Y+1, r1	; 0x01
							//meistens also 4 + 4Bit Headergröße
	ip->IP_Tos = 0x00;
   1e60c:	c8 8a       	std	Y+16, r12	; 0x10
	//unsigned char	IP_Proto;		//Zeigt das höherschichtige Protokoll an
									//(TCP, UDP, ICMP)

	//IP Destadresse wird geschrieben mit IP Sourceadresse
	//das packet soll ja zurückgeschickt werden :-)
	ip->IP_Destaddr	= dest_ip;
   1e60e:	d9 8a       	std	Y+17, r13	; 0x11
   1e610:	ea 8a       	std	Y+18, r14	; 0x12
   1e612:	fb 8a       	std	Y+19, r15	; 0x13
   1e614:	80 91 a0 07 	lds	r24, 0x07A0
	ip->IP_Srcaddr	= *((unsigned long *)&myip[0]);
   1e618:	90 91 a1 07 	lds	r25, 0x07A1
   1e61c:	a0 91 a2 07 	lds	r26, 0x07A2
   1e620:	b0 91 a3 07 	lds	r27, 0x07A3
   1e624:	8c 87       	std	Y+12, r24	; 0x0c
   1e626:	9d 87       	std	Y+13, r25	; 0x0d
   1e628:	ae 87       	std	Y+14, r26	; 0x0e
   1e62a:	bf 87       	std	Y+15, r27	; 0x0f
   1e62c:	1b 86       	std	Y+11, r1	; 0x0b

	//Berechnung der IP Checksumme
	//Alle Daten im IP Header werden addiert checksum wird deshalb
	//ersteinmal auf null gesetzt
	ip->IP_Hdr_Cksum = 0x0000;
   1e62e:	1a 86       	std	Y+10, r1	; 0x0a
   1e630:	ce 01       	movw	r24, r28

	//Berechnung der IP Header länge
	result16 = (ip->IP_Vers_Len & 0x0F) << 2;

	//jetzt wird die Checksumme berechnet
	result16 = checksum (&ip->IP_Vers_Len, result16, 0);
   1e632:	64 e1       	ldi	r22, 0x14	; 20
   1e634:	70 e0       	ldi	r23, 0x00	; 0
   1e636:	20 e0       	ldi	r18, 0x00	; 0
   1e638:	30 e0       	ldi	r19, 0x00	; 0
   1e63a:	a9 01       	movw	r20, r18
   1e63c:	72 df       	rcall	.-284    	; 0x1e522 <checksum>
   1e63e:	98 27       	eor	r25, r24
   1e640:	89 27       	eor	r24, r25

	//schreibt Checksumme ins Packet
	ip->IP_Hdr_Cksum = LBBL_ENDIAN_INT(result16);
   1e642:	98 27       	eor	r25, r24
   1e644:	9b 87       	std	Y+11, r25	; 0x0b
   1e646:	8a 87       	std	Y+10, r24	; 0x0a
   1e648:	df 91       	pop	r29
   1e64a:	cf 91       	pop	r28
	return;
}
   1e64c:	1f 91       	pop	r17
   1e64e:	0f 91       	pop	r16
   1e650:	ff 90       	pop	r15
   1e652:	ef 90       	pop	r14
   1e654:	df 90       	pop	r13
   1e656:	cf 90       	pop	r12
   1e658:	08 95       	ret

0001e65a <udp_socket_process>:
	udp = (struct UDP_Header *)&eth_buffer[UDP_OFFSET];

	//zugehörige Anwendung ausführen - hier immer der tftp-client
	DEBUG("UDP Anwendung gefunden an Port %i, Src-Port %i!\r\n", LBBL_ENDIAN_INT(udp->udp_DestPort), LBBL_ENDIAN_INT(udp->udp_SrcPort));

	tftp_get(ip->IP_Srcaddr, LBBL_ENDIAN_INT(udp->udp_SrcPort));
   1e65a:	60 91 d7 02 	lds	r22, 0x02D7
   1e65e:	70 91 d8 02 	lds	r23, 0x02D8
   1e662:	80 91 d9 02 	lds	r24, 0x02D9
   1e666:	90 91 da 02 	lds	r25, 0x02DA
   1e66a:	40 91 df 02 	lds	r20, 0x02DF
   1e66e:	50 91 e0 02 	lds	r21, 0x02E0
   1e672:	54 27       	eor	r21, r20
   1e674:	45 27       	eor	r20, r21
   1e676:	54 27       	eor	r21, r20
   1e678:	15 c6       	rjmp	.+3114   	; 0x1f2a4 <tftp_get>

0001e67a <check_packet>:
	//Pointer auf ICMP_Header
	struct ICMP_Header *icmp;
	icmp = (struct ICMP_Header *)&eth_buffer[ICMP_OFFSET];
#endif

	if(ETHERNET_ARP_DATAGRAMM) {
   1e67a:	80 91 c9 02 	lds	r24, 0x02C9
   1e67e:	90 91 ca 02 	lds	r25, 0x02CA
   1e682:	26 e0       	ldi	r18, 0x06	; 6
   1e684:	88 30       	cpi	r24, 0x08	; 8
   1e686:	92 07       	cpc	r25, r18
   1e688:	09 f4       	brne	.+2      	; 0x1e68c <check_packet+0x12>
		//Erzeugt ein ARP Reply Packet
		arp_reply();
   1e68a:	a3 ce       	rjmp	.-698    	; 0x1e3d2 <arp_reply>
   1e68c:	88 30       	cpi	r24, 0x08	; 8
   1e68e:	91 05       	cpc	r25, r1
	} else {
		if(ETHERNET_IP_DATAGRAMM && IF_MYIP) {
   1e690:	d9 f4       	brne	.+54     	; 0x1e6c8 <check_packet+0x4e>
   1e692:	20 91 db 02 	lds	r18, 0x02DB
   1e696:	30 91 dc 02 	lds	r19, 0x02DC
   1e69a:	40 91 dd 02 	lds	r20, 0x02DD
   1e69e:	50 91 de 02 	lds	r21, 0x02DE
   1e6a2:	80 91 a0 07 	lds	r24, 0x07A0
   1e6a6:	90 91 a1 07 	lds	r25, 0x07A1
   1e6aa:	a0 91 a2 07 	lds	r26, 0x07A2
   1e6ae:	b0 91 a3 07 	lds	r27, 0x07A3
   1e6b2:	28 17       	cp	r18, r24
   1e6b4:	39 07       	cpc	r19, r25
   1e6b6:	4a 07       	cpc	r20, r26
   1e6b8:	5b 07       	cpc	r21, r27
   1e6ba:	31 f4       	brne	.+12     	; 0x1e6c8 <check_packet+0x4e>
   1e6bc:	8d dd       	rcall	.-1254   	; 0x1e1d8 <arp_entry_add>
   1e6be:	80 91 d4 02 	lds	r24, 0x02D4
			arp_entry_add();			//Refresh des ARP Eintrages
   1e6c2:	81 31       	cpi	r24, 0x11	; 17
				return;
			}
			else
#endif
			{
				if(IP_UDP_PACKET) udp_socket_process();
   1e6c4:	09 f4       	brne	.+2      	; 0x1e6c8 <check_packet+0x4e>
   1e6c6:	c9 cf       	rjmp	.-110    	; 0x1e65a <udp_socket_process>
   1e6c8:	08 95       	ret

0001e6ca <eth_get_data>:
//ETH get data
void eth_get_data (void)
{
	unsigned int packet_lenght;

	packet_lenght = ETH_PACKET_RECEIVE(MTU_SIZE,eth_buffer);
   1e6ca:	80 eb       	ldi	r24, 0xB0	; 176
   1e6cc:	94 e0       	ldi	r25, 0x04	; 4
   1e6ce:	6d eb       	ldi	r22, 0xBD	; 189
   1e6d0:	72 e0       	ldi	r23, 0x02	; 2
   1e6d2:	c3 d3       	rcall	.+1926   	; 0x1ee5a <enc28j60_receive_packet>
   1e6d4:	00 97       	sbiw	r24, 0x00	; 0
	/*Wenn ein Packet angekommen ist, ist packet_lenght =! 0*/
	if(packet_lenght > 0)
   1e6d6:	51 f0       	breq	.+20     	; 0x1e6ec <eth_get_data+0x22>
   1e6d8:	04 97       	sbiw	r24, 0x04	; 4
	{
		packet_lenght = packet_lenght - 4;
   1e6da:	fc 01       	movw	r30, r24
		eth_buffer[packet_lenght+1] = 0;
   1e6dc:	e3 54       	subi	r30, 0x43	; 67
   1e6de:	fd 4f       	sbci	r31, 0xFD	; 253
   1e6e0:	11 82       	std	Z+1, r1	; 0x01
   1e6e2:	90 93 a5 07 	sts	0x07A5, r25
		eth_len = packet_lenght;			// remember length for global access
   1e6e6:	80 93 a4 07 	sts	0x07A4, r24
   1e6ea:	c7 cf       	rjmp	.-114    	; 0x1e67a <check_packet>
		check_packet();
   1e6ec:	08 95       	ret

0001e6ee <arp_request>:
}

//----------------------------------------------------------------------------
//Diese Routine erzeugt ein ARP Request
char arp_request (unsigned long dest_ip)
{
   1e6ee:	cf 92       	push	r12
   1e6f0:	df 92       	push	r13
   1e6f2:	ef 92       	push	r14
   1e6f4:	ff 92       	push	r15
   1e6f6:	0f 93       	push	r16
   1e6f8:	1f 93       	push	r17
   1e6fa:	df 93       	push	r29
   1e6fc:	cf 93       	push	r28
   1e6fe:	cd b7       	in	r28, 0x3d	; 61
   1e700:	de b7       	in	r29, 0x3e	; 62
   1e702:	aa 97       	sbiw	r28, 0x2a	; 42
   1e704:	0f b6       	in	r0, 0x3f	; 63
   1e706:	f8 94       	cli
   1e708:	de bf       	out	0x3e, r29	; 62
   1e70a:	0f be       	out	0x3f, r0	; 63
   1e70c:	cd bf       	out	0x3d, r28	; 61
   1e70e:	6b 01       	movw	r12, r22
   1e710:	7c 01       	movw	r14, r24

	struct Ethernet_Header *ethernet;
	ethernet = (struct Ethernet_Header *)&buffer[ETHER_OFFSET];

	struct ARP_Header *arp;
	arp = (struct ARP_Header *)&buffer[ARP_OFFSET];
   1e712:	8e 01       	movw	r16, r28
   1e714:	01 5f       	subi	r16, 0xF1	; 241
   1e716:	1f 4f       	sbci	r17, 0xFF	; 255

	dest_ip_store = dest_ip;

	//Nutzlast 0x0800=IP Datagramm;0x0806 = ARP
	ethernet->EnetPacketType = 0x0608;
   1e718:	88 e0       	ldi	r24, 0x08	; 8
   1e71a:	96 e0       	ldi	r25, 0x06	; 6
   1e71c:	9e 87       	std	Y+14, r25	; 0x0e
   1e71e:	8d 87       	std	Y+13, r24	; 0x0d

	new_eth_header (buffer,dest_ip);
   1e720:	ce 01       	movw	r24, r28
   1e722:	01 96       	adiw	r24, 0x01	; 1
   1e724:	b7 01       	movw	r22, r14
   1e726:	a6 01       	movw	r20, r12
   1e728:	15 de       	rcall	.-982    	; 0x1e354 <new_eth_header>
   1e72a:	80 91 a0 07 	lds	r24, 0x07A0

	//Meine IP Adresse wird in ARP Source IP Adresse geschrieben
	arp->ARP_SIPAddr = *((unsigned long *)&myip[0]);
   1e72e:	90 91 a1 07 	lds	r25, 0x07A1
   1e732:	a0 91 a2 07 	lds	r26, 0x07A2
   1e736:	b0 91 a3 07 	lds	r27, 0x07A3
   1e73a:	f8 01       	movw	r30, r16
   1e73c:	86 87       	std	Z+14, r24	; 0x0e
   1e73e:	97 87       	std	Z+15, r25	; 0x0f
   1e740:	a0 8b       	std	Z+16, r26	; 0x10
   1e742:	b1 8b       	std	Z+17, r27	; 0x11
   1e744:	c0 8e       	std	Z+24, r12	; 0x18

	//Ziel IP wird in Dest IP geschrieben
	arp->ARP_TIPAddr = dest_ip;
   1e746:	d1 8e       	std	Z+25, r13	; 0x19
   1e748:	e2 8e       	std	Z+26, r14	; 0x1a
   1e74a:	f3 8e       	std	Z+27, r15	; 0x1b
   1e74c:	a9 e0       	ldi	r26, 0x09	; 9
   1e74e:	b2 e0       	ldi	r27, 0x02	; 2
   1e750:	fe 01       	movw	r30, r28
	return;
}

//----------------------------------------------------------------------------
//Diese Routine erzeugt ein ARP Request
char arp_request (unsigned long dest_ip)
   1e752:	77 96       	adiw	r30, 0x17	; 23
   1e754:	8d 91       	ld	r24, X+
	//Ziel IP wird in Dest IP geschrieben
	arp->ARP_TIPAddr = dest_ip;

	for(unsigned char count = 0; count < 6; count++)
	{
		  arp->ARP_SHAddr[count] = mymac[count];
   1e756:	81 93       	st	Z+, r24
   1e758:	11 86       	std	Z+9, r1	; 0x09
		  arp->ARP_THAddr[count] = 0x00;
   1e75a:	22 e0       	ldi	r18, 0x02	; 2
	arp->ARP_SIPAddr = *((unsigned long *)&myip[0]);

	//Ziel IP wird in Dest IP geschrieben
	arp->ARP_TIPAddr = dest_ip;

	for(unsigned char count = 0; count < 6; count++)
   1e75c:	af 30       	cpi	r26, 0x0F	; 15
   1e75e:	b2 07       	cpc	r27, r18
   1e760:	c9 f7       	brne	.-14     	; 0x1e754 <arp_request+0x66>
   1e762:	80 e0       	ldi	r24, 0x00	; 0
	{
		  arp->ARP_SHAddr[count] = mymac[count];
		  arp->ARP_THAddr[count] = 0x00;
	}

	arp->ARP_HWType = 0x0100;
   1e764:	91 e0       	ldi	r25, 0x01	; 1
   1e766:	f8 01       	movw	r30, r16
   1e768:	91 83       	std	Z+1, r25	; 0x01
   1e76a:	80 83       	st	Z, r24
   1e76c:	28 e0       	ldi	r18, 0x08	; 8
	arp->ARP_PRType = 0x0008;
   1e76e:	30 e0       	ldi	r19, 0x00	; 0
   1e770:	33 83       	std	Z+3, r19	; 0x03
   1e772:	22 83       	std	Z+2, r18	; 0x02
   1e774:	26 e0       	ldi	r18, 0x06	; 6
	arp->ARP_HWLen 	= 0x06;
   1e776:	24 83       	std	Z+4, r18	; 0x04
   1e778:	24 e0       	ldi	r18, 0x04	; 4
	arp->ARP_PRLen 	= 0x04;
   1e77a:	25 83       	std	Z+5, r18	; 0x05
   1e77c:	97 83       	std	Z+7, r25	; 0x07
	arp->ARP_Op 	= 0x0100;
   1e77e:	86 83       	std	Z+6, r24	; 0x06
   1e780:	8a e2       	ldi	r24, 0x2A	; 42

	//Nun ist das ARP-Packet fertig zum Senden !!!
	//Sendet das erzeugte ARP Packet
	ETH_PACKET_SEND(ARP_REQUEST_LEN, buffer);
   1e782:	90 e0       	ldi	r25, 0x00	; 0
   1e784:	be 01       	movw	r22, r28
   1e786:	6f 5f       	subi	r22, 0xFF	; 255
   1e788:	7f 4f       	sbci	r23, 0xFF	; 255
   1e78a:	d7 d3       	rcall	.+1966   	; 0x1ef3a <enc28j60_send_packet>
   1e78c:	04 e1       	ldi	r16, 0x14	; 20
   1e78e:	c7 01       	movw	r24, r14
   1e790:	b6 01       	movw	r22, r12

	for(unsigned char count = 0;count<20;count++)
	{
		unsigned char index_tmp = arp_entry_search(dest_ip_store);
   1e792:	ce dd       	rcall	.-1124   	; 0x1e330 <arp_entry_search>
   1e794:	85 30       	cpi	r24, 0x05	; 5
   1e796:	68 f0       	brcs	.+26     	; 0x1e7b2 <arp_request+0xc4>
   1e798:	80 e0       	ldi	r24, 0x00	; 0
		index = arp_entry_search(dest_ip);
		if (index < MAX_ARP_ENTRY || index_tmp < MAX_ARP_ENTRY)
   1e79a:	90 e0       	ldi	r25, 0x00	; 0
   1e79c:	00 00       	nop
   1e79e:	01 96       	adiw	r24, 0x01	; 1
   1e7a0:	f7 e2       	ldi	r31, 0x27	; 39
//			DEBUG("ARP EINTRAG GEFUNDEN!\r\n");
			if (index_tmp < MAX_ARP_ENTRY) return(1);//OK
			arp_entry[index].arp_t_ip = dest_ip_store;
			return(1);//OK
		}
		for(unsigned long a=0;a<10000;a++){asm volatile ("nop" ::);};
   1e7a2:	80 31       	cpi	r24, 0x10	; 16
   1e7a4:	9f 07       	cpc	r25, r31
   1e7a6:	d1 f7       	brne	.-12     	; 0x1e79c <arp_request+0xae>
   1e7a8:	90 df       	rcall	.-224    	; 0x1e6ca <eth_get_data>
   1e7aa:	01 50       	subi	r16, 0x01	; 1
   1e7ac:	81 f7       	brne	.-32     	; 0x1e78e <arp_request+0xa0>
		eth_get_data();
   1e7ae:	80 e0       	ldi	r24, 0x00	; 0
   1e7b0:	01 c0       	rjmp	.+2      	; 0x1e7b4 <arp_request+0xc6>
   1e7b2:	81 e0       	ldi	r24, 0x01	; 1

	//Nun ist das ARP-Packet fertig zum Senden !!!
	//Sendet das erzeugte ARP Packet
	ETH_PACKET_SEND(ARP_REQUEST_LEN, buffer);

	for(unsigned char count = 0;count<20;count++)
   1e7b4:	aa 96       	adiw	r28, 0x2a	; 42
		}
		for(unsigned long a=0;a<10000;a++){asm volatile ("nop" ::);};
		eth_get_data();
		DEBUG("*No ARP entry found*\r\n");
	}
	return(0);//keine Antwort
   1e7b6:	0f b6       	in	r0, 0x3f	; 63
   1e7b8:	f8 94       	cli
		unsigned char index_tmp = arp_entry_search(dest_ip_store);
		index = arp_entry_search(dest_ip);
		if (index < MAX_ARP_ENTRY || index_tmp < MAX_ARP_ENTRY)
		{
//			DEBUG("ARP EINTRAG GEFUNDEN!\r\n");
			if (index_tmp < MAX_ARP_ENTRY) return(1);//OK
   1e7ba:	de bf       	out	0x3e, r29	; 62
		for(unsigned long a=0;a<10000;a++){asm volatile ("nop" ::);};
		eth_get_data();
		DEBUG("*No ARP entry found*\r\n");
	}
	return(0);//keine Antwort
}
   1e7bc:	0f be       	out	0x3f, r0	; 63
   1e7be:	cd bf       	out	0x3d, r28	; 61
   1e7c0:	cf 91       	pop	r28
   1e7c2:	df 91       	pop	r29
   1e7c4:	1f 91       	pop	r17
   1e7c6:	0f 91       	pop	r16
   1e7c8:	ff 90       	pop	r15
   1e7ca:	ef 90       	pop	r14
   1e7cc:	df 90       	pop	r13
   1e7ce:	cf 90       	pop	r12
   1e7d0:	08 95       	ret

0001e7d2 <create_new_udp_packet>:
//Diese Routine Erzeugt ein neues UDP Packet
void create_new_udp_packet(	unsigned int data_length,
							unsigned int src_port,
							unsigned int dest_port,
							unsigned long dest_ip)
{
   1e7d2:	cf 92       	push	r12
   1e7d4:	df 92       	push	r13
   1e7d6:	ef 92       	push	r14
   1e7d8:	ff 92       	push	r15
   1e7da:	0f 93       	push	r16
   1e7dc:	1f 93       	push	r17
   1e7de:	cf 93       	push	r28
   1e7e0:	df 93       	push	r29
   1e7e2:	6c 01       	movw	r12, r24
   1e7e4:	cb 01       	movw	r24, r22
   1e7e6:	fa 01       	movw	r30, r20
   1e7e8:	b9 01       	movw	r22, r18
   1e7ea:	a8 01       	movw	r20, r16
	DEBUG("UDP wird gesendet an %i.%i.%i.%i:%u, Len %u!\r\n", (int)(dest_ip&0xFF), (int)(dest_ip>>8&0xFF), (int)(dest_ip>>16&0xFF), (int)(dest_ip>>24), dest_port, data_length);
    unsigned int result16;
	unsigned long result32;

	struct UDP_Header *udp;
	udp = (struct UDP_Header *)&eth_buffer[UDP_OFFSET];
   1e7ec:	cd eb       	ldi	r28, 0xBD	; 189
   1e7ee:	d2 e0       	ldi	r29, 0x02	; 2
   1e7f0:	b2 e2       	ldi	r27, 0x22	; 34
   1e7f2:	eb 2e       	mov	r14, r27
   1e7f4:	f1 2c       	mov	r15, r1
   1e7f6:	ec 0e       	add	r14, r28
   1e7f8:	fd 1e       	adc	r15, r29

	struct IP_Header *ip;
	ip = (struct IP_Header *)&eth_buffer[IP_OFFSET];
   1e7fa:	8e 01       	movw	r16, r28
   1e7fc:	02 5f       	subi	r16, 0xF2	; 242
   1e7fe:	1f 4f       	sbci	r17, 0xFF	; 255

	udp->udp_SrcPort = LBBL_ENDIAN_INT(src_port);
   1e800:	98 27       	eor	r25, r24
   1e802:	89 27       	eor	r24, r25
   1e804:	98 27       	eor	r25, r24
   1e806:	90 93 e0 02 	sts	0x02E0, r25
   1e80a:	80 93 df 02 	sts	0x02DF, r24
	udp->udp_DestPort = LBBL_ENDIAN_INT(dest_port);
   1e80e:	9e 2f       	mov	r25, r30
   1e810:	8f 2f       	mov	r24, r31
   1e812:	f7 01       	movw	r30, r14
   1e814:	93 83       	std	Z+3, r25	; 0x03
   1e816:	82 83       	std	Z+2, r24	; 0x02

	//UDP Packetlänge
	data_length = UDP_HDR_LEN + data_length;
   1e818:	c6 01       	movw	r24, r12
   1e81a:	08 96       	adiw	r24, 0x08	; 8
	udp->udp_Hdrlen = LBBL_ENDIAN_INT(data_length);
   1e81c:	98 27       	eor	r25, r24
   1e81e:	89 27       	eor	r24, r25
   1e820:	98 27       	eor	r25, r24
   1e822:	95 83       	std	Z+5, r25	; 0x05
   1e824:	84 83       	std	Z+4, r24	; 0x04
	//IP Headerlänge + UDP Headerlänge
	data_length = IP_VERS_LEN + data_length;
   1e826:	c6 01       	movw	r24, r12
   1e828:	4c 96       	adiw	r24, 0x1c	; 28
	//Hier wird erstmal der IP Header neu erstellt
	ip->IP_Pktlen = LBBL_ENDIAN_INT(data_length);
   1e82a:	98 27       	eor	r25, r24
   1e82c:	89 27       	eor	r24, r25
   1e82e:	98 27       	eor	r25, r24
   1e830:	f8 01       	movw	r30, r16
   1e832:	93 83       	std	Z+3, r25	; 0x03
   1e834:	82 83       	std	Z+2, r24	; 0x02
	data_length += ETH_HDR_LEN;
	ip->IP_Proto = PROT_UDP;
   1e836:	81 e1       	ldi	r24, 0x11	; 17
   1e838:	81 87       	std	Z+9, r24	; 0x09
	make_ip_header (eth_buffer,dest_ip);
   1e83a:	ce 01       	movw	r24, r28
   1e83c:	bd de       	rcall	.-646    	; 0x1e5b8 <make_ip_header>
   1e83e:	f7 01       	movw	r30, r14

	//Alle Daten im UDP Header werden addiert checksum wird deshalb
	//ersteinmal auf null gesetzt
	udp->udp_Chksum = 0;
   1e840:	17 82       	std	Z+7, r1	; 0x07
   1e842:	16 82       	std	Z+6, r1	; 0x06
   1e844:	f8 01       	movw	r30, r16

	//Berechnet Headerlänge und Addiert Pseudoheaderlänge 2XIP = 8
	result16 = LBBL_ENDIAN_INT(ip->IP_Pktlen) + 8;
   1e846:	62 81       	ldd	r22, Z+2	; 0x02
   1e848:	73 81       	ldd	r23, Z+3	; 0x03
   1e84a:	76 27       	eor	r23, r22
   1e84c:	67 27       	eor	r22, r23
   1e84e:	76 27       	eor	r23, r22
   1e850:	68 5f       	subi	r22, 0xF8	; 248
   1e852:	7f 4f       	sbci	r23, 0xFF	; 255
   1e854:	80 91 cb 02 	lds	r24, 0x02CB
	result16 = result16 - ((ip->IP_Vers_Len & 0x0F) << 2);
   1e858:	90 e0       	ldi	r25, 0x00	; 0
   1e85a:	8f 70       	andi	r24, 0x0F	; 15
   1e85c:	90 70       	andi	r25, 0x00	; 0
   1e85e:	88 0f       	add	r24, r24
   1e860:	99 1f       	adc	r25, r25
   1e862:	88 0f       	add	r24, r24
   1e864:	99 1f       	adc	r25, r25
   1e866:	68 1b       	sub	r22, r24
   1e868:	79 0b       	sbc	r23, r25
   1e86a:	9b 01       	movw	r18, r22
	result32 = result16 + 0x09;
   1e86c:	27 5f       	subi	r18, 0xF7	; 247
   1e86e:	3f 4f       	sbci	r19, 0xFF	; 255
   1e870:	40 e0       	ldi	r20, 0x00	; 0
   1e872:	50 e0       	ldi	r21, 0x00	; 0
   1e874:	ce 01       	movw	r24, r28

	//Routine berechnet die Checksumme
	result16 = checksum ((&ip->IP_Vers_Len+12), result16, result32);
   1e876:	4a 96       	adiw	r24, 0x1a	; 26
   1e878:	54 de       	rcall	.-856    	; 0x1e522 <checksum>
   1e87a:	98 27       	eor	r25, r24
   1e87c:	89 27       	eor	r24, r25
	udp->udp_Chksum = LBBL_ENDIAN_INT(result16);
   1e87e:	98 27       	eor	r25, r24
   1e880:	f7 01       	movw	r30, r14
   1e882:	97 83       	std	Z+7, r25	; 0x07
   1e884:	86 83       	std	Z+6, r24	; 0x06
   1e886:	c6 01       	movw	r24, r12
   1e888:	8a 96       	adiw	r24, 0x2a	; 42

	//Sendet das erzeugte UDP Packet
    ETH_PACKET_SEND(data_length,eth_buffer);
   1e88a:	be 01       	movw	r22, r28
   1e88c:	56 d3       	rcall	.+1708   	; 0x1ef3a <enc28j60_send_packet>
   1e88e:	df 91       	pop	r29
   1e890:	cf 91       	pop	r28
   1e892:	1f 91       	pop	r17
	return;
}
   1e894:	0f 91       	pop	r16
   1e896:	ff 90       	pop	r15
   1e898:	ef 90       	pop	r14
   1e89a:	df 90       	pop	r13
   1e89c:	cf 90       	pop	r12
   1e89e:	08 95       	ret

0001e8a0 <timer_init>:

//----------------------------------------------------------------------------
//Diese Routine startet und inizialisiert den Timer
void timer_init (void)
{
	TCCR1B |= (1<<WGM12) | (1<<CS10 | 0<<CS11 | 1<<CS12);
   1e8a0:	e1 e8       	ldi	r30, 0x81	; 129
   1e8a2:	f0 e0       	ldi	r31, 0x00	; 0
   1e8a4:	80 81       	ld	r24, Z
   1e8a6:	8d 60       	ori	r24, 0x0D	; 13
   1e8a8:	80 83       	st	Z, r24
	TCNT1 = 0;
   1e8aa:	10 92 85 00 	sts	0x0085, r1
   1e8ae:	10 92 84 00 	sts	0x0084, r1
	OCR1A = (F_CPU / 1024) - 1;
   1e8b2:	88 e0       	ldi	r24, 0x08	; 8
   1e8b4:	9d e3       	ldi	r25, 0x3D	; 61
   1e8b6:	90 93 89 00 	sts	0x0089, r25
   1e8ba:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
   1e8be:	ef e6       	ldi	r30, 0x6F	; 111
   1e8c0:	f0 e0       	ldi	r31, 0x00	; 0
   1e8c2:	80 81       	ld	r24, Z
   1e8c4:	82 60       	ori	r24, 0x02	; 2
   1e8c6:	80 83       	st	Z, r24
};
   1e8c8:	08 95       	ret

0001e8ca <__vector_17>:

//----------------------------------------------------------------------------
//Timer Interrupt
ISR (TIMER1_COMPA_vect)
{
   1e8ca:	1f 92       	push	r1
   1e8cc:	0f 92       	push	r0
   1e8ce:	0f b6       	in	r0, 0x3f	; 63
   1e8d0:	0f 92       	push	r0
   1e8d2:	11 24       	eor	r1, r1
   1e8d4:	8f 93       	push	r24
   1e8d6:	9f 93       	push	r25

//   	tftp_watchdogtick (1000);		// parameter notes the length of interval in ms
//	if ( tftp_watchdog == TFTP_WATCHDOG_OFF )
//		return;

	if (tftp_watchdog > 0)
   1e8d8:	80 91 b1 02 	lds	r24, 0x02B1
   1e8dc:	90 91 b2 02 	lds	r25, 0x02B2
   1e8e0:	18 16       	cp	r1, r24
   1e8e2:	19 06       	cpc	r1, r25
   1e8e4:	54 f4       	brge	.+20     	; 0x1e8fa <__vector_17+0x30>
		tftp_watchdog -= 1000;
   1e8e6:	80 91 b1 02 	lds	r24, 0x02B1
   1e8ea:	90 91 b2 02 	lds	r25, 0x02B2
   1e8ee:	88 5e       	subi	r24, 0xE8	; 232
   1e8f0:	93 40       	sbci	r25, 0x03	; 3
   1e8f2:	90 93 b2 02 	sts	0x02B2, r25
   1e8f6:	80 93 b1 02 	sts	0x02B1, r24
}
   1e8fa:	9f 91       	pop	r25
   1e8fc:	8f 91       	pop	r24
   1e8fe:	0f 90       	pop	r0
   1e900:	0f be       	out	0x3f, r0	; 63
   1e902:	0f 90       	pop	r0
   1e904:	1f 90       	pop	r1
   1e906:	18 95       	reti

0001e908 <para_getip>:
#include "para.h"

//----------------------------------------------------------------------------
//
unsigned long para_getip (unsigned char *eeprom_address,unsigned long default_value)
{
   1e908:	af 92       	push	r10
   1e90a:	bf 92       	push	r11
   1e90c:	cf 92       	push	r12
   1e90e:	df 92       	push	r13
   1e910:	ef 92       	push	r14
   1e912:	ff 92       	push	r15
   1e914:	0f 93       	push	r16
   1e916:	1f 93       	push	r17
   1e918:	df 93       	push	r29
   1e91a:	cf 93       	push	r28
   1e91c:	00 d0       	rcall	.+0      	; 0x1e91e <para_getip+0x16>
   1e91e:	00 d0       	rcall	.+0      	; 0x1e920 <para_getip+0x18>
   1e920:	00 d0       	rcall	.+0      	; 0x1e922 <para_getip+0x1a>
   1e922:	cd b7       	in	r28, 0x3d	; 61
   1e924:	de b7       	in	r29, 0x3e	; 62
   1e926:	5b 01       	movw	r10, r22
		//eeprom_busy_wait ();
		value[count] = eeprom_read_byte(eeprom_address + count);
	}

	//Ist der EEPROM Inhalt leer?
	if ((*((unsigned long*)&value[0])) == 0xFFFFFFFF)
   1e928:	c8 2e       	mov	r12, r24
   1e92a:	d9 2e       	mov	r13, r25
   1e92c:	8e 01       	movw	r16, r28
   1e92e:	0f 5f       	subi	r16, 0xFF	; 255
   1e930:	1f 4f       	sbci	r17, 0xFF	; 255
#include "config.h"
#include "para.h"

//----------------------------------------------------------------------------
//
unsigned long para_getip (unsigned char *eeprom_address,unsigned long default_value)
   1e932:	85 e0       	ldi	r24, 0x05	; 5
   1e934:	e8 2e       	mov	r14, r24
   1e936:	f1 2c       	mov	r15, r1
   1e938:	ec 0e       	add	r14, r28
   1e93a:	fd 1e       	adc	r15, r29
	unsigned char value[4];

	for (unsigned char count = 0; count<4;count++)
	{
		//eeprom_busy_wait ();
		value[count] = eeprom_read_byte(eeprom_address + count);
   1e93c:	c6 01       	movw	r24, r12
   1e93e:	4d 83       	std	Y+5, r20	; 0x05
   1e940:	5e 83       	std	Y+6, r21	; 0x06
   1e942:	0e 94 ca fc 	call	0x1f994	; 0x1f994 <__eerd_byte_m1280>
   1e946:	f8 01       	movw	r30, r16
   1e948:	81 93       	st	Z+, r24
   1e94a:	8f 01       	movw	r16, r30
   1e94c:	08 94       	sec
   1e94e:	c1 1c       	adc	r12, r1
   1e950:	d1 1c       	adc	r13, r1
{
#if USE_PARAMETERS_FROM_EEPROM

	unsigned char value[4];

	for (unsigned char count = 0; count<4;count++)
   1e952:	4d 81       	ldd	r20, Y+5	; 0x05
   1e954:	5e 81       	ldd	r21, Y+6	; 0x06
   1e956:	ee 15       	cp	r30, r14
   1e958:	ff 05       	cpc	r31, r15
   1e95a:	81 f7       	brne	.-32     	; 0x1e93c <para_getip+0x34>
		//eeprom_busy_wait ();
		value[count] = eeprom_read_byte(eeprom_address + count);
	}

	//Ist der EEPROM Inhalt leer?
	if ((*((unsigned long*)&value[0])) == 0xFFFFFFFF)
   1e95c:	89 81       	ldd	r24, Y+1	; 0x01
   1e95e:	9a 81       	ldd	r25, Y+2	; 0x02
   1e960:	ab 81       	ldd	r26, Y+3	; 0x03
   1e962:	bc 81       	ldd	r27, Y+4	; 0x04
   1e964:	8f 3f       	cpi	r24, 0xFF	; 255
   1e966:	ff ef       	ldi	r31, 0xFF	; 255
   1e968:	9f 07       	cpc	r25, r31
   1e96a:	ff ef       	ldi	r31, 0xFF	; 255
   1e96c:	af 07       	cpc	r26, r31
   1e96e:	ff ef       	ldi	r31, 0xFF	; 255
   1e970:	bf 07       	cpc	r27, r31
   1e972:	11 f0       	breq	.+4      	; 0x1e978 <para_getip+0x70>
   1e974:	ac 01       	movw	r20, r24
   1e976:	5d 01       	movw	r10, r26
#else

	return(default_value);

#endif
}
   1e978:	ba 01       	movw	r22, r20
   1e97a:	c5 01       	movw	r24, r10
   1e97c:	26 96       	adiw	r28, 0x06	; 6
   1e97e:	0f b6       	in	r0, 0x3f	; 63
   1e980:	f8 94       	cli
   1e982:	de bf       	out	0x3e, r29	; 62
   1e984:	0f be       	out	0x3f, r0	; 63
   1e986:	cd bf       	out	0x3d, r28	; 61
   1e988:	cf 91       	pop	r28
   1e98a:	df 91       	pop	r29
   1e98c:	1f 91       	pop	r17
   1e98e:	0f 91       	pop	r16
   1e990:	ff 90       	pop	r15
   1e992:	ef 90       	pop	r14
   1e994:	df 90       	pop	r13
   1e996:	cf 90       	pop	r12
   1e998:	bf 90       	pop	r11
   1e99a:	af 90       	pop	r10
   1e99c:	08 95       	ret

0001e99e <para_getstring>:


//----------------------------------------------------------------------------
// reading a string parameter from EEPROM
void para_getstring (char *name, unsigned char *eeprom_address, char len, char *default_value)
{
   1e99e:	6f 92       	push	r6
   1e9a0:	7f 92       	push	r7
   1e9a2:	8f 92       	push	r8
   1e9a4:	9f 92       	push	r9
   1e9a6:	af 92       	push	r10
   1e9a8:	bf 92       	push	r11
   1e9aa:	cf 92       	push	r12
   1e9ac:	df 92       	push	r13
   1e9ae:	ef 92       	push	r14
   1e9b0:	ff 92       	push	r15
   1e9b2:	0f 93       	push	r16
   1e9b4:	1f 93       	push	r17
   1e9b6:	df 93       	push	r29
   1e9b8:	cf 93       	push	r28
   1e9ba:	0f 92       	push	r0
   1e9bc:	cd b7       	in	r28, 0x3d	; 61
   1e9be:	de b7       	in	r29, 0x3e	; 62
   1e9c0:	7c 01       	movw	r14, r24
   1e9c2:	6b 01       	movw	r12, r22
   1e9c4:	49 01       	movw	r8, r18
#if USE_PARAMETERS_FROM_EEPROM

	int i;
	char c;
	i = 0;
   1e9c6:	98 2f       	mov	r25, r24
   1e9c8:	09 2f       	mov	r16, r25
   1e9ca:	1f 2d       	mov	r17, r15
   1e9cc:	66 24       	eor	r6, r6
   1e9ce:	77 24       	eor	r7, r7

	// copy string from eeprom to memory
	do {
		c = eeprom_read_byte (eeprom_address+i);
		name[i] = c;
	} while ( (c != 0) && (c != 0xFF) && (i++ < len) );
   1e9d0:	a4 2e       	mov	r10, r20
   1e9d2:	bb 24       	eor	r11, r11
	char c;
	i = 0;

	// copy string from eeprom to memory
	do {
		c = eeprom_read_byte (eeprom_address+i);
   1e9d4:	c6 01       	movw	r24, r12
   1e9d6:	86 0d       	add	r24, r6
   1e9d8:	97 1d       	adc	r25, r7
   1e9da:	49 83       	std	Y+1, r20	; 0x01
   1e9dc:	db d7       	rcall	.+4022   	; 0x1f994 <__eerd_byte_m1280>
   1e9de:	f8 01       	movw	r30, r16
		name[i] = c;
   1e9e0:	81 93       	st	Z+, r24
   1e9e2:	8f 01       	movw	r16, r30
   1e9e4:	98 2f       	mov	r25, r24
	} while ( (c != 0) && (c != 0xFF) && (i++ < len) );
   1e9e6:	91 50       	subi	r25, 0x01	; 1
   1e9e8:	49 81       	ldd	r20, Y+1	; 0x01
   1e9ea:	9e 3f       	cpi	r25, 0xFE	; 254
   1e9ec:	48 f4       	brcc	.+18     	; 0x1ea00 <para_getstring+0x62>
   1e9ee:	08 94       	sec
   1e9f0:	61 1c       	adc	r6, r1
   1e9f2:	71 1c       	adc	r7, r1
   1e9f4:	c3 01       	movw	r24, r6



//----------------------------------------------------------------------------
// reading a string parameter from EEPROM
void para_getstring (char *name, unsigned char *eeprom_address, char len, char *default_value)
   1e9f6:	01 97       	sbiw	r24, 0x01	; 1
   1e9f8:	8a 15       	cp	r24, r10

	// copy string from eeprom to memory
	do {
		c = eeprom_read_byte (eeprom_address+i);
		name[i] = c;
	} while ( (c != 0) && (c != 0xFF) && (i++ < len) );
   1e9fa:	9b 05       	cpc	r25, r11
   1e9fc:	5c f3       	brlt	.-42     	; 0x1e9d4 <para_getstring+0x36>
   1e9fe:	02 c0       	rjmp	.+4      	; 0x1ea04 <para_getstring+0x66>
   1ea00:	8f 3f       	cpi	r24, 0xFF	; 255

	// if there is empty eeprom or no termination, copy default value
	if ( (c == 0xFF) || (i > len) )
   1ea02:	21 f0       	breq	.+8      	; 0x1ea0c <para_getstring+0x6e>
   1ea04:	50 e0       	ldi	r21, 0x00	; 0
   1ea06:	46 15       	cp	r20, r6
   1ea08:	57 05       	cpc	r21, r7
   1ea0a:	1c f4       	brge	.+6      	; 0x1ea12 <para_getstring+0x74>
   1ea0c:	c7 01       	movw	r24, r14
		strcpy ( name, default_value );
   1ea0e:	b4 01       	movw	r22, r8
   1ea10:	87 d7       	rcall	.+3854   	; 0x1f920 <strcpy>
   1ea12:	0f 90       	pop	r0
   1ea14:	cf 91       	pop	r28
#else

	strcpy ( name, default_value );

#endif
}
   1ea16:	df 91       	pop	r29
   1ea18:	1f 91       	pop	r17
   1ea1a:	0f 91       	pop	r16
   1ea1c:	ff 90       	pop	r15
   1ea1e:	ef 90       	pop	r14
   1ea20:	df 90       	pop	r13
   1ea22:	cf 90       	pop	r12
   1ea24:	bf 90       	pop	r11
   1ea26:	af 90       	pop	r10
   1ea28:	9f 90       	pop	r9
   1ea2a:	8f 90       	pop	r8
   1ea2c:	7f 90       	pop	r7
   1ea2e:	6f 90       	pop	r6
   1ea30:	08 95       	ret

0001ea32 <para_getchar>:

//------------------------------------------------------------------------------
//
unsigned char para_getchar (unsigned char *eeprom_address)
{
	return ( eeprom_read_byte (eeprom_address) );
   1ea32:	b0 c7       	rjmp	.+3936   	; 0x1f994 <__eerd_byte_m1280>
   1ea34:	08 95       	ret

0001ea36 <console_init>:
//----------------------------------------------------------------------------
//Initialisierung der console
void console_init (void)
{
	// Initialisiere Pufferverwaltung
	console_tx_counter 	= 0;
   1ea36:	10 92 b9 02 	sts	0x02B9, r1
   1ea3a:	10 92 b8 02 	sts	0x02B8, r1
		telnetd_init();
	#endif
	#if USE_USART
	if ( console_mode & CONSOLE_USART );
//		usart_init(BAUDRATE);
		usart_init();
   1ea3e:	59 d1       	rcall	.+690    	; 0x1ecf2 <usart_init>
   1ea40:	81 e0       	ldi	r24, 0x01	; 1
	#endif

	console_isinit = 1;
   1ea42:	80 93 ba 02 	sts	0x02BA, r24
   1ea46:	08 95       	ret

0001ea48 <console_flush>:

//----------------------------------------------------------------------------
//Routine für die Ausgabe gepufferter Zeichen ueber zeilen-orientierte Devices
void console_flush(void)
{
	if ( !console_tx_counter )		// buffer is empty
   1ea48:	80 91 b8 02 	lds	r24, 0x02B8
   1ea4c:	90 91 b9 02 	lds	r25, 0x02B9
   1ea50:	00 97       	sbiw	r24, 0x00	; 0
   1ea52:	79 f0       	breq	.+30     	; 0x1ea72 <console_flush+0x2a>
		return;

   	console_tx_buffer[console_tx_counter] = 0;		// terminate buffered string
   1ea54:	88 55       	subi	r24, 0x58	; 88
   1ea56:	98 4f       	sbci	r25, 0xF8	; 248
   1ea58:	fc 01       	movw	r30, r24
   1ea5a:	10 82       	st	Z, r1
   	#if USE_TELNET
	if ( console_mode & CONSOLE_TELNET )
		telnetd_write_str ( console_tx_buffer );
	#endif
	#if USE_SYSLOG
	if ( console_mode & CONSOLE_SYSLOG )
   1ea5c:	80 91 a6 07 	lds	r24, 0x07A6
   1ea60:	81 ff       	sbrs	r24, 1
   1ea62:	03 c0       	rjmp	.+6      	; 0x1ea6a <console_flush+0x22>
		syslog_send ( console_tx_buffer );
   1ea64:	88 ea       	ldi	r24, 0xA8	; 168
   1ea66:	97 e0       	ldi	r25, 0x07	; 7
   1ea68:	f1 d0       	rcall	.+482    	; 0x1ec4c <syslog_send>
   1ea6a:	10 92 b9 02 	sts	0x02B9, r1
	#endif
	console_tx_counter = 0;								// clear buffer
   1ea6e:	10 92 b8 02 	sts	0x02B8, r1
   1ea72:	08 95       	ret

0001ea74 <console_write_char>:

//----------------------------------------------------------------------------
//Routine für die Ausgabe eines Zeichens ueber definierte Devices
//
void console_write_char(char c)
{
   1ea74:	1f 93       	push	r17
   1ea76:	18 2f       	mov	r17, r24
	if ( !console_isinit )
   1ea78:	80 91 ba 02 	lds	r24, 0x02BA
   1ea7c:	88 23       	and	r24, r24
   1ea7e:	19 f1       	breq	.+70     	; 0x1eac6 <console_write_char+0x52>
		return;

	#if USE_USART
	if ( console_mode & CONSOLE_USART )
   1ea80:	80 91 a6 07 	lds	r24, 0x07A6
   1ea84:	80 ff       	sbrs	r24, 0
   1ea86:	02 c0       	rjmp	.+4      	; 0x1ea8c <console_write_char+0x18>
		usart_write_char (c);
   1ea88:	81 2f       	mov	r24, r17
   1ea8a:	3a d1       	rcall	.+628    	; 0x1ed00 <usart_write_char>
   1ea8c:	20 91 a6 07 	lds	r18, 0x07A6
	#endif

	if ( console_mode & (CONSOLE_TELNET | CONSOLE_SYSLOG) ) {
   1ea90:	30 91 a7 07 	lds	r19, 0x07A7
   1ea94:	26 70       	andi	r18, 0x06	; 6
   1ea96:	30 70       	andi	r19, 0x00	; 0
   1ea98:	21 15       	cp	r18, r1
   1ea9a:	31 05       	cpc	r19, r1
   1ea9c:	a1 f0       	breq	.+40     	; 0x1eac6 <console_write_char+0x52>
   1ea9e:	20 91 b8 02 	lds	r18, 0x02B8
		console_tx_buffer[console_tx_counter++] = c;
   1eaa2:	30 91 b9 02 	lds	r19, 0x02B9
   1eaa6:	f9 01       	movw	r30, r18
   1eaa8:	e8 55       	subi	r30, 0x58	; 88
   1eaaa:	f8 4f       	sbci	r31, 0xF8	; 248
   1eaac:	10 83       	st	Z, r17
   1eaae:	2f 5f       	subi	r18, 0xFF	; 255
   1eab0:	3f 4f       	sbci	r19, 0xFF	; 255
   1eab2:	30 93 b9 02 	sts	0x02B9, r19
   1eab6:	20 93 b8 02 	sts	0x02B8, r18
   1eaba:	2b 33       	cpi	r18, 0x3B	; 59
	    if ( (console_tx_counter >= CONSOLE_TX_BUFFERSIZE - 1) || (c == '\n') ) {	// Buffer ist voll oder Zeilenende, absenden
   1eabc:	31 05       	cpc	r19, r1
   1eabe:	10 f4       	brcc	.+4      	; 0x1eac4 <console_write_char+0x50>
   1eac0:	1a 30       	cpi	r17, 0x0A	; 10
   1eac2:	09 f4       	brne	.+2      	; 0x1eac6 <console_write_char+0x52>
   1eac4:	c1 df       	rcall	.-126    	; 0x1ea48 <console_flush>
	    	console_flush();
   1eac6:	1f 91       	pop	r17
   1eac8:	08 95       	ret

0001eaca <console_write_str>:


//----------------------------------------------------------------------------
//Ausgabe eines Strings
void console_write_str(char *str)
{
   1eaca:	ef 92       	push	r14
   1eacc:	ff 92       	push	r15
   1eace:	cf 93       	push	r28
   1ead0:	df 93       	push	r29
   1ead2:	e8 2e       	mov	r14, r24
   1ead4:	e7 01       	movw	r28, r14
   1ead6:	7e 01       	movw	r14, r28
   1ead8:	f9 2e       	mov	r15, r25
   1eada:	e7 01       	movw	r28, r14
	while (str && *str)
   1eadc:	01 c0       	rjmp	.+2      	; 0x1eae0 <console_write_str+0x16>
		console_write_char(*str++);
   1eade:	ca df       	rcall	.-108    	; 0x1ea74 <console_write_char>
   1eae0:	20 97       	sbiw	r28, 0x00	; 0

//----------------------------------------------------------------------------
//Ausgabe eines Strings
void console_write_str(char *str)
{
	while (str && *str)
   1eae2:	19 f0       	breq	.+6      	; 0x1eaea <console_write_str+0x20>
   1eae4:	89 91       	ld	r24, Y+
   1eae6:	88 23       	and	r24, r24
   1eae8:	d1 f7       	brne	.-12     	; 0x1eade <console_write_str+0x14>
   1eaea:	df 91       	pop	r29
		console_write_char(*str++);
}
   1eaec:	cf 91       	pop	r28
   1eaee:	ff 90       	pop	r15
   1eaf0:	ef 90       	pop	r14
   1eaf2:	08 95       	ret

0001eaf4 <console_write_P>:
}


//------------------------------------------------------------------------------
void console_write_P (const char *Buffer,...)
{
   1eaf4:	af 92       	push	r10
   1eaf6:	bf 92       	push	r11
   1eaf8:	cf 92       	push	r12
   1eafa:	df 92       	push	r13
   1eafc:	ef 92       	push	r14
   1eafe:	ff 92       	push	r15
   1eb00:	0f 93       	push	r16
   1eb02:	1f 93       	push	r17
   1eb04:	df 93       	push	r29
   1eb06:	cf 93       	push	r28
   1eb08:	cd b7       	in	r28, 0x3d	; 61
   1eb0a:	de b7       	in	r29, 0x3e	; 62
   1eb0c:	66 97       	sbiw	r28, 0x16	; 22
   1eb0e:	0f b6       	in	r0, 0x3f	; 63
   1eb10:	f8 94       	cli
   1eb12:	de bf       	out	0x3e, r29	; 62
   1eb14:	0f be       	out	0x3f, r0	; 63
   1eb16:	cd bf       	out	0x3d, r28	; 61
   1eb18:	9e 01       	movw	r18, r28
   1eb1a:	2d 5d       	subi	r18, 0xDD	; 221
   1eb1c:	3f 4f       	sbci	r19, 0xFF	; 255
   1eb1e:	f9 01       	movw	r30, r18
   1eb20:	01 91       	ld	r16, Z+
   1eb22:	11 91       	ld	r17, Z+
   1eb24:	9f 01       	movw	r18, r30
	va_list ap;
	va_start (ap, Buffer);

	int format_flag;
	char str_buffer[20];
	char move = 0;
   1eb26:	bb 24       	eor	r11, r11
				case 'x':
					itoa(va_arg(ap,int), str_buffer,16);
					//****************************
					ConversionLoop:
					//****************************
					len = strlen (str_buffer);
   1eb28:	6e 01       	movw	r12, r28
   1eb2a:	08 94       	sec
   1eb2c:	c1 1c       	adc	r12, r1
   1eb2e:	d1 1c       	adc	r13, r1
	char *ptr;

	//Ausgabe der Zeichen
    for(;;) {

		by = *Buffer++;
   1eb30:	f8 01       	movw	r30, r16
   1eb32:	80 81       	ld	r24, Z
		if(by==0) break; // end of format string
   1eb34:	88 23       	and	r24, r24
   1eb36:	09 f4       	brne	.+2      	; 0x1eb3a <console_write_P+0x46>
   1eb38:	78 c0       	rjmp	.+240    	; 0x1ec2a <console_write_P+0x136>
	char *ptr;

	//Ausgabe der Zeichen
    for(;;) {

		by = *Buffer++;
   1eb3a:	0f 5f       	subi	r16, 0xFF	; 255
   1eb3c:	1f 4f       	sbci	r17, 0xFF	; 255
		if(by==0) break; // end of format string

		if (by == '%') {
   1eb3e:	85 32       	cpi	r24, 0x25	; 37
   1eb40:	09 f0       	breq	.+2      	; 0x1eb44 <console_write_P+0x50>
   1eb42:	6d c0       	rjmp	.+218    	; 0x1ec1e <console_write_P+0x12a>
   1eb44:	09 c0       	rjmp	.+18     	; 0x1eb58 <console_write_P+0x64>

			by = *Buffer++;

			while (isdigit(by)) {				// potential overflow of move
				move = by - '0' + move * 10;
   1eb46:	bb 0c       	add	r11, r11
   1eb48:	8b 2d       	mov	r24, r11
   1eb4a:	88 0f       	add	r24, r24
   1eb4c:	88 0f       	add	r24, r24
   1eb4e:	8b 0d       	add	r24, r11
   1eb50:	70 ed       	ldi	r23, 0xD0	; 208
   1eb52:	b7 2e       	mov	r11, r23
   1eb54:	b4 0e       	add	r11, r20
   1eb56:	b8 0e       	add	r11, r24

 				by = *Buffer++;
   1eb58:	f8 01       	movw	r30, r16
   1eb5a:	41 91       	ld	r20, Z+
   1eb5c:	8f 01       	movw	r16, r30

		if (by == '%') {

			by = *Buffer++;

			while (isdigit(by)) {				// potential overflow of move
   1eb5e:	84 2f       	mov	r24, r20
   1eb60:	90 e0       	ldi	r25, 0x00	; 0
   1eb62:	c0 97       	sbiw	r24, 0x30	; 48
   1eb64:	8a 30       	cpi	r24, 0x0A	; 10
   1eb66:	91 05       	cpc	r25, r1
   1eb68:	70 f3       	brcs	.-36     	; 0x1eb46 <console_write_P+0x52>
				move = by - '0' + move * 10;

 				by = *Buffer++;
			}

			switch (by) {
   1eb6a:	49 36       	cpi	r20, 0x69	; 105
   1eb6c:	09 f1       	breq	.+66     	; 0x1ebb0 <console_write_P+0xbc>
   1eb6e:	4a 36       	cpi	r20, 0x6A	; 106
   1eb70:	28 f4       	brcc	.+10     	; 0x1eb7c <console_write_P+0x88>
   1eb72:	43 36       	cpi	r20, 0x63	; 99
   1eb74:	99 f0       	breq	.+38     	; 0x1eb9c <console_write_P+0xa8>
   1eb76:	44 36       	cpi	r20, 0x64	; 100
   1eb78:	d9 f6       	brne	.-74     	; 0x1eb30 <console_write_P+0x3c>
   1eb7a:	1a c0       	rjmp	.+52     	; 0x1ebb0 <console_write_P+0xbc>
   1eb7c:	45 37       	cpi	r20, 0x75	; 117
   1eb7e:	21 f1       	breq	.+72     	; 0x1ebc8 <console_write_P+0xd4>
   1eb80:	48 37       	cpi	r20, 0x78	; 120
   1eb82:	79 f1       	breq	.+94     	; 0x1ebe2 <console_write_P+0xee>
   1eb84:	43 37       	cpi	r20, 0x73	; 115
   1eb86:	a1 f6       	brne	.-88     	; 0x1eb30 <console_write_P+0x3c>
                case 's':
                    ptr = va_arg(ap,char *);
   1eb88:	62 e0       	ldi	r22, 0x02	; 2
   1eb8a:	e6 2e       	mov	r14, r22
   1eb8c:	f1 2c       	mov	r15, r1
   1eb8e:	e2 0e       	add	r14, r18
   1eb90:	f3 1e       	adc	r15, r19
                    console_write_str(ptr);
   1eb92:	f9 01       	movw	r30, r18
   1eb94:	80 81       	ld	r24, Z
   1eb96:	91 81       	ldd	r25, Z+1	; 0x01
   1eb98:	98 df       	rcall	.-208    	; 0x1eaca <console_write_str>
   1eb9a:	08 c0       	rjmp	.+16     	; 0x1ebac <console_write_P+0xb8>
   1eb9c:	52 e0       	ldi	r21, 0x02	; 2
                    break;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
   1eb9e:	e5 2e       	mov	r14, r21
   1eba0:	f1 2c       	mov	r15, r1
   1eba2:	e2 0e       	add	r14, r18
   1eba4:	f3 1e       	adc	r15, r19
   1eba6:	f9 01       	movw	r30, r18
					console_write_char (format_flag++);
   1eba8:	80 81       	ld	r24, Z
   1ebaa:	64 df       	rcall	.-312    	; 0x1ea74 <console_write_char>
   1ebac:	97 01       	movw	r18, r14
   1ebae:	c0 cf       	rjmp	.-128    	; 0x1eb30 <console_write_P+0x3c>
                    ptr = va_arg(ap,char *);
                    console_write_str(ptr);
                    break;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
   1ebb0:	42 e0       	ldi	r20, 0x02	; 2
					console_write_char (format_flag++);
					break;
   1ebb2:	e4 2e       	mov	r14, r20
				case 'i':
				case 'd':
					itoa(va_arg(ap,int), str_buffer,10);
   1ebb4:	f1 2c       	mov	r15, r1
   1ebb6:	e2 0e       	add	r14, r18
   1ebb8:	f3 1e       	adc	r15, r19
   1ebba:	f9 01       	movw	r30, r18
   1ebbc:	80 81       	ld	r24, Z
   1ebbe:	91 81       	ldd	r25, Z+1	; 0x01
   1ebc0:	b6 01       	movw	r22, r12
   1ebc2:	4a e0       	ldi	r20, 0x0A	; 10
   1ebc4:	50 e0       	ldi	r21, 0x00	; 0
   1ebc6:	18 c0       	rjmp	.+48     	; 0x1ebf8 <console_write_P+0x104>
   1ebc8:	92 e0       	ldi	r25, 0x02	; 2
   1ebca:	e9 2e       	mov	r14, r25
					goto ConversionLoop;
				case 'u':
					utoa(va_arg(ap,unsigned int), str_buffer,10);
   1ebcc:	f1 2c       	mov	r15, r1
   1ebce:	e2 0e       	add	r14, r18
   1ebd0:	f3 1e       	adc	r15, r19
   1ebd2:	f9 01       	movw	r30, r18
   1ebd4:	80 81       	ld	r24, Z
   1ebd6:	91 81       	ldd	r25, Z+1	; 0x01
   1ebd8:	b6 01       	movw	r22, r12
   1ebda:	4a e0       	ldi	r20, 0x0A	; 10
   1ebdc:	50 e0       	ldi	r21, 0x00	; 0
   1ebde:	c6 d6       	rcall	.+3468   	; 0x1f96c <utoa>
   1ebe0:	0c c0       	rjmp	.+24     	; 0x1ebfa <console_write_P+0x106>
   1ebe2:	82 e0       	ldi	r24, 0x02	; 2
   1ebe4:	e8 2e       	mov	r14, r24
					goto ConversionLoop;
   1ebe6:	f1 2c       	mov	r15, r1
				case 'x':
					itoa(va_arg(ap,int), str_buffer,16);
   1ebe8:	e2 0e       	add	r14, r18
   1ebea:	f3 1e       	adc	r15, r19
   1ebec:	f9 01       	movw	r30, r18
   1ebee:	80 81       	ld	r24, Z
   1ebf0:	91 81       	ldd	r25, Z+1	; 0x01
   1ebf2:	b6 01       	movw	r22, r12
   1ebf4:	40 e1       	ldi	r20, 0x10	; 16
   1ebf6:	50 e0       	ldi	r21, 0x00	; 0
   1ebf8:	9a d6       	rcall	.+3380   	; 0x1f92e <itoa>
   1ebfa:	f6 01       	movw	r30, r12
   1ebfc:	01 90       	ld	r0, Z+
   1ebfe:	00 20       	and	r0, r0
   1ec00:	e9 f7       	brne	.-6      	; 0x1ebfc <console_write_P+0x108>
					//****************************
					ConversionLoop:
					//****************************
					len = strlen (str_buffer);
   1ec02:	31 97       	sbiw	r30, 0x01	; 1
   1ec04:	ae 2e       	mov	r10, r30
   1ec06:	ac 18       	sub	r10, r12
   1ec08:	03 c0       	rjmp	.+6      	; 0x1ec10 <console_write_P+0x11c>
   1ec0a:	80 e3       	ldi	r24, 0x30	; 48
   1ec0c:	33 df       	rcall	.-410    	; 0x1ea74 <console_write_char>
   1ec0e:	a3 94       	inc	r10
					b = '0';
					while ( len < move ) {
   1ec10:	ab 14       	cp	r10, r11
					  console_write_char (b);
   1ec12:	d8 f3       	brcs	.-10     	; 0x1ec0a <console_write_P+0x116>
   1ec14:	c6 01       	movw	r24, r12
   1ec16:	59 df       	rcall	.-334    	; 0x1eaca <console_write_str>
					  len++;
   1ec18:	97 01       	movw	r18, r14
					//****************************
					ConversionLoop:
					//****************************
					len = strlen (str_buffer);
					b = '0';
					while ( len < move ) {
   1ec1a:	bb 24       	eor	r11, r11
   1ec1c:	89 cf       	rjmp	.-238    	; 0x1eb30 <console_write_P+0x3c>
					  console_write_char (b);
					  len++;
					}
					console_write_str (str_buffer);
   1ec1e:	2d 8b       	std	Y+21, r18	; 0x15
   1ec20:	3e 8b       	std	Y+22, r19	; 0x16
   1ec22:	28 df       	rcall	.-432    	; 0x1ea74 <console_write_char>
					move = 0;
					break;
   1ec24:	2d 89       	ldd	r18, Y+21	; 0x15
					while ( len < move ) {
					  console_write_char (b);
					  len++;
					}
					console_write_str (str_buffer);
					move = 0;
   1ec26:	3e 89       	ldd	r19, Y+22	; 0x16
					break;
   1ec28:	83 cf       	rjmp	.-250    	; 0x1eb30 <console_write_P+0x3c>
				} // switch
		} else
			console_write_char ( by );
   1ec2a:	66 96       	adiw	r28, 0x16	; 22
   1ec2c:	0f b6       	in	r0, 0x3f	; 63
   1ec2e:	f8 94       	cli
   1ec30:	de bf       	out	0x3e, r29	; 62
   1ec32:	0f be       	out	0x3f, r0	; 63
   1ec34:	cd bf       	out	0x3d, r28	; 61
   1ec36:	cf 91       	pop	r28
	} // for
	va_end(ap);
}
   1ec38:	df 91       	pop	r29
   1ec3a:	1f 91       	pop	r17
   1ec3c:	0f 91       	pop	r16
   1ec3e:	ff 90       	pop	r15
   1ec40:	ef 90       	pop	r14
   1ec42:	df 90       	pop	r13
   1ec44:	cf 90       	pop	r12
   1ec46:	bf 90       	pop	r11
   1ec48:	af 90       	pop	r10
   1ec4a:	08 95       	ret

0001ec4c <syslog_send>:


//-----------------------------------------------------------------------------------
// sending msg to syslog server defined in EEPROM
void syslog_send ( char *msg )
{
   1ec4c:	cf 92       	push	r12
   1ec4e:	df 92       	push	r13
   1ec50:	ef 92       	push	r14
   1ec52:	ff 92       	push	r15
   1ec54:	0f 93       	push	r16
   1ec56:	1f 93       	push	r17
   1ec58:	cf 93       	push	r28
   1ec5a:	df 93       	push	r29
   1ec5c:	6c 01       	movw	r12, r24
	char *pp = packet;
	int i = 0;

	SYSLOG_DEBUG("SYSLOG send %s\r\n", msg);

	(*((unsigned long*)&syslog_server_ip[0])) = para_getip(SYSLOG_IP_EEPROM_STORE,SYSLOG_IP);
   1ec5e:	80 e5       	ldi	r24, 0x50	; 80
   1ec60:	90 e0       	ldi	r25, 0x00	; 0
   1ec62:	40 ec       	ldi	r20, 0xC0	; 192
   1ec64:	58 ea       	ldi	r21, 0xA8	; 168
   1ec66:	64 e6       	ldi	r22, 0x64	; 100
   1ec68:	7a e0       	ldi	r23, 0x0A	; 10
   1ec6a:	4e de       	rcall	.-868    	; 0x1e908 <para_getip>
   1ec6c:	7b 01       	movw	r14, r22
   1ec6e:	8c 01       	movw	r16, r24
   1ec70:	60 93 e7 07 	sts	0x07E7, r22
   1ec74:	70 93 e8 07 	sts	0x07E8, r23
   1ec78:	80 93 e9 07 	sts	0x07E9, r24
   1ec7c:	90 93 ea 07 	sts	0x07EA, r25
   1ec80:	80 91 ea 07 	lds	r24, 0x07EA
	SYSLOG_DEBUG("Server: %1i.%1i.%1i.%1i\r\n",syslog_server_ip[0],syslog_server_ip[1],syslog_server_ip[2],syslog_server_ip[3]);

	//Arp-Request senden
	unsigned long tmp_ip = (*(unsigned long*)&syslog_server_ip[0]);
	if ( syslog_server_ip[3] != 0xFF )	// quickhack for broadcast address
   1ec84:	8f 3f       	cpi	r24, 0xFF	; 255
   1ec86:	81 f0       	breq	.+32     	; 0x1eca8 <syslog_send+0x5c>
   1ec88:	c8 01       	movw	r24, r16
		if ( arp_entry_search(tmp_ip) >= MAX_ARP_ENTRY ) //Arp-Request senden?
   1ec8a:	b7 01       	movw	r22, r14
   1ec8c:	51 db       	rcall	.-2398   	; 0x1e330 <arp_entry_search>
   1ec8e:	85 30       	cpi	r24, 0x05	; 5
   1ec90:	20 f4       	brcc	.+8      	; 0x1ec9a <syslog_send+0x4e>
   1ec92:	0a c0       	rjmp	.+20     	; 0x1eca8 <syslog_send+0x5c>
   1ec94:	21 97       	sbiw	r28, 0x01	; 1
   1ec96:	19 f4       	brne	.+6      	; 0x1ec9e <syslog_send+0x52>
   1ec98:	07 c0       	rjmp	.+14     	; 0x1eca8 <syslog_send+0x5c>
			for ( i=0; i<SYSLOG_ARPRETRIES && (arp_request(tmp_ip) != 1); i++ );
   1ec9a:	c3 e0       	ldi	r28, 0x03	; 3
   1ec9c:	d0 e0       	ldi	r29, 0x00	; 0
	SYSLOG_DEBUG("Server: %1i.%1i.%1i.%1i\r\n",syslog_server_ip[0],syslog_server_ip[1],syslog_server_ip[2],syslog_server_ip[3]);

	//Arp-Request senden
	unsigned long tmp_ip = (*(unsigned long*)&syslog_server_ip[0]);
	if ( syslog_server_ip[3] != 0xFF )	// quickhack for broadcast address
		if ( arp_entry_search(tmp_ip) >= MAX_ARP_ENTRY ) //Arp-Request senden?
   1ec9e:	c8 01       	movw	r24, r16
   1eca0:	b7 01       	movw	r22, r14
			for ( i=0; i<SYSLOG_ARPRETRIES && (arp_request(tmp_ip) != 1); i++ );
   1eca2:	25 dd       	rcall	.-1462   	; 0x1e6ee <arp_request>
   1eca4:	81 30       	cpi	r24, 0x01	; 1
   1eca6:	b1 f7       	brne	.-20     	; 0x1ec94 <syslog_send+0x48>
   1eca8:	c7 ee       	ldi	r28, 0xE7	; 231
   1ecaa:	d2 e0       	ldi	r29, 0x02	; 2
   1ecac:	8c e3       	ldi	r24, 0x3C	; 60
	if (i>=SYSLOG_ARPRETRIES) {
	  SYSLOG_ERROR("No SYSLOG server!\r\n");
	}

	// building the packet structure
	*pp++ = '<';
   1ecae:	80 93 e7 02 	sts	0x02E7, r24
   1ecb2:	80 e3       	ldi	r24, 0x30	; 48
   1ecb4:	80 93 e8 02 	sts	0x02E8, r24
	*pp++ = '0';
   1ecb8:	8e e3       	ldi	r24, 0x3E	; 62
   1ecba:	80 93 e9 02 	sts	0x02E9, r24
	*pp++ = '>';
   1ecbe:	ce 01       	movw	r24, r28
   1ecc0:	03 96       	adiw	r24, 0x03	; 3
   1ecc2:	b6 01       	movw	r22, r12
	strcpy ( pp, msg );
   1ecc4:	2d d6       	rcall	.+3162   	; 0x1f920 <strcpy>
   1ecc6:	09 90       	ld	r0, Y+
   1ecc8:	00 20       	and	r0, r0
   1ecca:	e9 f7       	brne	.-6      	; 0x1ecc6 <syslog_send+0x7a>
   1eccc:	ce 01       	movw	r24, r28
	create_new_udp_packet(strlen(packet),SYSLOG_CLIENT_PORT,SYSLOG_SERVER_PORT,tmp_ip);
   1ecce:	88 5e       	subi	r24, 0xE8	; 232
   1ecd0:	92 40       	sbci	r25, 0x02	; 2
   1ecd2:	62 e1       	ldi	r22, 0x12	; 18
   1ecd4:	76 ea       	ldi	r23, 0xA6	; 166
   1ecd6:	42 e0       	ldi	r20, 0x02	; 2
   1ecd8:	52 e0       	ldi	r21, 0x02	; 2
   1ecda:	98 01       	movw	r18, r16
   1ecdc:	87 01       	movw	r16, r14
   1ecde:	79 dd       	rcall	.-1294   	; 0x1e7d2 <create_new_udp_packet>
   1ece0:	df 91       	pop	r29
   1ece2:	cf 91       	pop	r28
   1ece4:	1f 91       	pop	r17
   1ece6:	0f 91       	pop	r16
   1ece8:	ff 90       	pop	r15
}
   1ecea:	ef 90       	pop	r14
   1ecec:	df 90       	pop	r13
   1ecee:	cf 90       	pop	r12
   1ecf0:	08 95       	ret

0001ecf2 <usart_init>:
void usart_init(void)
{
	//Serielle Schnittstelle 1
  	//Enable TXEN im Register UCR TX-Data Enable
//	UCR =(1 << TXEN | 1 << RXEN | 1<< RXCIE);
	UCR =(1 << TXEN | 1 << RXEN);
   1ecf2:	88 e1       	ldi	r24, 0x18	; 24
   1ecf4:	80 93 d1 00 	sts	0x00D1, r24
	// 2 = Parity Mode Enabled, Odd Parity
	//UCSRC = 0x06 + ((parity+1)<<4);
	//UCSRC |= (1<<USBS);
	//Teiler wird gesetzt
//	UBRR=(F_CPU / (baudrate * 16L) - 1);
	UBRR=(F_CPU / (BAUDRATE * 16L) - 1);
   1ecf8:	87 e6       	ldi	r24, 0x67	; 103
   1ecfa:	80 93 d4 00 	sts	0x00D4, r24
}
   1ecfe:	08 95       	ret

0001ed00 <usart_write_char>:
//----------------------------------------------------------------------------
//Routine für die Serielle Ausgabe eines Zeichens (Schnittstelle0)
void usart_write_char(char c)
{
	//Warten solange bis Zeichen gesendet wurde
    while(!(USR & (1<<UDRE)));
   1ed00:	90 91 d0 00 	lds	r25, 0x00D0
   1ed04:	95 ff       	sbrs	r25, 5
   1ed06:	fc cf       	rjmp	.-8      	; 0x1ed00 <usart_write_char>
    //Ausgabe des Zeichens
    UDR = c;
   1ed08:	80 93 d6 00 	sts	0x00D6, r24
}
   1ed0c:	08 95       	ret

0001ed0e <enc28j60_read_buffer>:
	while(enc28j60_read_address(ENC28J60_REG_MISTAT) & (1<<ENC28J60_BIT_MISTAT_BUSY)){}
}

//read enc28j60 buffer
void enc28j60_read_buffer(unsigned char *buffer, unsigned int len)
{
   1ed0e:	fc 01       	movw	r30, r24
	//select enc28j60
	ENC28J60_CS_LO();
   1ed10:	28 98       	cbi	0x05, 0	; 5

	//send read cmd & wait for finish:
	SPDR = ENC28J60_OP_READ_BUF_MEM;
   1ed12:	8a e3       	ldi	r24, 0x3A	; 58
   1ed14:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
   1ed16:	0d b4       	in	r0, 0x2d	; 45
   1ed18:	07 fe       	sbrs	r0, 7
   1ed1a:	fd cf       	rjmp	.-6      	; 0x1ed16 <enc28j60_read_buffer+0x8>
   1ed1c:	08 c0       	rjmp	.+16     	; 0x1ed2e <enc28j60_read_buffer+0x20>

	//read data & store in buffer:
	while(len--){
		//send dummy byte & read data
		SPDR = 0x00;
   1ed1e:	1e bc       	out	0x2e, r1	; 46
		while(!(SPSR & (1<<SPIF)));
   1ed20:	0d b4       	in	r0, 0x2d	; 45
   1ed22:	07 fe       	sbrs	r0, 7
   1ed24:	fd cf       	rjmp	.-6      	; 0x1ed20 <enc28j60_read_buffer+0x12>
		*buffer++ = SPDR;
   1ed26:	8e b5       	in	r24, 0x2e	; 46
   1ed28:	81 93       	st	Z+, r24
   1ed2a:	61 50       	subi	r22, 0x01	; 1
   1ed2c:	70 40       	sbci	r23, 0x00	; 0
	//send read cmd & wait for finish:
	SPDR = ENC28J60_OP_READ_BUF_MEM;
	while(!(SPSR & (1<<SPIF)));

	//read data & store in buffer:
	while(len--){
   1ed2e:	61 15       	cp	r22, r1
   1ed30:	71 05       	cpc	r23, r1
   1ed32:	a9 f7       	brne	.-22     	; 0x1ed1e <enc28j60_read_buffer+0x10>
		while(!(SPSR & (1<<SPIF)));
		*buffer++ = SPDR;
	}

	//deselect enc28j60
	ENC28J60_CS_HI();
   1ed34:	28 9a       	sbi	0x05, 0	; 5
}
   1ed36:	08 95       	ret

0001ed38 <enc28j60_write_buffer>:

//write enc28j60 buffer
void enc28j60_write_buffer(unsigned char *buffer, unsigned int len)
{
   1ed38:	fc 01       	movw	r30, r24
	//select enc28j60
	ENC28J60_CS_LO();
   1ed3a:	28 98       	cbi	0x05, 0	; 5

	//send write cmd & wait for finish:
	SPDR = ENC28J60_OP_WRITE_BUF_MEM;
   1ed3c:	8a e7       	ldi	r24, 0x7A	; 122
   1ed3e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
   1ed40:	0d b4       	in	r0, 0x2d	; 45
   1ed42:	07 fe       	sbrs	r0, 7
   1ed44:	fd cf       	rjmp	.-6      	; 0x1ed40 <enc28j60_write_buffer+0x8>

	do{
		//send data
		SPDR = *buffer++;
   1ed46:	81 91       	ld	r24, Z+
   1ed48:	8e bd       	out	0x2e, r24	; 46
		len--;
   1ed4a:	61 50       	subi	r22, 0x01	; 1
   1ed4c:	70 40       	sbci	r23, 0x00	; 0
		while(!(SPSR & (1<<SPIF)));
   1ed4e:	0d b4       	in	r0, 0x2d	; 45
   1ed50:	07 fe       	sbrs	r0, 7
   1ed52:	fd cf       	rjmp	.-6      	; 0x1ed4e <enc28j60_write_buffer+0x16>
	}while(len);
   1ed54:	61 15       	cp	r22, r1
   1ed56:	71 05       	cpc	r23, r1
   1ed58:	b1 f7       	brne	.-20     	; 0x1ed46 <enc28j60_write_buffer+0xe>


	//deselect enc28j60
	ENC28J60_CS_HI();
   1ed5a:	28 9a       	sbi	0x05, 0	; 5
}
   1ed5c:	08 95       	ret

0001ed5e <enc28j60_spi_read_byte>:
//read a byte (adds a extra dummy read if (address&0x80)
unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address)
{
	unsigned char res;

	ENC28J60_CS_LO(); //select enc28j60
   1ed5e:	28 98       	cbi	0x05, 0	; 5

	SPDR = op | (address & 0x1F); //start read cmd
   1ed60:	96 2f       	mov	r25, r22
   1ed62:	9f 71       	andi	r25, 0x1F	; 31
   1ed64:	98 2b       	or	r25, r24
   1ed66:	9e bd       	out	0x2e, r25	; 46

	while(!(SPSR & (1<<SPIF))); //wait for completion
   1ed68:	0d b4       	in	r0, 0x2d	; 45
   1ed6a:	07 fe       	sbrs	r0, 7
   1ed6c:	fd cf       	rjmp	.-6      	; 0x1ed68 <enc28j60_spi_read_byte+0xa>

	SPDR = 0x00; //send dummy data (read)
   1ed6e:	1e bc       	out	0x2e, r1	; 46

	while(!(SPSR & (1<<SPIF))); //wait for completion
   1ed70:	0d b4       	in	r0, 0x2d	; 45
   1ed72:	07 fe       	sbrs	r0, 7
   1ed74:	fd cf       	rjmp	.-6      	; 0x1ed70 <enc28j60_spi_read_byte+0x12>

	//if we read MAC* or MI* registers we need to add an dummy read here !
	if(address & 0x80){  //use bit7 of address for this
   1ed76:	67 ff       	sbrs	r22, 7
   1ed78:	04 c0       	rjmp	.+8      	; 0x1ed82 <enc28j60_spi_read_byte+0x24>
		SPDR = 0x00;
   1ed7a:	1e bc       	out	0x2e, r1	; 46
		while(!((SPSR) & (1<<SPIF)));
   1ed7c:	0d b4       	in	r0, 0x2d	; 45
   1ed7e:	07 fe       	sbrs	r0, 7
   1ed80:	fd cf       	rjmp	.-6      	; 0x1ed7c <enc28j60_spi_read_byte+0x1e>
	}

	res = SPDR; //read data
   1ed82:	8e b5       	in	r24, 0x2e	; 46

	ENC28J60_CS_HI();//deselect enc28j60
   1ed84:	28 9a       	sbi	0x05, 0	; 5

	return res;
}
   1ed86:	08 95       	ret

0001ed88 <enc28j60_spi_write_word>:

//spi write word
void enc28j60_spi_write_word(unsigned char hi, unsigned char lo)
{

	ENC28J60_CS_LO(); //select enc28j60
   1ed88:	28 98       	cbi	0x05, 0	; 5
	SPDR = hi; //shift hi data out
   1ed8a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); //wait for completion
   1ed8c:	0d b4       	in	r0, 0x2d	; 45
   1ed8e:	07 fe       	sbrs	r0, 7
   1ed90:	fd cf       	rjmp	.-6      	; 0x1ed8c <enc28j60_spi_write_word+0x4>

	SPDR = lo; //shift lo data out
   1ed92:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF))); //wait for completion
   1ed94:	0d b4       	in	r0, 0x2d	; 45
   1ed96:	07 fe       	sbrs	r0, 7
   1ed98:	fd cf       	rjmp	.-6      	; 0x1ed94 <enc28j60_spi_write_word+0xc>

	ENC28J60_CS_HI(); //deselect enc28j60
   1ed9a:	28 9a       	sbi	0x05, 0	; 5
}
   1ed9c:	08 95       	ret

0001ed9e <enc28j60_write_address>:
	return enc28j60_spi_read_byte(ENC28J60_OP_READ_CTRL_REG, address);
}

//write address
void enc28j60_write_address(unsigned char address, unsigned char data)
{
   1ed9e:	ff 92       	push	r15
   1eda0:	0f 93       	push	r16
   1eda2:	1f 93       	push	r17
   1eda4:	f6 2e       	mov	r15, r22
	//select bank:
	register unsigned char enc28j60_new_bank=address & 0x60,addr_masked=address&0x1f;
   1eda6:	08 2f       	mov	r16, r24
   1eda8:	0f 71       	andi	r16, 0x1F	; 31
	if((addr_masked < 0x1b) && (enc28j60_new_bank != enc28j60_current_bank)){ //Registers 0x1b..0x1f appear in every page, so switching is not necessary
   1edaa:	0b 31       	cpi	r16, 0x1B	; 27
   1edac:	88 f4       	brcc	.+34     	; 0x1edd0 <enc28j60_write_address+0x32>

//write address
void enc28j60_write_address(unsigned char address, unsigned char data)
{
	//select bank:
	register unsigned char enc28j60_new_bank=address & 0x60,addr_masked=address&0x1f;
   1edae:	18 2f       	mov	r17, r24
   1edb0:	10 76       	andi	r17, 0x60	; 96
	if((addr_masked < 0x1b) && (enc28j60_new_bank != enc28j60_current_bank)){ //Registers 0x1b..0x1f appear in every page, so switching is not necessary
   1edb2:	80 91 eb 07 	lds	r24, 0x07EB
   1edb6:	18 17       	cp	r17, r24
   1edb8:	59 f0       	breq	.+22     	; 0x1edd0 <enc28j60_write_address+0x32>
		enc28j60_current_bank = enc28j60_new_bank;
   1edba:	10 93 eb 07 	sts	0x07EB, r17

		//clear bank sel bits:  //BF 03
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
   1edbe:	8f eb       	ldi	r24, 0xBF	; 191
   1edc0:	63 e0       	ldi	r22, 0x03	; 3
   1edc2:	e2 df       	rcall	.-60     	; 0x1ed88 <enc28j60_spi_write_word>
   1edc4:	61 2f       	mov	r22, r17
		//setup bank selection bits: //e.g. 9F 00  for Bank 0
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_new_bank>>5);
   1edc6:	62 95       	swap	r22
   1edc8:	66 95       	lsr	r22
   1edca:	67 70       	andi	r22, 0x07	; 7
   1edcc:	8f e9       	ldi	r24, 0x9F	; 159
   1edce:	dc df       	rcall	.-72     	; 0x1ed88 <enc28j60_spi_write_word>
   1edd0:	80 2f       	mov	r24, r16
   1edd2:	80 64       	ori	r24, 0x40	; 64
	}
	//and write data
	enc28j60_spi_write_word((ENC28J60_OP_WRITE_CTRL_REG | addr_masked), data);
   1edd4:	6f 2d       	mov	r22, r15
   1edd6:	d8 df       	rcall	.-80     	; 0x1ed88 <enc28j60_spi_write_word>
   1edd8:	1f 91       	pop	r17
   1edda:	0f 91       	pop	r16
   1eddc:	ff 90       	pop	r15
}
   1edde:	08 95       	ret

0001ede0 <enc28j60_read_address>:
	ENC28J60_CS_HI();
}

//read address
unsigned char enc28j60_read_address(unsigned char address)
{
   1ede0:	0f 93       	push	r16
   1ede2:	1f 93       	push	r17
   1ede4:	18 2f       	mov	r17, r24
	//hier Vereinfachung, da die Register 1b..1f in allen Bänken erreichbar sind, braucht die Bank nicht umgeschaltet werden
	//do it easy: for registers 1b..1f it is not necessary to change bank as they are available in all banks
	register unsigned char enc28j60_new_bank=address & 0x60;
	if(((address&0x1f)<0x1b) && (enc28j60_new_bank != enc28j60_current_bank)){ //Regs 0x1b..0x1f appear in every page, so switching is not necessary
   1ede6:	28 2f       	mov	r18, r24
   1ede8:	30 e0       	ldi	r19, 0x00	; 0
   1edea:	2f 71       	andi	r18, 0x1F	; 31
   1edec:	30 70       	andi	r19, 0x00	; 0
   1edee:	2b 31       	cpi	r18, 0x1B	; 27
   1edf0:	31 05       	cpc	r19, r1
   1edf2:	8c f4       	brge	.+34     	; 0x1ee16 <enc28j60_read_address+0x36>
//read address
unsigned char enc28j60_read_address(unsigned char address)
{
	//hier Vereinfachung, da die Register 1b..1f in allen Bänken erreichbar sind, braucht die Bank nicht umgeschaltet werden
	//do it easy: for registers 1b..1f it is not necessary to change bank as they are available in all banks
	register unsigned char enc28j60_new_bank=address & 0x60;
   1edf4:	08 2f       	mov	r16, r24
   1edf6:	00 76       	andi	r16, 0x60	; 96
	if(((address&0x1f)<0x1b) && (enc28j60_new_bank != enc28j60_current_bank)){ //Regs 0x1b..0x1f appear in every page, so switching is not necessary
   1edf8:	80 91 eb 07 	lds	r24, 0x07EB
   1edfc:	08 17       	cp	r16, r24
   1edfe:	59 f0       	breq	.+22     	; 0x1ee16 <enc28j60_read_address+0x36>
		enc28j60_current_bank = enc28j60_new_bank;
   1ee00:	00 93 eb 07 	sts	0x07EB, r16

		//clear bank sel bits:  //BF 03
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),3<<ENC28J60_BIT_ECON1_BSEL0);
   1ee04:	8f eb       	ldi	r24, 0xBF	; 191
   1ee06:	63 e0       	ldi	r22, 0x03	; 3
   1ee08:	bf df       	rcall	.-130    	; 0x1ed88 <enc28j60_spi_write_word>
   1ee0a:	60 2f       	mov	r22, r16
		//setup bank selection bits: //e.g. 9F 00  for Bank 0
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_new_bank>>5);
   1ee0c:	62 95       	swap	r22
   1ee0e:	66 95       	lsr	r22
   1ee10:	67 70       	andi	r22, 0x07	; 7
   1ee12:	8f e9       	ldi	r24, 0x9F	; 159
   1ee14:	b9 df       	rcall	.-142    	; 0x1ed88 <enc28j60_spi_write_word>
   1ee16:	80 e0       	ldi	r24, 0x00	; 0
   1ee18:	61 2f       	mov	r22, r17
	}
	//and read the data:
	return enc28j60_spi_read_byte(ENC28J60_OP_READ_CTRL_REG, address);
   1ee1a:	a1 df       	rcall	.-190    	; 0x1ed5e <enc28j60_spi_read_byte>
   1ee1c:	1f 91       	pop	r17
   1ee1e:	0f 91       	pop	r16
   1ee20:	08 95       	ret

0001ee22 <enc28j60_write_phy>:
	return res;
}

//write phy register
void enc28j60_write_phy(unsigned char address, unsigned int data)
{
   1ee22:	1f 93       	push	r17
   1ee24:	df 93       	push	r29
   1ee26:	cf 93       	push	r28
   1ee28:	0f 92       	push	r0
   1ee2a:	cd b7       	in	r28, 0x3d	; 61
   1ee2c:	de b7       	in	r29, 0x3e	; 62
   1ee2e:	98 2f       	mov	r25, r24
   1ee30:	16 2f       	mov	r17, r22
	//see microchip datasheet p.21
	//set address to MIREGADR:
	enc28j60_write_address(ENC28J60_REG_MIREGADR, address);
   1ee32:	84 ed       	ldi	r24, 0xD4	; 212
   1ee34:	69 2f       	mov	r22, r25
   1ee36:	79 83       	std	Y+1, r23	; 0x01
   1ee38:	b2 df       	rcall	.-156    	; 0x1ed9e <enc28j60_write_address>
   1ee3a:	86 ed       	ldi	r24, 0xD6	; 214

	//send the data
	enc28j60_write_address(ENC28J60_REG_MIWRL, data&0xFF);
   1ee3c:	61 2f       	mov	r22, r17
   1ee3e:	af df       	rcall	.-162    	; 0x1ed9e <enc28j60_write_address>
   1ee40:	87 ed       	ldi	r24, 0xD7	; 215
   1ee42:	79 81       	ldd	r23, Y+1	; 0x01
	enc28j60_write_address(ENC28J60_REG_MIWRH, data>>8  );
   1ee44:	67 2f       	mov	r22, r23
   1ee46:	ab df       	rcall	.-170    	; 0x1ed9e <enc28j60_write_address>
   1ee48:	8a ee       	ldi	r24, 0xEA	; 234
   1ee4a:	ca df       	rcall	.-108    	; 0x1ede0 <enc28j60_read_address>
   1ee4c:	80 fd       	sbrc	r24, 0

	//wait until PHY write finished:
	while(enc28j60_read_address(ENC28J60_REG_MISTAT) & (1<<ENC28J60_BIT_MISTAT_BUSY)){}
   1ee4e:	fc cf       	rjmp	.-8      	; 0x1ee48 <enc28j60_write_phy+0x26>
   1ee50:	0f 90       	pop	r0
   1ee52:	cf 91       	pop	r28
   1ee54:	df 91       	pop	r29
   1ee56:	1f 91       	pop	r17
}
   1ee58:	08 95       	ret

0001ee5a <enc28j60_receive_packet>:
	//activate transmission
	enc28j60_spi_write_word(ENC28J60_OP_BFS | ENC28J60_REG_ECON1, (1<<ENC28J60_BIT_TXRTS)|(1<<ENC28J60_BIT_RXEN));
}

unsigned int enc28j60_receive_packet(unsigned int maxlen, unsigned char *buffer)
{
   1ee5a:	ef 92       	push	r14
   1ee5c:	ff 92       	push	r15
   1ee5e:	0f 93       	push	r16
   1ee60:	1f 93       	push	r17
   1ee62:	cf 93       	push	r28
   1ee64:	df 93       	push	r29
   1ee66:	8c 01       	movw	r16, r24
   1ee68:	7b 01       	movw	r14, r22
	unsigned int rxstat;
	unsigned int len;

	//packet in buffer ?
	if ((enc28j60_read_address(ENC28J60_REG_EIR) & (1<<ENC28J60_BIT_PKTIF)) == 0){
   1ee6a:	8c e1       	ldi	r24, 0x1C	; 28
   1ee6c:	b9 df       	rcall	.-142    	; 0x1ede0 <enc28j60_read_address>
   1ee6e:	86 fd       	sbrc	r24, 6
   1ee70:	05 c0       	rjmp	.+10     	; 0x1ee7c <enc28j60_receive_packet+0x22>
   1ee72:	89 e3       	ldi	r24, 0x39	; 57
		//double check!
		//errata says that PKTIF does not work as it should
		//->check packetcount too:
		if (enc28j60_read_address(ENC28J60_REG_EPKTCNT) == 0)
   1ee74:	b5 df       	rcall	.-150    	; 0x1ede0 <enc28j60_read_address>
   1ee76:	88 23       	and	r24, r24
   1ee78:	09 f4       	brne	.+2      	; 0x1ee7c <enc28j60_receive_packet+0x22>
   1ee7a:	55 c0       	rjmp	.+170    	; 0x1ef26 <enc28j60_receive_packet+0xcc>
   1ee7c:	80 e0       	ldi	r24, 0x00	; 0
   1ee7e:	60 91 ec 07 	lds	r22, 0x07EC
			return 0;
	}

	//set read pointer to next packet;
	enc28j60_write_address(ENC28J60_REG_ERDPTL, (enc28j60_next_packet_ptr));
   1ee82:	8d df       	rcall	.-230    	; 0x1ed9e <enc28j60_write_address>
   1ee84:	60 91 ed 07 	lds	r22, 0x07ED
   1ee88:	81 e0       	ldi	r24, 0x01	; 1
	enc28j60_write_address(ENC28J60_REG_ERDPTH, (enc28j60_next_packet_ptr)>>8);
   1ee8a:	89 df       	rcall	.-238    	; 0x1ed9e <enc28j60_write_address>
   1ee8c:	8a e3       	ldi	r24, 0x3A	; 58
   1ee8e:	60 e0       	ldi	r22, 0x00	; 0
   1ee90:	66 df       	rcall	.-308    	; 0x1ed5e <enc28j60_spi_read_byte>
   1ee92:	c8 2f       	mov	r28, r24

	//now read the transmit status vector
	//read next packet ptr
	enc28j60_next_packet_ptr  = enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0);
   1ee94:	d0 e0       	ldi	r29, 0x00	; 0
   1ee96:	d0 93 ed 07 	sts	0x07ED, r29
   1ee9a:	c0 93 ec 07 	sts	0x07EC, r28
   1ee9e:	8a e3       	ldi	r24, 0x3A	; 58
   1eea0:	60 e0       	ldi	r22, 0x00	; 0
   1eea2:	5d df       	rcall	.-326    	; 0x1ed5e <enc28j60_spi_read_byte>
   1eea4:	38 2f       	mov	r19, r24
   1eea6:	20 e0       	ldi	r18, 0x00	; 0
	enc28j60_next_packet_ptr |= enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0)<<8;
   1eea8:	c2 2b       	or	r28, r18
   1eeaa:	d3 2b       	or	r29, r19
   1eeac:	d0 93 ed 07 	sts	0x07ED, r29
   1eeb0:	c0 93 ec 07 	sts	0x07EC, r28
   1eeb4:	8a e3       	ldi	r24, 0x3A	; 58
   1eeb6:	60 e0       	ldi	r22, 0x00	; 0
   1eeb8:	52 df       	rcall	.-348    	; 0x1ed5e <enc28j60_spi_read_byte>
   1eeba:	c8 2f       	mov	r28, r24
   1eebc:	d0 e0       	ldi	r29, 0x00	; 0
   1eebe:	8a e3       	ldi	r24, 0x3A	; 58

	//read packet length
	len  = enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0);
   1eec0:	60 e0       	ldi	r22, 0x00	; 0
   1eec2:	4d df       	rcall	.-358    	; 0x1ed5e <enc28j60_spi_read_byte>
   1eec4:	38 2f       	mov	r19, r24
   1eec6:	20 e0       	ldi	r18, 0x00	; 0
   1eec8:	c2 2b       	or	r28, r18
   1eeca:	d3 2b       	or	r29, r19
	len |= enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0)<<8;
   1eecc:	8a e3       	ldi	r24, 0x3A	; 58
   1eece:	60 e0       	ldi	r22, 0x00	; 0
   1eed0:	46 df       	rcall	.-372    	; 0x1ed5e <enc28j60_spi_read_byte>
   1eed2:	8a e3       	ldi	r24, 0x3A	; 58
   1eed4:	60 e0       	ldi	r22, 0x00	; 0
   1eed6:	43 df       	rcall	.-378    	; 0x1ed5e <enc28j60_spi_read_byte>
   1eed8:	0c 17       	cp	r16, r28
   1eeda:	1d 07       	cpc	r17, r29

	//read rx stat
	rxstat  = enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0);
   1eedc:	08 f4       	brcc	.+2      	; 0x1eee0 <enc28j60_receive_packet+0x86>
   1eede:	e8 01       	movw	r28, r16
   1eee0:	c7 01       	movw	r24, r14
   1eee2:	be 01       	movw	r22, r28
	rxstat |= enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0)<<8;
   1eee4:	14 df       	rcall	.-472    	; 0x1ed0e <enc28j60_read_buffer>
   1eee6:	60 91 ec 07 	lds	r22, 0x07EC
   1eeea:	70 91 ed 07 	lds	r23, 0x07ED
   1eeee:	cb 01       	movw	r24, r22
   1eef0:	01 97       	sbiw	r24, 0x01	; 1
   1eef2:	2a e1       	ldi	r18, 0x1A	; 26
	//limit read bytecount
	if (len>maxlen)
		len = maxlen;

	//transfer packet from enc28j60 to our buffer
	enc28j60_read_buffer(buffer,len);
   1eef4:	80 30       	cpi	r24, 0x00	; 0
   1eef6:	92 07       	cpc	r25, r18
   1eef8:	30 f0       	brcs	.+12     	; 0x1ef06 <enc28j60_receive_packet+0xac>
   1eefa:	8c e0       	ldi	r24, 0x0C	; 12

	//mark packet as processed (free mem)

	//ERRATA says we need to check packet pointer:
	if ((enc28j60_next_packet_ptr- 1 < ENC28J60_RX_BUFFER_START) || (enc28j60_next_packet_ptr- 1 > ENC28J60_RX_BUFFER_END)){
   1eefc:	6f ef       	ldi	r22, 0xFF	; 255
   1eefe:	4f df       	rcall	.-354    	; 0x1ed9e <enc28j60_write_address>
   1ef00:	8d e0       	ldi	r24, 0x0D	; 13
   1ef02:	69 e1       	ldi	r22, 0x19	; 25
   1ef04:	0b c0       	rjmp	.+22     	; 0x1ef1c <enc28j60_receive_packet+0xc2>
   1ef06:	61 50       	subi	r22, 0x01	; 1
   1ef08:	8c e0       	ldi	r24, 0x0C	; 12
   1ef0a:	49 df       	rcall	.-366    	; 0x1ed9e <enc28j60_write_address>
   1ef0c:	20 91 ec 07 	lds	r18, 0x07EC
		enc28j60_write_address(ENC28J60_REG_ERXRDPTL, LO8(ENC28J60_RX_BUFFER_END));
   1ef10:	30 91 ed 07 	lds	r19, 0x07ED
   1ef14:	21 50       	subi	r18, 0x01	; 1
   1ef16:	30 40       	sbci	r19, 0x00	; 0
		enc28j60_write_address(ENC28J60_REG_ERXRDPTH, HI8(ENC28J60_RX_BUFFER_END));
   1ef18:	8d e0       	ldi	r24, 0x0D	; 13
   1ef1a:	63 2f       	mov	r22, r19
   1ef1c:	40 df       	rcall	.-384    	; 0x1ed9e <enc28j60_write_address>
	}else{
		enc28j60_write_address(ENC28J60_REG_ERXRDPTL, LO8(enc28j60_next_packet_ptr- 1));
   1ef1e:	8e e9       	ldi	r24, 0x9E	; 158
   1ef20:	60 e4       	ldi	r22, 0x40	; 64
   1ef22:	32 df       	rcall	.-412    	; 0x1ed88 <enc28j60_spi_write_word>
   1ef24:	02 c0       	rjmp	.+4      	; 0x1ef2a <enc28j60_receive_packet+0xd0>
		enc28j60_write_address(ENC28J60_REG_ERXRDPTH, HI8(enc28j60_next_packet_ptr- 1));
   1ef26:	c0 e0       	ldi	r28, 0x00	; 0
   1ef28:	d0 e0       	ldi	r29, 0x00	; 0
   1ef2a:	ce 01       	movw	r24, r28
   1ef2c:	df 91       	pop	r29
   1ef2e:	cf 91       	pop	r28
   1ef30:	1f 91       	pop	r17
   1ef32:	0f 91       	pop	r16
   1ef34:	ff 90       	pop	r15
   1ef36:	ef 90       	pop	r14
   1ef38:	08 95       	ret

0001ef3a <enc28j60_send_packet>:
//	enc28j60_revision = enc28j60_read_address(ENC28J60_REG_ECON1);   //um die aktuelle Banknummer zu sehen
//	enc28j60_revision = enc28j60_read_address(ENC28J60_REG_EREVID);
}

void enc28j60_send_packet(unsigned int len, unsigned char *buffer)
{
   1ef3a:	ef 92       	push	r14
   1ef3c:	ff 92       	push	r15
   1ef3e:	0f 93       	push	r16
   1ef40:	1f 93       	push	r17
   1ef42:	cf 93       	push	r28
   1ef44:	df 93       	push	r29
   1ef46:	ec 01       	movw	r28, r24
   1ef48:	8b 01       	movw	r16, r22
   1ef4a:	82 e3       	ldi	r24, 0x32	; 50
   1ef4c:	e8 2e       	mov	r14, r24
   1ef4e:	f1 2c       	mov	r15, r1
	unsigned int tmp;
	//still sending ?
	//wait max 50*10 = 500ms:
	for(tmp=0; tmp<50; tmp++){
		if (!(enc28j60_read_address(ENC28J60_REG_ECON1) & (1<<ENC28J60_BIT_TXRTS))){
   1ef50:	8f e1       	ldi	r24, 0x1F	; 31
   1ef52:	46 df       	rcall	.-372    	; 0x1ede0 <enc28j60_read_address>
   1ef54:	83 ff       	sbrs	r24, 3
   1ef56:	0c c0       	rjmp	.+24     	; 0x1ef70 <enc28j60_send_packet+0x36>
   1ef58:	8f e9       	ldi	r24, 0x9F	; 159
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   1ef5a:	9f e0       	ldi	r25, 0x0F	; 15
   1ef5c:	01 97       	sbiw	r24, 0x01	; 1
   1ef5e:	f1 f7       	brne	.-4      	; 0x1ef5c <enc28j60_send_packet+0x22>
   1ef60:	00 c0       	rjmp	.+0      	; 0x1ef62 <enc28j60_send_packet+0x28>
   1ef62:	00 00       	nop
   1ef64:	08 94       	sec
   1ef66:	e1 08       	sbc	r14, r1
   1ef68:	f1 08       	sbc	r15, r1
   1ef6a:	e1 14       	cp	r14, r1
void enc28j60_send_packet(unsigned int len, unsigned char *buffer)
{
	unsigned int tmp;
	//still sending ?
	//wait max 50*10 = 500ms:
	for(tmp=0; tmp<50; tmp++){
   1ef6c:	f1 04       	cpc	r15, r1
   1ef6e:	81 f7       	brne	.-32     	; 0x1ef50 <enc28j60_send_packet+0x16>
   1ef70:	82 e0       	ldi	r24, 0x02	; 2
	}

	//send anyway...

	//setup write pointer:
	enc28j60_write_address(ENC28J60_REG_EWRPTL, (ENC28J60_TX_BUFFER_START&0xFF));
   1ef72:	60 e0       	ldi	r22, 0x00	; 0
   1ef74:	14 df       	rcall	.-472    	; 0x1ed9e <enc28j60_write_address>
   1ef76:	83 e0       	ldi	r24, 0x03	; 3
   1ef78:	6a e1       	ldi	r22, 0x1A	; 26
	enc28j60_write_address(ENC28J60_REG_EWRPTH, (ENC28J60_TX_BUFFER_START)>>8);
   1ef7a:	11 df       	rcall	.-478    	; 0x1ed9e <enc28j60_write_address>
   1ef7c:	86 e0       	ldi	r24, 0x06	; 6
   1ef7e:	6c 2f       	mov	r22, r28
   1ef80:	0e df       	rcall	.-484    	; 0x1ed9e <enc28j60_write_address>

	//set tx end pointer to [start+len]:
	enc28j60_write_address(ENC28J60_REG_ETXNDL, (ENC28J60_TX_BUFFER_START+len)&0xFF);
   1ef82:	9e 01       	movw	r18, r28
   1ef84:	20 50       	subi	r18, 0x00	; 0
   1ef86:	36 4e       	sbci	r19, 0xE6	; 230
   1ef88:	87 e0       	ldi	r24, 0x07	; 7
	enc28j60_write_address(ENC28J60_REG_ETXNDH, (ENC28J60_TX_BUFFER_START+len)>>8);
   1ef8a:	63 2f       	mov	r22, r19
   1ef8c:	08 df       	rcall	.-496    	; 0x1ed9e <enc28j60_write_address>
   1ef8e:	8a e7       	ldi	r24, 0x7A	; 122
   1ef90:	60 e0       	ldi	r22, 0x00	; 0
   1ef92:	fa de       	rcall	.-524    	; 0x1ed88 <enc28j60_spi_write_word>
   1ef94:	c8 01       	movw	r24, r16
   1ef96:	be 01       	movw	r22, r28

	//start buffer write command
	enc28j60_spi_write_word(ENC28J60_OP_WRITE_BUF_MEM, 0x00);
   1ef98:	cf de       	rcall	.-610    	; 0x1ed38 <enc28j60_write_buffer>
   1ef9a:	8f e9       	ldi	r24, 0x9F	; 159
   1ef9c:	60 e8       	ldi	r22, 0x80	; 128
   1ef9e:	f4 de       	rcall	.-536    	; 0x1ed88 <enc28j60_spi_write_word>

	//copy buffer to enc28j60:
	enc28j60_write_buffer(buffer, len);
   1efa0:	8f eb       	ldi	r24, 0xBF	; 191
   1efa2:	60 e8       	ldi	r22, 0x80	; 128
   1efa4:	f1 de       	rcall	.-542    	; 0x1ed88 <enc28j60_spi_write_word>
   1efa6:	8f e9       	ldi	r24, 0x9F	; 159

	//bad silicon workaround:
	//reset tx logic:
	enc28j60_spi_write_word(ENC28J60_OP_BFS | ENC28J60_REG_ECON1, (1<<ENC28J60_BIT_TXRST));
   1efa8:	6c e0       	ldi	r22, 0x0C	; 12
   1efaa:	ee de       	rcall	.-548    	; 0x1ed88 <enc28j60_spi_write_word>
   1efac:	df 91       	pop	r29
   1efae:	cf 91       	pop	r28
	enc28j60_spi_write_word(ENC28J60_OP_BFC | ENC28J60_REG_ECON1, (1<<ENC28J60_BIT_TXRST));
   1efb0:	1f 91       	pop	r17
   1efb2:	0f 91       	pop	r16
   1efb4:	ff 90       	pop	r15
   1efb6:	ef 90       	pop	r14

	//activate transmission
	enc28j60_spi_write_word(ENC28J60_OP_BFS | ENC28J60_REG_ECON1, (1<<ENC28J60_BIT_TXRTS)|(1<<ENC28J60_BIT_RXEN));
   1efb8:	08 95       	ret

0001efba <enc28j60_init>:
	};


//initialise spi & enc28j60
void enc28j60_init(void)
{
   1efba:	0f 93       	push	r16
   1efbc:	1f 93       	push	r17
   1efbe:	cf 93       	push	r28
   1efc0:	df 93       	push	r29
	unsigned char i;
	unsigned int timeout=0;

	//set bank to invalid value -> bank set will update in any case:
	enc28j60_current_bank = 0xFF;
   1efc2:	8f ef       	ldi	r24, 0xFF	; 255
   1efc4:	80 93 eb 07 	sts	0x07EB, r24

	//set up port directions:
	ENC28J60_DDR |= (1<<ENC28J60_PIN_CS);
   1efc8:	20 9a       	sbi	0x04, 0	; 4

	//deselect enc28j60:
	ENC28J60_CS_HI();
   1efca:	28 9a       	sbi	0x05, 0	; 5

	//SPI init
	// initialize I/O
	PORTB |= (1<<ENC28J60_PIN_SCK); //sck = hi
   1efcc:	29 9a       	sbi	0x05, 1	; 5

	//spi = output
	DDRB |= (1<<ENC28J60_PIN_SS)|(1<<ENC28J60_PIN_CS)|(1<<ENC28J60_PIN_MOSI)|(1<<ENC28J60_PIN_SCK); //SS,MOSI,SCK = OUT
   1efce:	84 b1       	in	r24, 0x04	; 4
   1efd0:	87 60       	ori	r24, 0x07	; 7
   1efd2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<ENC28J60_PIN_MISO); //MISO = IN
   1efd4:	23 98       	cbi	0x04, 3	; 4
	// - master mode
	// - positive clock phase
	// - msb first
	// - maximum SPI speed (fosc/2)
	// - enable spi
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0);
   1efd6:	80 e5       	ldi	r24, 0x50	; 80
   1efd8:	8c bd       	out	0x2c, r24	; 44

	SPSR = (1<<SPI2X);
   1efda:	81 e0       	ldi	r24, 0x01	; 1
   1efdc:	8d bd       	out	0x2d, r24	; 45
   1efde:	80 e4       	ldi	r24, 0x40	; 64
   1efe0:	9d e0       	ldi	r25, 0x0D	; 13
   1efe2:	a3 e0       	ldi	r26, 0x03	; 3
   1efe4:	b0 e0       	ldi	r27, 0x00	; 0

	delay(200000);
   1efe6:	00 00       	nop
   1efe8:	01 97       	sbiw	r24, 0x01	; 1
   1efea:	a1 09       	sbc	r26, r1
   1efec:	b1 09       	sbc	r27, r1
   1efee:	d9 f7       	brne	.-10     	; 0x1efe6 <enc28j60_init+0x2c>
	enc28j60_spi_write_word (ENC28J60_SOFT_RESET, ENC28J60_SOFT_RESET);
   1eff0:	8f ef       	ldi	r24, 0xFF	; 255
   1eff2:	6f ef       	ldi	r22, 0xFF	; 255
   1eff4:	c9 de       	rcall	.-622    	; 0x1ed88 <enc28j60_spi_write_word>
   1eff6:	80 e4       	ldi	r24, 0x40	; 64
   1eff8:	9d e0       	ldi	r25, 0x0D	; 13
   1effa:	a3 e0       	ldi	r26, 0x03	; 3
   1effc:	b0 e0       	ldi	r27, 0x00	; 0
   1effe:	00 00       	nop
	// check CLKRDY bit to see if reset is complete
	delay(200000);
   1f000:	01 97       	sbiw	r24, 0x01	; 1
   1f002:	a1 09       	sbc	r26, r1
   1f004:	b1 09       	sbc	r27, r1
   1f006:	d9 f7       	brne	.-10     	; 0x1effe <enc28j60_init+0x44>
   1f008:	c0 e0       	ldi	r28, 0x00	; 0
   1f00a:	d0 e0       	ldi	r29, 0x00	; 0
   1f00c:	01 c0       	rjmp	.+2      	; 0x1f010 <enc28j60_init+0x56>
   1f00e:	21 96       	adiw	r28, 0x01	; 1

	//wait for ready flag
	while((!(enc28j60_read_address(ENC28J60_REG_ESTAT) & 0x01)) && (timeout<65000)){timeout++;};
   1f010:	8d e1       	ldi	r24, 0x1D	; 29
   1f012:	e6 de       	rcall	.-564    	; 0x1ede0 <enc28j60_read_address>
   1f014:	80 fd       	sbrc	r24, 0
   1f016:	04 c0       	rjmp	.+8      	; 0x1f020 <enc28j60_init+0x66>
   1f018:	8d ef       	ldi	r24, 0xFD	; 253
   1f01a:	c8 3e       	cpi	r28, 0xE8	; 232
   1f01c:	d8 07       	cpc	r29, r24
   1f01e:	b9 f7       	brne	.-18     	; 0x1f00e <enc28j60_init+0x54>
   1f020:	10 92 ed 07 	sts	0x07ED, r1
	if(timeout>=65000){timeout=0;}

	//set up rx pointer:
	enc28j60_next_packet_ptr = ENC28J60_RX_BUFFER_START;
   1f024:	10 92 ec 07 	sts	0x07EC, r1
   1f028:	cf e0       	ldi	r28, 0x0F	; 15
   1f02a:	d2 e0       	ldi	r29, 0x02	; 2
   1f02c:	88 81       	ld	r24, Y
   1f02e:	69 81       	ldd	r22, Y+1	; 0x01
	//enc28j60_next_packet_ptr = 0x0602;

	//copy config from progmem to enc28j60:
	for(i=0; i<2*16; i+=2){
		enc28j60_write_address(enc28j60_config[i+0], enc28j60_config[i+1]);
   1f030:	b6 de       	rcall	.-660    	; 0x1ed9e <enc28j60_write_address>
   1f032:	22 96       	adiw	r28, 0x02	; 2
   1f034:	e2 e0       	ldi	r30, 0x02	; 2
   1f036:	cf 32       	cpi	r28, 0x2F	; 47
   1f038:	de 07       	cpc	r29, r30
	//set up rx pointer:
	enc28j60_next_packet_ptr = ENC28J60_RX_BUFFER_START;
	//enc28j60_next_packet_ptr = 0x0602;

	//copy config from progmem to enc28j60:
	for(i=0; i<2*16; i+=2){
   1f03a:	c1 f7       	brne	.-16     	; 0x1f02c <enc28j60_init+0x72>
   1f03c:	cf e2       	ldi	r28, 0x2F	; 47
   1f03e:	d2 e0       	ldi	r29, 0x02	; 2
   1f040:	09 e0       	ldi	r16, 0x09	; 9
   1f042:	12 e0       	ldi	r17, 0x02	; 2
   1f044:	f8 01       	movw	r30, r16
   1f046:	61 91       	ld	r22, Z+
   1f048:	8f 01       	movw	r16, r30
		enc28j60_write_address(enc28j60_config[i+0], enc28j60_config[i+1]);
	}

	// mac address no longer as define
	for (i=0; i<6; i++) {
		enc28j60_write_address(enc28j60_macaddr[i], mymac[i]);
   1f04a:	89 91       	ld	r24, Y+
   1f04c:	a8 de       	rcall	.-688    	; 0x1ed9e <enc28j60_write_address>
   1f04e:	f2 e0       	ldi	r31, 0x02	; 2
   1f050:	c5 33       	cpi	r28, 0x35	; 53
   1f052:	df 07       	cpc	r29, r31
   1f054:	b9 f7       	brne	.-18     	; 0x1f044 <enc28j60_init+0x8a>
	for(i=0; i<2*16; i+=2){
		enc28j60_write_address(enc28j60_config[i+0], enc28j60_config[i+1]);
	}

	// mac address no longer as define
	for (i=0; i<6; i++) {
   1f056:	80 e1       	ldi	r24, 0x10	; 16
   1f058:	60 e0       	ldi	r22, 0x00	; 0
   1f05a:	71 e0       	ldi	r23, 0x01	; 1
   1f05c:	e2 de       	rcall	.-572    	; 0x1ee22 <enc28j60_write_phy>
		enc28j60_write_address(enc28j60_macaddr[i], mymac[i]);
	}

	//setup phy:
	enc28j60_write_phy(ENC28J60_PHY_PHCON2, (1<<ENC28J60_BIT_HDLDIS)); //=no loopback of transmitted frames
   1f05e:	8b e1       	ldi	r24, 0x1B	; 27
   1f060:	60 ec       	ldi	r22, 0xC0	; 192
   1f062:	9d de       	rcall	.-710    	; 0x1ed9e <enc28j60_write_address>
   1f064:	8f e9       	ldi	r24, 0x9F	; 159
   1f066:	64 e0       	ldi	r22, 0x04	; 4

	//enable interrups
	enc28j60_write_address(ENC28J60_REG_EIE, (1<<ENC28J60_EIE_INTIE)|(1<<ENC28J60_EIE_PKTIE));
   1f068:	8f de       	rcall	.-738    	; 0x1ed88 <enc28j60_spi_write_word>
   1f06a:	84 e1       	ldi	r24, 0x14	; 20
   1f06c:	6a e7       	ldi	r22, 0x7A	; 122
   1f06e:	74 e3       	ldi	r23, 0x34	; 52

	//enable rx
	//enc28j60_write_address(ENC28J60_REG_ECON1, (1<<ENC28J60_BIT_RXEN));
	enc28j60_spi_write_word(ENC28J60_OP_BFS|ENC28J60_REG_ECON1, (1<<ENC28J60_BIT_RXEN));
   1f070:	d8 de       	rcall	.-592    	; 0x1ee22 <enc28j60_write_phy>
   1f072:	df 91       	pop	r29
   1f074:	cf 91       	pop	r28
   1f076:	1f 91       	pop	r17

	//set up leds: LEDA: link status, LEDB: RX&TX activity, stretch 40ms, stretch enable
	enc28j60_write_phy(ENC28J60_PHY_PHLCON, 0x347A); //cave: Table3-3: reset value is 0x3422, do not modify the reserved "3"!!
   1f078:	0f 91       	pop	r16
   1f07a:	08 95       	ret

0001f07c <tftp_init>:

//----------------------------------------------------------------------------
//Initialisierung des TFTP Ports (für den Datenempfang)
void tftp_init (void)
{
	ihex_init();			// initialize the interpreter and flasher
   1f07c:	51 d2       	rcall	.+1186   	; 0x1f520 <ihex_init>
   1f07e:	80 e3       	ldi	r24, 0x30	; 48
	tftp_watchdog = TFTP_WATCHDOG_OFF;	// reset timer for answer
   1f080:	95 e7       	ldi	r25, 0x75	; 117
   1f082:	90 93 b2 02 	sts	0x02B2, r25
   1f086:	80 93 b1 02 	sts	0x02B1, r24
   1f08a:	10 92 bc 02 	sts	0x02BC, r1

	tftp_block = TFTP_OFF;	// init the number of the last TFTP block received
   1f08e:	10 92 bb 02 	sts	0x02BB, r1
   1f092:	08 95       	ret

0001f094 <tftp_request>:


//----------------------------------------------------------------------------
//Anforderung einer Datei vom TFTP-Server
void tftp_request (void)
{
   1f094:	af 92       	push	r10
   1f096:	bf 92       	push	r11
   1f098:	cf 92       	push	r12
   1f09a:	df 92       	push	r13
   1f09c:	ef 92       	push	r14
   1f09e:	ff 92       	push	r15
   1f0a0:	0f 93       	push	r16
   1f0a2:	1f 93       	push	r17
   1f0a4:	df 93       	push	r29
   1f0a6:	cf 93       	push	r28
   1f0a8:	cd b7       	in	r28, 0x3d	; 61
   1f0aa:	de b7       	in	r29, 0x3e	; 62
   1f0ac:	6a 97       	sbiw	r28, 0x1a	; 26
   1f0ae:	0f b6       	in	r0, 0x3f	; 63
   1f0b0:	f8 94       	cli
   1f0b2:	de bf       	out	0x3e, r29	; 62
   1f0b4:	0f be       	out	0x3f, r0	; 63
   1f0b6:	cd bf       	out	0x3d, r28	; 61
	int i;

	TFTP_header_t *tftp_header_p = (TFTP_header_t *)(eth_buffer+UDP_DATA_START);

	TFTP_DEBUG("TFTP Req\r\n");
	if ( tftp_block != TFTP_OFF ) {
   1f0b8:	80 91 bb 02 	lds	r24, 0x02BB
   1f0bc:	90 91 bc 02 	lds	r25, 0x02BC
   1f0c0:	00 97       	sbiw	r24, 0x00	; 0
   1f0c2:	09 f0       	breq	.+2      	; 0x1f0c6 <tftp_request+0x32>
//	  TFTP_ERROR("TFTP running!\r\n");
	  ihex_appstart();
   1f0c4:	10 d2       	rcall	.+1056   	; 0x1f4e6 <ihex_appstart>
   1f0c6:	8c e3       	ldi	r24, 0x3C	; 60
	}

	(*((unsigned long*)&tftp_server_ip[0])) = para_getip(TFTP_IP_EEPROM_STORE,TFTP_IP);
   1f0c8:	90 e0       	ldi	r25, 0x00	; 0
   1f0ca:	40 ec       	ldi	r20, 0xC0	; 192
   1f0cc:	58 ea       	ldi	r21, 0xA8	; 168
   1f0ce:	64 e6       	ldi	r22, 0x64	; 100
   1f0d0:	7a e0       	ldi	r23, 0x0A	; 10
   1f0d2:	1a dc       	rcall	.-1996   	; 0x1e908 <para_getip>
   1f0d4:	60 93 ee 07 	sts	0x07EE, r22
   1f0d8:	70 93 ef 07 	sts	0x07EF, r23
   1f0dc:	80 93 f0 07 	sts	0x07F0, r24
   1f0e0:	90 93 f1 07 	sts	0x07F1, r25
   1f0e4:	8d b7       	in	r24, 0x3d	; 61
   1f0e6:	9e b7       	in	r25, 0x3e	; 62
	TFTP_MSG("Svr %3i.%3i.%3i.%3i\r\n",tftp_server_ip[0],tftp_server_ip[1],tftp_server_ip[2],tftp_server_ip[3]);
   1f0e8:	0a 97       	sbiw	r24, 0x0a	; 10
   1f0ea:	0f b6       	in	r0, 0x3f	; 63
   1f0ec:	f8 94       	cli
   1f0ee:	9e bf       	out	0x3e, r25	; 62
   1f0f0:	0f be       	out	0x3f, r0	; 63
   1f0f2:	8d bf       	out	0x3d, r24	; 61
   1f0f4:	ed b7       	in	r30, 0x3d	; 61
   1f0f6:	fe b7       	in	r31, 0x3e	; 62
   1f0f8:	31 96       	adiw	r30, 0x01	; 1
   1f0fa:	85 e3       	ldi	r24, 0x35	; 53
   1f0fc:	92 e0       	ldi	r25, 0x02	; 2
   1f0fe:	ad b7       	in	r26, 0x3d	; 61
   1f100:	be b7       	in	r27, 0x3e	; 62
   1f102:	12 96       	adiw	r26, 0x02	; 2
   1f104:	9c 93       	st	X, r25
   1f106:	8e 93       	st	-X, r24
   1f108:	11 97       	sbiw	r26, 0x01	; 1
   1f10a:	80 91 ee 07 	lds	r24, 0x07EE
   1f10e:	82 83       	std	Z+2, r24	; 0x02
   1f110:	13 82       	std	Z+3, r1	; 0x03
   1f112:	80 91 ef 07 	lds	r24, 0x07EF
   1f116:	84 83       	std	Z+4, r24	; 0x04
   1f118:	15 82       	std	Z+5, r1	; 0x05
   1f11a:	80 91 f0 07 	lds	r24, 0x07F0
   1f11e:	86 83       	std	Z+6, r24	; 0x06
   1f120:	17 82       	std	Z+7, r1	; 0x07
   1f122:	80 91 f1 07 	lds	r24, 0x07F1
   1f126:	80 87       	std	Z+8, r24	; 0x08
   1f128:	11 86       	std	Z+9, r1	; 0x09
   1f12a:	e4 dc       	rcall	.-1592   	; 0x1eaf4 <console_write_P>
   1f12c:	a0 90 ee 07 	lds	r10, 0x07EE
   1f130:	b0 90 ef 07 	lds	r11, 0x07EF

	//Arp-Request senden
	unsigned long tmp_ip = (*(unsigned long*)&tftp_server_ip[0]);
   1f134:	c0 90 f0 07 	lds	r12, 0x07F0
   1f138:	d0 90 f1 07 	lds	r13, 0x07F1
   1f13c:	ed b7       	in	r30, 0x3d	; 61
   1f13e:	fe b7       	in	r31, 0x3e	; 62
   1f140:	3a 96       	adiw	r30, 0x0a	; 10
   1f142:	0f b6       	in	r0, 0x3f	; 63
   1f144:	f8 94       	cli
   1f146:	fe bf       	out	0x3e, r31	; 62
   1f148:	0f be       	out	0x3f, r0	; 63
   1f14a:	ed bf       	out	0x3d, r30	; 61
   1f14c:	03 e0       	ldi	r16, 0x03	; 3
   1f14e:	10 e0       	ldi	r17, 0x00	; 0
   1f150:	03 c0       	rjmp	.+6      	; 0x1f158 <tftp_request+0xc4>
   1f152:	01 50       	subi	r16, 0x01	; 1
   1f154:	10 40       	sbci	r17, 0x00	; 0
   1f156:	31 f0       	breq	.+12     	; 0x1f164 <tftp_request+0xd0>
   1f158:	c6 01       	movw	r24, r12
   1f15a:	b5 01       	movw	r22, r10

	for ( i=0; i<TFTP_ARPRETRIES && (arp_request(tmp_ip) != 1); i++ );
   1f15c:	c8 da       	rcall	.-2672   	; 0x1e6ee <arp_request>
   1f15e:	81 30       	cpi	r24, 0x01	; 1
   1f160:	c1 f7       	brne	.-16     	; 0x1f152 <tftp_request+0xbe>
   1f162:	0d c0       	rjmp	.+26     	; 0x1f17e <tftp_request+0xea>
   1f164:	00 d0       	rcall	.+0      	; 0x1f166 <tftp_request+0xd2>
   1f166:	8b e4       	ldi	r24, 0x4B	; 75
   1f168:	92 e0       	ldi	r25, 0x02	; 2
   1f16a:	ad b7       	in	r26, 0x3d	; 61

	if (i>=TFTP_ARPRETRIES) {
	  TFTP_ERROR("Svr?\r\n");
   1f16c:	be b7       	in	r27, 0x3e	; 62
   1f16e:	12 96       	adiw	r26, 0x02	; 2
   1f170:	9c 93       	st	X, r25
   1f172:	8e 93       	st	-X, r24
   1f174:	11 97       	sbiw	r26, 0x01	; 1
   1f176:	be dc       	rcall	.-1668   	; 0x1eaf4 <console_write_P>
   1f178:	0f 90       	pop	r0
   1f17a:	0f 90       	pop	r0
   1f17c:	b4 d1       	rcall	.+872    	; 0x1f4e6 <ihex_appstart>
   1f17e:	7e 01       	movw	r14, r28
   1f180:	08 94       	sec
	  ihex_appstart();
   1f182:	e1 1c       	adc	r14, r1
   1f184:	f1 1c       	adc	r15, r1
   1f186:	c7 01       	movw	r24, r14
   1f188:	62 e5       	ldi	r22, 0x52	; 82
	}

	// setting name and mode from constants, prepared for a more flexible solution
	strcpy ( mode, TFTP_MODE );
   1f18a:	72 e0       	ldi	r23, 0x02	; 2
   1f18c:	c9 d3       	rcall	.+1938   	; 0x1f920 <strcpy>
   1f18e:	8e 01       	movw	r16, r28
   1f190:	06 5f       	subi	r16, 0xF6	; 246
   1f192:	1f 4f       	sbci	r17, 0xFF	; 255
   1f194:	c8 01       	movw	r24, r16
   1f196:	60 e4       	ldi	r22, 0x40	; 64
   1f198:	70 e0       	ldi	r23, 0x00	; 0
   1f19a:	40 e1       	ldi	r20, 0x10	; 16

	para_getstring (name, (unsigned char *)TFTP_FILE_EEPROM_STORE, TFTP_FILENAME_MAX, TFTP_NAME);
   1f19c:	28 e5       	ldi	r18, 0x58	; 88
   1f19e:	32 e0       	ldi	r19, 0x02	; 2
   1f1a0:	fe db       	rcall	.-2052   	; 0x1e99e <para_getstring>
   1f1a2:	00 d0       	rcall	.+0      	; 0x1f1a4 <tftp_request+0x110>
   1f1a4:	00 d0       	rcall	.+0      	; 0x1f1a6 <tftp_request+0x112>
   1f1a6:	80 e6       	ldi	r24, 0x60	; 96
   1f1a8:	92 e0       	ldi	r25, 0x02	; 2
   1f1aa:	ed b7       	in	r30, 0x3d	; 61
   1f1ac:	fe b7       	in	r31, 0x3e	; 62
   1f1ae:	92 83       	std	Z+2, r25	; 0x02
   1f1b0:	81 83       	std	Z+1, r24	; 0x01
	TFTP_MSG("File %s\r\n", name);
   1f1b2:	14 83       	std	Z+4, r17	; 0x04
   1f1b4:	03 83       	std	Z+3, r16	; 0x03
   1f1b6:	9e dc       	rcall	.-1732   	; 0x1eaf4 <console_write_P>
   1f1b8:	80 e0       	ldi	r24, 0x00	; 0
   1f1ba:	91 e0       	ldi	r25, 0x01	; 1
   1f1bc:	90 93 e8 02 	sts	0x02E8, r25
   1f1c0:	80 93 e7 02 	sts	0x02E7, r24
   1f1c4:	0f 90       	pop	r0
   1f1c6:	0f 90       	pop	r0
   1f1c8:	0f 90       	pop	r0

	// building the header structure
	tftp_header_p->type = LBBL_ENDIAN_INT((int)TFTP_RRQ);
   1f1ca:	0f 90       	pop	r0
   1f1cc:	89 ee       	ldi	r24, 0xE9	; 233
   1f1ce:	92 e0       	ldi	r25, 0x02	; 2
   1f1d0:	b8 01       	movw	r22, r16
   1f1d2:	a6 d3       	rcall	.+1868   	; 0x1f920 <strcpy>
   1f1d4:	d8 01       	movw	r26, r16
	strcpy ( tftp_header_p->u.raw, name );
   1f1d6:	0d 90       	ld	r0, X+
   1f1d8:	00 20       	and	r0, r0
   1f1da:	e9 f7       	brne	.-6      	; 0x1f1d6 <tftp_request+0x142>
   1f1dc:	cd 01       	movw	r24, r26
   1f1de:	80 1b       	sub	r24, r16
   1f1e0:	91 0b       	sbc	r25, r17
   1f1e2:	87 51       	subi	r24, 0x17	; 23
   1f1e4:	9d 4f       	sbci	r25, 0xFD	; 253
   1f1e6:	b7 01       	movw	r22, r14
	strcpy ( &(tftp_header_p->u.raw[strlen(name)+1]), mode );
   1f1e8:	9b d3       	rcall	.+1846   	; 0x1f920 <strcpy>
   1f1ea:	f8 01       	movw	r30, r16
   1f1ec:	01 90       	ld	r0, Z+
   1f1ee:	00 20       	and	r0, r0
   1f1f0:	e9 f7       	brne	.-6      	; 0x1f1ec <tftp_request+0x158>
   1f1f2:	cf 01       	movw	r24, r30
   1f1f4:	01 97       	sbiw	r24, 0x01	; 1
   1f1f6:	80 1b       	sub	r24, r16
   1f1f8:	91 0b       	sbc	r25, r17
   1f1fa:	f7 01       	movw	r30, r14
   1f1fc:	01 90       	ld	r0, Z+
   1f1fe:	00 20       	and	r0, r0
	create_new_udp_packet(strlen(name)+strlen(mode)+4,TFTP_CLIENT_PORT,TFTP_SERVER_PORT,tmp_ip);
   1f200:	e9 f7       	brne	.-6      	; 0x1f1fc <tftp_request+0x168>
   1f202:	31 97       	sbiw	r30, 0x01	; 1
   1f204:	ee 19       	sub	r30, r14
   1f206:	ff 09       	sbc	r31, r15
   1f208:	8e 0f       	add	r24, r30
   1f20a:	9f 1f       	adc	r25, r31
   1f20c:	04 96       	adiw	r24, 0x04	; 4
   1f20e:	65 e5       	ldi	r22, 0x55	; 85
   1f210:	74 ea       	ldi	r23, 0xA4	; 164
   1f212:	45 e4       	ldi	r20, 0x45	; 69
   1f214:	50 e0       	ldi	r21, 0x00	; 0
   1f216:	96 01       	movw	r18, r12
   1f218:	85 01       	movw	r16, r10
   1f21a:	db da       	rcall	.-2634   	; 0x1e7d2 <create_new_udp_packet>
   1f21c:	80 ed       	ldi	r24, 0xD0	; 208
   1f21e:	97 e0       	ldi	r25, 0x07	; 7
   1f220:	90 93 b2 02 	sts	0x02B2, r25
   1f224:	80 93 b1 02 	sts	0x02B1, r24
   1f228:	81 e0       	ldi	r24, 0x01	; 1
   1f22a:	90 e0       	ldi	r25, 0x00	; 0
   1f22c:	90 93 bc 02 	sts	0x02BC, r25
   1f230:	80 93 bb 02 	sts	0x02BB, r24

//----------------------------------------------------------------------------
// restart countdown of the watchdog
void tftp_watchdogrestart()
{
	tftp_watchdog = TFTP_WATCHDOG;
   1f234:	6a 96       	adiw	r28, 0x1a	; 26
   1f236:	0f b6       	in	r0, 0x3f	; 63
   1f238:	f8 94       	cli
   1f23a:	de bf       	out	0x3e, r29	; 62
   1f23c:	0f be       	out	0x3f, r0	; 63
   1f23e:	cd bf       	out	0x3d, r28	; 61
	create_new_udp_packet(strlen(name)+strlen(mode)+4,TFTP_CLIENT_PORT,TFTP_SERVER_PORT,tmp_ip);
	TFTP_DEBUG("TFTP Req sent\r\n");

	tftp_watchdogrestart();		// start watchdog

	tftp_block = TFTP_REC;
   1f240:	cf 91       	pop	r28
   1f242:	df 91       	pop	r29
   1f244:	1f 91       	pop	r17
   1f246:	0f 91       	pop	r16
   1f248:	ff 90       	pop	r15
   1f24a:	ef 90       	pop	r14
}
   1f24c:	df 90       	pop	r13
   1f24e:	cf 90       	pop	r12
   1f250:	bf 90       	pop	r11
   1f252:	af 90       	pop	r10
   1f254:	08 95       	ret

0001f256 <tftp_ack>:

//----------------------------------------------------------------------------
// acknowledges the block number stored in tftp_block
void tftp_ack(unsigned long src_ip, unsigned int src_port, TFTP_header_t *tftp_header_p)
{
   1f256:	ef 92       	push	r14
   1f258:	ff 92       	push	r15
   1f25a:	0f 93       	push	r16
   1f25c:	1f 93       	push	r17
   1f25e:	7b 01       	movw	r14, r22
   1f260:	8c 01       	movw	r16, r24
   1f262:	f9 01       	movw	r30, r18
	tftp_header_p->type = LBBL_ENDIAN_INT((int)TFTP_ACK);			// set packet type to ACK
   1f264:	80 e0       	ldi	r24, 0x00	; 0
   1f266:	94 e0       	ldi	r25, 0x04	; 4
   1f268:	91 83       	std	Z+1, r25	; 0x01
   1f26a:	80 83       	st	Z, r24
	tftp_header_p->u.ack.block = LBBL_ENDIAN_INT((int)tftp_block);	// ack last packet
   1f26c:	70 91 bb 02 	lds	r23, 0x02BB
   1f270:	60 e0       	ldi	r22, 0x00	; 0
   1f272:	80 91 bc 02 	lds	r24, 0x02BC
   1f276:	90 e0       	ldi	r25, 0x00	; 0
   1f278:	86 0f       	add	r24, r22
   1f27a:	97 1f       	adc	r25, r23
   1f27c:	93 83       	std	Z+3, r25	; 0x03
   1f27e:	82 83       	std	Z+2, r24	; 0x02
	create_new_udp_packet(4,TFTP_CLIENT_PORT,src_port,src_ip);		// send ACK
   1f280:	84 e0       	ldi	r24, 0x04	; 4
   1f282:	90 e0       	ldi	r25, 0x00	; 0
   1f284:	65 e5       	ldi	r22, 0x55	; 85
   1f286:	74 ea       	ldi	r23, 0xA4	; 164
   1f288:	98 01       	movw	r18, r16
   1f28a:	87 01       	movw	r16, r14
   1f28c:	a2 da       	rcall	.-2748   	; 0x1e7d2 <create_new_udp_packet>
   1f28e:	80 ed       	ldi	r24, 0xD0	; 208

//----------------------------------------------------------------------------
// restart countdown of the watchdog
void tftp_watchdogrestart()
{
	tftp_watchdog = TFTP_WATCHDOG;
   1f290:	97 e0       	ldi	r25, 0x07	; 7
   1f292:	90 93 b2 02 	sts	0x02B2, r25
   1f296:	80 93 b1 02 	sts	0x02B1, r24
   1f29a:	1f 91       	pop	r17
{
	tftp_header_p->type = LBBL_ENDIAN_INT((int)TFTP_ACK);			// set packet type to ACK
	tftp_header_p->u.ack.block = LBBL_ENDIAN_INT((int)tftp_block);	// ack last packet
	create_new_udp_packet(4,TFTP_CLIENT_PORT,src_port,src_ip);		// send ACK
	tftp_watchdogrestart();											// restart watchdog
}
   1f29c:	0f 91       	pop	r16
   1f29e:	ff 90       	pop	r15
   1f2a0:	ef 90       	pop	r14
   1f2a2:	08 95       	ret

0001f2a4 <tftp_get>:

//----------------------------------------------------------------------------
// called by ip stack, this function interprets the tftp-answers of the server
void tftp_get(unsigned long src_ip, unsigned int src_port)
{
   1f2a4:	8f 92       	push	r8
   1f2a6:	9f 92       	push	r9
   1f2a8:	af 92       	push	r10
   1f2aa:	bf 92       	push	r11
   1f2ac:	cf 92       	push	r12
   1f2ae:	df 92       	push	r13
   1f2b0:	ef 92       	push	r14
   1f2b2:	ff 92       	push	r15
   1f2b4:	0f 93       	push	r16
   1f2b6:	1f 93       	push	r17
   1f2b8:	cf 93       	push	r28
   1f2ba:	df 93       	push	r29
   1f2bc:	6b 01       	movw	r12, r22
   1f2be:	7c 01       	movw	r14, r24
   1f2c0:	4a 01       	movw	r8, r20
	char rc;			// return code of the flasher function

	TFTP_DEBUG("TFTP Receive, Type %i!!\r\n", LBBL_ENDIAN_INT(tftp_header_p->type) );

	// we are not in the mood, due to error in former data or because no tftp-data was requested
	if ( tftp_block == TFTP_OFF ) {
   1f2c2:	80 91 bb 02 	lds	r24, 0x02BB
   1f2c6:	90 91 bc 02 	lds	r25, 0x02BC
   1f2ca:	00 97       	sbiw	r24, 0x00	; 0
   1f2cc:	09 f4       	brne	.+2      	; 0x1f2d0 <tftp_get+0x2c>
   1f2ce:	db c0       	rjmp	.+438    	; 0x1f486 <tftp_get+0x1e2>
//		TFTP_ERROR ( "Packet w/o Req\r\n" );
		return;
	}

	//
	switch ( LBBL_ENDIAN_INT(tftp_header_p->type) ) {
   1f2d0:	20 91 e7 02 	lds	r18, 0x02E7
   1f2d4:	30 91 e8 02 	lds	r19, 0x02E8
   1f2d8:	32 27       	eor	r19, r18
   1f2da:	23 27       	eor	r18, r19
   1f2dc:	32 27       	eor	r19, r18
   1f2de:	23 30       	cpi	r18, 0x03	; 3
   1f2e0:	31 05       	cpc	r19, r1
   1f2e2:	f1 f0       	breq	.+60     	; 0x1f320 <tftp_get+0x7c>
   1f2e4:	25 30       	cpi	r18, 0x05	; 5
   1f2e6:	31 05       	cpc	r19, r1
   1f2e8:	09 f0       	breq	.+2      	; 0x1f2ec <tftp_get+0x48>
   1f2ea:	ba c0       	rjmp	.+372    	; 0x1f460 <tftp_get+0x1bc>
		case TFTP_ERR:
			TFTP_ERROR ( "Err %s\r\n", tftp_header_p->u.error.msg );
   1f2ec:	00 d0       	rcall	.+0      	; 0x1f2ee <tftp_get+0x4a>
   1f2ee:	00 d0       	rcall	.+0      	; 0x1f2f0 <tftp_get+0x4c>
   1f2f0:	8a e6       	ldi	r24, 0x6A	; 106
   1f2f2:	92 e0       	ldi	r25, 0x02	; 2
   1f2f4:	ad b7       	in	r26, 0x3d	; 61
   1f2f6:	be b7       	in	r27, 0x3e	; 62
   1f2f8:	12 96       	adiw	r26, 0x02	; 2
   1f2fa:	9c 93       	st	X, r25
   1f2fc:	8e 93       	st	-X, r24
   1f2fe:	11 97       	sbiw	r26, 0x01	; 1
   1f300:	8b ee       	ldi	r24, 0xEB	; 235
   1f302:	92 e0       	ldi	r25, 0x02	; 2
   1f304:	14 96       	adiw	r26, 0x04	; 4
   1f306:	9c 93       	st	X, r25
   1f308:	8e 93       	st	-X, r24
   1f30a:	13 97       	sbiw	r26, 0x03	; 3
   1f30c:	f3 db       	rcall	.-2074   	; 0x1eaf4 <console_write_P>
   1f30e:	10 92 bc 02 	sts	0x02BC, r1
			tftp_block = TFTP_OFF;
   1f312:	10 92 bb 02 	sts	0x02BB, r1
   1f316:	0f 90       	pop	r0
	  		ihex_appstart();
   1f318:	0f 90       	pop	r0
   1f31a:	0f 90       	pop	r0
   1f31c:	0f 90       	pop	r0
   1f31e:	9e c0       	rjmp	.+316    	; 0x1f45c <tftp_get+0x1b8>
   1f320:	20 91 ce 02 	lds	r18, 0x02CE
			break;

		case TFTP_DATA:
			data_len = UDP_DATA_END_VAR - UDP_DATA_START - 4;
   1f324:	c2 2f       	mov	r28, r18
   1f326:	d0 e0       	ldi	r29, 0x00	; 0
   1f328:	a0 97       	sbiw	r28, 0x20	; 32
   1f32a:	30 91 cd 02 	lds	r19, 0x02CD
   1f32e:	20 e0       	ldi	r18, 0x00	; 0
   1f330:	c2 0f       	add	r28, r18
   1f332:	d3 1f       	adc	r29, r19
   1f334:	20 91 e9 02 	lds	r18, 0x02E9
			block = LBBL_ENDIAN_INT(tftp_header_p->u.data.block);
   1f338:	30 91 ea 02 	lds	r19, 0x02EA
   1f33c:	32 27       	eor	r19, r18
   1f33e:	23 27       	eor	r18, r19
   1f340:	32 27       	eor	r19, r18
   1f342:	28 17       	cp	r18, r24

			TFTP_DEBUG ( "TFTP Datablock %i, Size: %i\r\n", block, data_len );

			// interpret the packet
			// warning: we are using the ethernet buffer, may this be overwritten?!? No, Int is disabled
			if ( block == tftp_block ) {	// the expected next packet?
   1f344:	39 07       	cpc	r19, r25
   1f346:	09 f0       	breq	.+2      	; 0x1f34a <tftp_get+0xa6>
   1f348:	54 c0       	rjmp	.+168    	; 0x1f3f2 <tftp_get+0x14e>
   1f34a:	8b ee       	ldi	r24, 0xEB	; 235
	tftp_watchdogrestart();											// restart watchdog
}

//----------------------------------------------------------------------------
// called by ip stack, this function interprets the tftp-answers of the server
void tftp_get(unsigned long src_ip, unsigned int src_port)
   1f34c:	a8 2e       	mov	r10, r24
   1f34e:	82 e0       	ldi	r24, 0x02	; 2
   1f350:	b8 2e       	mov	r11, r24
   1f352:	80 e0       	ldi	r24, 0x00	; 0
   1f354:	00 e0       	ldi	r16, 0x00	; 0
   1f356:	10 e0       	ldi	r17, 0x00	; 0
   1f358:	06 c0       	rjmp	.+12     	; 0x1f366 <tftp_get+0xc2>
   1f35a:	f5 01       	movw	r30, r10
			// interpret the packet
			// warning: we are using the ethernet buffer, may this be overwritten?!? No, Int is disabled
			if ( block == tftp_block ) {	// the expected next packet?
				rc = 0;
				for (i=0; (i<data_len) && !rc; i++)
					rc = ihex_flash ( tftp_header_p->u.data.data[i] );
   1f35c:	81 91       	ld	r24, Z+
   1f35e:	5f 01       	movw	r10, r30
   1f360:	65 d1       	rcall	.+714    	; 0x1f62c <ihex_flash>
   1f362:	0f 5f       	subi	r16, 0xFF	; 255
   1f364:	1f 4f       	sbci	r17, 0xFF	; 255

			// interpret the packet
			// warning: we are using the ethernet buffer, may this be overwritten?!? No, Int is disabled
			if ( block == tftp_block ) {	// the expected next packet?
				rc = 0;
				for (i=0; (i<data_len) && !rc; i++)
   1f366:	0c 17       	cp	r16, r28
   1f368:	1d 07       	cpc	r17, r29
   1f36a:	1c f4       	brge	.+6      	; 0x1f372 <tftp_get+0xce>
   1f36c:	88 23       	and	r24, r24
   1f36e:	a9 f3       	breq	.-22     	; 0x1f35a <tftp_get+0xb6>
   1f370:	02 c0       	rjmp	.+4      	; 0x1f376 <tftp_get+0xd2>
   1f372:	88 23       	and	r24, r24
   1f374:	11 f1       	breq	.+68     	; 0x1f3ba <tftp_get+0x116>
					rc = ihex_flash ( tftp_header_p->u.data.data[i] );

				if (rc) {					// error while interpreting the intel hex contents?
   1f376:	00 d0       	rcall	.+0      	; 0x1f378 <tftp_get+0xd4>
   1f378:	00 d0       	rcall	.+0      	; 0x1f37a <tftp_get+0xd6>
					TFTP_ERROR ( "Err %i@%i\r\n", (int)rc, i-1 );
   1f37a:	00 d0       	rcall	.+0      	; 0x1f37c <tftp_get+0xd8>
   1f37c:	ed b7       	in	r30, 0x3d	; 61
   1f37e:	fe b7       	in	r31, 0x3e	; 62
   1f380:	31 96       	adiw	r30, 0x01	; 1
   1f382:	23 e7       	ldi	r18, 0x73	; 115
   1f384:	32 e0       	ldi	r19, 0x02	; 2
   1f386:	ad b7       	in	r26, 0x3d	; 61
   1f388:	be b7       	in	r27, 0x3e	; 62
   1f38a:	12 96       	adiw	r26, 0x02	; 2
   1f38c:	3c 93       	st	X, r19
   1f38e:	2e 93       	st	-X, r18
   1f390:	11 97       	sbiw	r26, 0x01	; 1
   1f392:	82 83       	std	Z+2, r24	; 0x02
   1f394:	13 82       	std	Z+3, r1	; 0x03
   1f396:	01 50       	subi	r16, 0x01	; 1
   1f398:	10 40       	sbci	r17, 0x00	; 0
   1f39a:	15 83       	std	Z+5, r17	; 0x05
   1f39c:	04 83       	std	Z+4, r16	; 0x04
   1f39e:	aa db       	rcall	.-2220   	; 0x1eaf4 <console_write_P>
   1f3a0:	10 92 bc 02 	sts	0x02BC, r1
   1f3a4:	10 92 bb 02 	sts	0x02BB, r1
					tftp_block = TFTP_OFF;
   1f3a8:	ed b7       	in	r30, 0x3d	; 61
   1f3aa:	fe b7       	in	r31, 0x3e	; 62
   1f3ac:	36 96       	adiw	r30, 0x06	; 6
					return;
   1f3ae:	0f b6       	in	r0, 0x3f	; 63
   1f3b0:	f8 94       	cli
   1f3b2:	fe bf       	out	0x3e, r31	; 62
   1f3b4:	0f be       	out	0x3f, r0	; 63
   1f3b6:	ed bf       	out	0x3d, r30	; 61
   1f3b8:	66 c0       	rjmp	.+204    	; 0x1f486 <tftp_get+0x1e2>
   1f3ba:	00 d0       	rcall	.+0      	; 0x1f3bc <tftp_get+0x118>
   1f3bc:	8f e7       	ldi	r24, 0x7F	; 127
   1f3be:	92 e0       	ldi	r25, 0x02	; 2
				} else {					// everything went fine, acknowledge the block
					TFTP_MSG ( "." );
   1f3c0:	ad b7       	in	r26, 0x3d	; 61
   1f3c2:	be b7       	in	r27, 0x3e	; 62
   1f3c4:	12 96       	adiw	r26, 0x02	; 2
   1f3c6:	9c 93       	st	X, r25
   1f3c8:	8e 93       	st	-X, r24
   1f3ca:	11 97       	sbiw	r26, 0x01	; 1
   1f3cc:	93 db       	rcall	.-2266   	; 0x1eaf4 <console_write_P>
   1f3ce:	0f 90       	pop	r0
   1f3d0:	0f 90       	pop	r0
   1f3d2:	c7 01       	movw	r24, r14
   1f3d4:	b6 01       	movw	r22, r12
					tftp_ack(src_ip, src_port, tftp_header_p);
   1f3d6:	a4 01       	movw	r20, r8
   1f3d8:	27 ee       	ldi	r18, 0xE7	; 231
   1f3da:	32 e0       	ldi	r19, 0x02	; 2
   1f3dc:	3c df       	rcall	.-392    	; 0x1f256 <tftp_ack>
   1f3de:	80 91 bb 02 	lds	r24, 0x02BB
   1f3e2:	90 91 bc 02 	lds	r25, 0x02BC
   1f3e6:	01 96       	adiw	r24, 0x01	; 1
					tftp_block++;
   1f3e8:	90 93 bc 02 	sts	0x02BC, r25
   1f3ec:	80 93 bb 02 	sts	0x02BB, r24
   1f3f0:	21 c0       	rjmp	.+66     	; 0x1f434 <tftp_get+0x190>
   1f3f2:	00 d0       	rcall	.+0      	; 0x1f3f4 <tftp_get+0x150>
   1f3f4:	00 d0       	rcall	.+0      	; 0x1f3f6 <tftp_get+0x152>
   1f3f6:	00 d0       	rcall	.+0      	; 0x1f3f8 <tftp_get+0x154>
   1f3f8:	ed b7       	in	r30, 0x3d	; 61
   1f3fa:	fe b7       	in	r31, 0x3e	; 62
				}

			} else {						// wrong block number
				TFTP_ERROR ( "Block %i, %i exp.\r\n", block, tftp_block );
   1f3fc:	31 96       	adiw	r30, 0x01	; 1
   1f3fe:	41 e8       	ldi	r20, 0x81	; 129
   1f400:	52 e0       	ldi	r21, 0x02	; 2
   1f402:	ad b7       	in	r26, 0x3d	; 61
   1f404:	be b7       	in	r27, 0x3e	; 62
   1f406:	12 96       	adiw	r26, 0x02	; 2
   1f408:	5c 93       	st	X, r21
   1f40a:	4e 93       	st	-X, r20
   1f40c:	11 97       	sbiw	r26, 0x01	; 1
   1f40e:	33 83       	std	Z+3, r19	; 0x03
   1f410:	22 83       	std	Z+2, r18	; 0x02
   1f412:	95 83       	std	Z+5, r25	; 0x05
   1f414:	84 83       	std	Z+4, r24	; 0x04
   1f416:	6e db       	rcall	.-2340   	; 0x1eaf4 <console_write_P>
   1f418:	ed b7       	in	r30, 0x3d	; 61
   1f41a:	fe b7       	in	r31, 0x3e	; 62
   1f41c:	36 96       	adiw	r30, 0x06	; 6
   1f41e:	0f b6       	in	r0, 0x3f	; 63
   1f420:	f8 94       	cli
   1f422:	fe bf       	out	0x3e, r31	; 62
				tftp_ack(src_ip, src_port, tftp_header_p);	// ack the last block that was correct
   1f424:	0f be       	out	0x3f, r0	; 63
   1f426:	ed bf       	out	0x3d, r30	; 61
   1f428:	c7 01       	movw	r24, r14
   1f42a:	b6 01       	movw	r22, r12
   1f42c:	a4 01       	movw	r20, r8
   1f42e:	27 ee       	ldi	r18, 0xE7	; 231
   1f430:	32 e0       	ldi	r19, 0x02	; 2
   1f432:	11 df       	rcall	.-478    	; 0x1f256 <tftp_ack>
   1f434:	f2 e0       	ldi	r31, 0x02	; 2
   1f436:	c0 30       	cpi	r28, 0x00	; 0
   1f438:	df 07       	cpc	r29, r31
   1f43a:	29 f1       	breq	.+74     	; 0x1f486 <tftp_get+0x1e2>
   1f43c:	00 d0       	rcall	.+0      	; 0x1f43e <tftp_get+0x19a>
   1f43e:	85 e9       	ldi	r24, 0x95	; 149
   1f440:	92 e0       	ldi	r25, 0x02	; 2
			}

			// if the packet has less the 512 bytes of data transmission is over
			if ( data_len != 512 ) {
   1f442:	ad b7       	in	r26, 0x3d	; 61
   1f444:	be b7       	in	r27, 0x3e	; 62
   1f446:	12 96       	adiw	r26, 0x02	; 2
   1f448:	9c 93       	st	X, r25
			  TFTP_MSG ( "done\r\n" );
   1f44a:	8e 93       	st	-X, r24
   1f44c:	11 97       	sbiw	r26, 0x01	; 1
   1f44e:	52 db       	rcall	.-2396   	; 0x1eaf4 <console_write_P>
   1f450:	10 92 bc 02 	sts	0x02BC, r1
   1f454:	10 92 bb 02 	sts	0x02BB, r1
   1f458:	0f 90       	pop	r0
   1f45a:	0f 90       	pop	r0
   1f45c:	44 d0       	rcall	.+136    	; 0x1f4e6 <ihex_appstart>
   1f45e:	13 c0       	rjmp	.+38     	; 0x1f486 <tftp_get+0x1e2>
			  tftp_block = TFTP_OFF;
   1f460:	00 d0       	rcall	.+0      	; 0x1f462 <tftp_get+0x1be>
   1f462:	00 d0       	rcall	.+0      	; 0x1f464 <tftp_get+0x1c0>
   1f464:	8c e9       	ldi	r24, 0x9C	; 156
   1f466:	92 e0       	ldi	r25, 0x02	; 2
			  ihex_appstart();
   1f468:	ed b7       	in	r30, 0x3d	; 61
   1f46a:	fe b7       	in	r31, 0x3e	; 62
   1f46c:	92 83       	std	Z+2, r25	; 0x02
   1f46e:	81 83       	std	Z+1, r24	; 0x01
   1f470:	34 83       	std	Z+4, r19	; 0x04
			}
			break;
		default:
			TFTP_ERROR ( "Err Type %i\r\n", LBBL_ENDIAN_INT(tftp_header_p->type) );
   1f472:	23 83       	std	Z+3, r18	; 0x03
   1f474:	3f db       	rcall	.-2434   	; 0x1eaf4 <console_write_P>
   1f476:	10 92 bc 02 	sts	0x02BC, r1
   1f47a:	10 92 bb 02 	sts	0x02BB, r1
   1f47e:	0f 90       	pop	r0
   1f480:	0f 90       	pop	r0
   1f482:	0f 90       	pop	r0
   1f484:	0f 90       	pop	r0
   1f486:	df 91       	pop	r29
   1f488:	cf 91       	pop	r28
			tftp_block = TFTP_OFF;
   1f48a:	1f 91       	pop	r17
   1f48c:	0f 91       	pop	r16
   1f48e:	ff 90       	pop	r15
   1f490:	ef 90       	pop	r14
			break;
   1f492:	df 90       	pop	r13
   1f494:	cf 90       	pop	r12
   1f496:	bf 90       	pop	r11
   1f498:	af 90       	pop	r10
	}
	return;
}
   1f49a:	9f 90       	pop	r9
   1f49c:	8f 90       	pop	r8
   1f49e:	08 95       	ret

0001f4a0 <tftp_watchdogcheck>:

//----------------------------------------------------------------------------
// check if watchdog has reached the end (value <= 0)
void tftp_watchdogcheck()
{
	if ( tftp_watchdog <= 0 ) {
   1f4a0:	80 91 b1 02 	lds	r24, 0x02B1
   1f4a4:	90 91 b2 02 	lds	r25, 0x02B2
   1f4a8:	18 16       	cp	r1, r24
   1f4aa:	19 06       	cpc	r1, r25
   1f4ac:	7c f0       	brlt	.+30     	; 0x1f4cc <tftp_watchdogcheck+0x2c>
		tftp_block = TFTP_OFF;
   1f4ae:	10 92 bc 02 	sts	0x02BC, r1
   1f4b2:	10 92 bb 02 	sts	0x02BB, r1
		TFTP_ERROR ( "Tout\r\n" );
   1f4b6:	00 d0       	rcall	.+0      	; 0x1f4b8 <tftp_watchdogcheck+0x18>
   1f4b8:	8a ea       	ldi	r24, 0xAA	; 170
   1f4ba:	92 e0       	ldi	r25, 0x02	; 2
   1f4bc:	ed b7       	in	r30, 0x3d	; 61
   1f4be:	fe b7       	in	r31, 0x3e	; 62
   1f4c0:	92 83       	std	Z+2, r25	; 0x02
   1f4c2:	81 83       	std	Z+1, r24	; 0x01
   1f4c4:	17 db       	rcall	.-2514   	; 0x1eaf4 <console_write_P>
   1f4c6:	0f 90       	pop	r0
		ihex_appstart();
   1f4c8:	0f 90       	pop	r0
   1f4ca:	0d c0       	rjmp	.+26     	; 0x1f4e6 <ihex_appstart>
   1f4cc:	08 95       	ret

0001f4ce <ihex_intvector>:
// CAUTION: Do not optimize the Enable command
void ihex_intvector(char i)
{
	uint8_t temp;
	/* Get MCUCR*/
	temp = MCUCR;
   1f4ce:	95 b7       	in	r25, 0x35	; 53
   1f4d0:	29 2f       	mov	r18, r25
   1f4d2:	21 60       	ori	r18, 0x01	; 1
	if ( i == IHEX_INTVECTOR_BOOT ) {
   1f4d4:	81 30       	cpi	r24, 0x01	; 1
   1f4d6:	19 f4       	brne	.+6      	; 0x1f4de <ihex_intvector+0x10>
		/* Enable change of Interrupt Vectors */
		MCUCR = temp|(1<<IVCE);
   1f4d8:	25 bf       	out	0x35, r18	; 53
		/* Move interrupts to Boot Flash section */
		MCUCR = temp | (1<<IVSEL);
   1f4da:	92 60       	ori	r25, 0x02	; 2
   1f4dc:	02 c0       	rjmp	.+4      	; 0x1f4e2 <ihex_intvector+0x14>
	} else {
		/* Enable change of Interrupt Vectors */
		MCUCR = temp|(1<<IVCE);
   1f4de:	25 bf       	out	0x35, r18	; 53
		/* Move interrupts to Standard section */
		MCUCR = temp & ~(1<<IVSEL);
   1f4e0:	9d 7f       	andi	r25, 0xFD	; 253
   1f4e2:	95 bf       	out	0x35, r25	; 53
   1f4e4:	08 95       	ret

0001f4e6 <ihex_appstart>:

//----------------------------------------------------------------------------
// start normal application
void ihex_appstart(void)
{
	cli();								// disable interrupts
   1f4e6:	f8 94       	cli

#if USE_USART
    while(!(USR & (1<<UDRE)));			// wait for pending usart transfers
   1f4e8:	80 91 d0 00 	lds	r24, 0x00D0
   1f4ec:	85 ff       	sbrs	r24, 5
   1f4ee:	fc cf       	rjmp	.-8      	; 0x1f4e8 <ihex_appstart+0x2>
	UCR = 0; 							// disable usart and usart interrupts
   1f4f0:	10 92 d1 00 	sts	0x00D1, r1
	USR = (1<<TXC);						// clear interrupt flags
   1f4f4:	80 e4       	ldi	r24, 0x40	; 64
   1f4f6:	80 93 d0 00 	sts	0x00D0, r24
#endif

	TIMSK1 = 0;							// disable timer interrupts
   1f4fa:	10 92 6f 00 	sts	0x006F, r1
	TIFR1 = 0xFF; 						// clear interrupt flags
   1f4fe:	8f ef       	ldi	r24, 0xFF	; 255
   1f500:	86 bb       	out	0x16, r24	; 22
	TCCR1B = 0;							// disable timer
   1f502:	10 92 81 00 	sts	0x0081, r1

	SPCR = 0;							// disable SPI
   1f506:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0;
   1f508:	1d bc       	out	0x2d, r1	; 45

	ihex_intvector(IHEX_INTVECTOR_STD);	// switch back to standard interrupt vector table
   1f50a:	80 e0       	ldi	r24, 0x00	; 0
   1f50c:	e0 df       	rcall	.-64     	; 0x1f4ce <ihex_intvector>
   1f50e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

	asm volatile ( "jmp 0x0000" );		// start application
   1f512:	08 95       	ret

0001f514 <ihex_ascii2val>:

//----------------------------------------------------------------------------
// dummy converter, expects upper Letters and numbers
char ihex_ascii2val ( char c )
{
	if (c <= '9') return (c-'0');
   1f514:	8a 33       	cpi	r24, 0x3A	; 58
   1f516:	10 f4       	brcc	.+4      	; 0x1f51c <ihex_ascii2val+0x8>
   1f518:	80 53       	subi	r24, 0x30	; 48
   1f51a:	08 95       	ret
	else 		  return (c-55);
   1f51c:	87 53       	subi	r24, 0x37	; 55
}
   1f51e:	08 95       	ret

0001f520 <ihex_init>:

//----------------------------------------------------------------------------
// init this module
void ihex_init(void)
{
	ihex_linestate = IHEX_START;
   1f520:	81 e0       	ldi	r24, 0x01	; 1
   1f522:	80 93 b5 02 	sts	0x02B5, r24
}
   1f526:	08 95       	ret

0001f528 <ihex_program>:

//#define IHEX_DEBUG usart_write


char ihex_program(uint32_t addr, char dat0, char dat1 )
{
   1f528:	ff 92       	push	r15
   1f52a:	0f 93       	push	r16
   1f52c:	1f 93       	push	r17
   1f52e:	52 2f       	mov	r21, r18
	uint16_t page = addr / SPM_PAGESIZE;
	unsigned int w;

//	IHEX_DEBUG("%2x%2x@%x\r\n", (int)dat0, (int)dat1, addr );

	if ( addr >= BOOTLOADERSTARTADR )
   1f530:	60 30       	cpi	r22, 0x00	; 0
   1f532:	20 ee       	ldi	r18, 0xE0	; 224
   1f534:	72 07       	cpc	r23, r18
   1f536:	21 e0       	ldi	r18, 0x01	; 1
   1f538:	82 07       	cpc	r24, r18
   1f53a:	20 e0       	ldi	r18, 0x00	; 0
   1f53c:	92 07       	cpc	r25, r18
   1f53e:	08 f0       	brcs	.+2      	; 0x1f542 <ihex_program+0x1a>
   1f540:	6c c0       	rjmp	.+216    	; 0x1f61a <ihex_program+0xf2>
		return	IHEX_ERRADDR;		// protect yourself!

	eeprom_busy_wait();
   1f542:	f9 99       	sbic	0x1f, 1	; 31
   1f544:	fe cf       	rjmp	.-4      	; 0x1f542 <ihex_program+0x1a>
//#define IHEX_DEBUG usart_write


char ihex_program(uint32_t addr, char dat0, char dat1 )
{
	uint16_t page = addr / SPM_PAGESIZE;
   1f546:	07 2f       	mov	r16, r23
   1f548:	18 2f       	mov	r17, r24
   1f54a:	29 2f       	mov	r18, r25
   1f54c:	33 27       	eor	r19, r19
   1f54e:	d8 01       	movw	r26, r16
		return	IHEX_ERRADDR;		// protect yourself!

	eeprom_busy_wait();

	// if we change the page or got the END-line, flash the current page
	if ( ihex_lastpage != IHEX_NOPAGE
   1f550:	00 91 b3 02 	lds	r16, 0x02B3
   1f554:	10 91 b4 02 	lds	r17, 0x02B4
   1f558:	ef ef       	ldi	r30, 0xFF	; 255
   1f55a:	0f 3f       	cpi	r16, 0xFF	; 255
   1f55c:	1e 07       	cpc	r17, r30
   1f55e:	19 f1       	breq	.+70     	; 0x1f5a6 <ihex_program+0x7e>
	  && (ihex_lastpage != page || ihex_type == IHEX_TYPEEND) ) {
   1f560:	0a 17       	cp	r16, r26
   1f562:	1b 07       	cpc	r17, r27
   1f564:	21 f4       	brne	.+8      	; 0x1f56e <ihex_program+0x46>
   1f566:	20 91 08 08 	lds	r18, 0x0808
   1f56a:	21 30       	cpi	r18, 0x01	; 1
   1f56c:	e1 f4       	brne	.+56     	; 0x1f5a6 <ihex_program+0x7e>
//		IHEX_DEBUG ( "W %x ", (uint16_t)ihex_lastpage*SPM_PAGESIZE );
		boot_page_write ((uint32_t)ihex_lastpage*SPM_PAGESIZE);	// store buffer in flash
   1f56e:	20 e0       	ldi	r18, 0x00	; 0
   1f570:	30 e0       	ldi	r19, 0x00	; 0
   1f572:	32 2f       	mov	r19, r18
   1f574:	21 2f       	mov	r18, r17
   1f576:	10 2f       	mov	r17, r16
   1f578:	00 27       	eor	r16, r16
   1f57a:	e5 e0       	ldi	r30, 0x05	; 5
   1f57c:	fe 2e       	mov	r15, r30
   1f57e:	f8 01       	movw	r30, r16
   1f580:	20 93 5b 00 	sts	0x005B, r18
   1f584:	f0 92 57 00 	sts	0x0057, r15
   1f588:	e8 95       	spm
		while (boot_rww_busy())
			boot_rww_enable();
   1f58a:	21 e1       	ldi	r18, 0x11	; 17
	// if we change the page or got the END-line, flash the current page
	if ( ihex_lastpage != IHEX_NOPAGE
	  && (ihex_lastpage != page || ihex_type == IHEX_TYPEEND) ) {
//		IHEX_DEBUG ( "W %x ", (uint16_t)ihex_lastpage*SPM_PAGESIZE );
		boot_page_write ((uint32_t)ihex_lastpage*SPM_PAGESIZE);	// store buffer in flash
		while (boot_rww_busy())
   1f58c:	03 c0       	rjmp	.+6      	; 0x1f594 <ihex_program+0x6c>
			boot_rww_enable();
   1f58e:	20 93 57 00 	sts	0x0057, r18
   1f592:	e8 95       	spm
	// if we change the page or got the END-line, flash the current page
	if ( ihex_lastpage != IHEX_NOPAGE
	  && (ihex_lastpage != page || ihex_type == IHEX_TYPEEND) ) {
//		IHEX_DEBUG ( "W %x ", (uint16_t)ihex_lastpage*SPM_PAGESIZE );
		boot_page_write ((uint32_t)ihex_lastpage*SPM_PAGESIZE);	// store buffer in flash
		while (boot_rww_busy())
   1f594:	07 b6       	in	r0, 0x37	; 55
   1f596:	06 fc       	sbrc	r0, 6
   1f598:	fa cf       	rjmp	.-12     	; 0x1f58e <ihex_program+0x66>
			boot_rww_enable();
		ihex_lastpage = IHEX_NOPAGE;					// page is done, forget it
   1f59a:	2f ef       	ldi	r18, 0xFF	; 255
   1f59c:	3f ef       	ldi	r19, 0xFF	; 255
   1f59e:	30 93 b4 02 	sts	0x02B4, r19
   1f5a2:	20 93 b3 02 	sts	0x02B3, r18
	}

	switch ( ihex_type ) {
   1f5a6:	20 91 08 08 	lds	r18, 0x0808
   1f5aa:	22 23       	and	r18, r18
   1f5ac:	41 f0       	breq	.+16     	; 0x1f5be <ihex_program+0x96>
   1f5ae:	21 30       	cpi	r18, 0x01	; 1
   1f5b0:	09 f0       	breq	.+2      	; 0x1f5b4 <ihex_program+0x8c>
   1f5b2:	35 c0       	rjmp	.+106    	; 0x1f61e <ihex_program+0xf6>
		case IHEX_TYPEEND:
			boot_rww_enable();			// reenable RWW-section
   1f5b4:	81 e1       	ldi	r24, 0x11	; 17
   1f5b6:	80 93 57 00 	sts	0x0057, r24
   1f5ba:	e8 95       	spm
   1f5bc:	32 c0       	rjmp	.+100    	; 0x1f622 <ihex_program+0xfa>
			break;
		case IHEX_TYPEDATA:
			if ( ihex_len == 0 )		// nothing to do...
   1f5be:	20 91 f2 07 	lds	r18, 0x07F2
   1f5c2:	22 23       	and	r18, r18
   1f5c4:	71 f1       	breq	.+92     	; 0x1f622 <ihex_program+0xfa>
				break;
			if ( ihex_lastpage == IHEX_NOPAGE )	{	// page is not prepared for reprogramming
   1f5c6:	20 91 b3 02 	lds	r18, 0x02B3
   1f5ca:	30 91 b4 02 	lds	r19, 0x02B4
   1f5ce:	ef ef       	ldi	r30, 0xFF	; 255
   1f5d0:	2f 3f       	cpi	r18, 0xFF	; 255
   1f5d2:	3e 07       	cpc	r19, r30
   1f5d4:	99 f4       	brne	.+38     	; 0x1f5fc <ihex_program+0xd4>
//				IHEX_DEBUG ( "E %x ", addr );
				boot_page_erase (addr);				// erase page we have data for
   1f5d6:	23 e0       	ldi	r18, 0x03	; 3
   1f5d8:	fb 01       	movw	r30, r22
   1f5da:	80 93 5b 00 	sts	0x005B, r24
   1f5de:	20 93 57 00 	sts	0x0057, r18
   1f5e2:	e8 95       	spm
				while (boot_rww_busy())
					boot_rww_enable();
   1f5e4:	21 e1       	ldi	r18, 0x11	; 17
			if ( ihex_len == 0 )		// nothing to do...
				break;
			if ( ihex_lastpage == IHEX_NOPAGE )	{	// page is not prepared for reprogramming
//				IHEX_DEBUG ( "E %x ", addr );
				boot_page_erase (addr);				// erase page we have data for
				while (boot_rww_busy())
   1f5e6:	03 c0       	rjmp	.+6      	; 0x1f5ee <ihex_program+0xc6>
					boot_rww_enable();
   1f5e8:	20 93 57 00 	sts	0x0057, r18
   1f5ec:	e8 95       	spm
			if ( ihex_len == 0 )		// nothing to do...
				break;
			if ( ihex_lastpage == IHEX_NOPAGE )	{	// page is not prepared for reprogramming
//				IHEX_DEBUG ( "E %x ", addr );
				boot_page_erase (addr);				// erase page we have data for
				while (boot_rww_busy())
   1f5ee:	07 b6       	in	r0, 0x37	; 55
   1f5f0:	06 fc       	sbrc	r0, 6
   1f5f2:	fa cf       	rjmp	.-12     	; 0x1f5e8 <ihex_program+0xc0>
					boot_rww_enable();
				ihex_lastpage = page;				// remember the page we have prepared
   1f5f4:	b0 93 b4 02 	sts	0x02B4, r27
   1f5f8:	a0 93 b3 02 	sts	0x02B3, r26
			}
			w = dat0;					// Set up little-endian word.
			w += dat1 << 8;
   1f5fc:	f5 2f       	mov	r31, r21
   1f5fe:	e0 e0       	ldi	r30, 0x00	; 0
   1f600:	9f 01       	movw	r18, r30
   1f602:	24 0f       	add	r18, r20
   1f604:	31 1d       	adc	r19, r1
			boot_page_fill ( addr, w );	// write it to buffer
   1f606:	41 e0       	ldi	r20, 0x01	; 1
   1f608:	09 01       	movw	r0, r18
   1f60a:	fb 01       	movw	r30, r22
   1f60c:	80 93 5b 00 	sts	0x005B, r24
   1f610:	40 93 57 00 	sts	0x0057, r20
   1f614:	e8 95       	spm
   1f616:	11 24       	eor	r1, r1
   1f618:	04 c0       	rjmp	.+8      	; 0x1f622 <ihex_program+0xfa>
	unsigned int w;

//	IHEX_DEBUG("%2x%2x@%x\r\n", (int)dat0, (int)dat1, addr );

	if ( addr >= BOOTLOADERSTARTADR )
		return	IHEX_ERRADDR;		// protect yourself!
   1f61a:	87 e0       	ldi	r24, 0x07	; 7
   1f61c:	03 c0       	rjmp	.+6      	; 0x1f624 <ihex_program+0xfc>
			w += dat1 << 8;
			boot_page_fill ( addr, w );	// write it to buffer
//			IHEX_DEBUG ("%4x@%4x ", w, addr );
			break;
		default:
			return IHEX_ERRTYPE;	// unsuported type of data
   1f61e:	86 e0       	ldi	r24, 0x06	; 6
   1f620:	01 c0       	rjmp	.+2      	; 0x1f624 <ihex_program+0xfc>
	}

	return IHEX_NOERR;
   1f622:	80 e0       	ldi	r24, 0x00	; 0
}
   1f624:	1f 91       	pop	r17
   1f626:	0f 91       	pop	r16
   1f628:	ff 90       	pop	r15
   1f62a:	08 95       	ret

0001f62c <ihex_flash>:
// will be kept
//
// the END-line of IntelHex is needed to complete the flashing of the last page
//
char ihex_flash ( char c )
{
   1f62c:	ff 92       	push	r15
   1f62e:	0f 93       	push	r16
   1f630:	1f 93       	push	r17
   1f632:	cf 93       	push	r28
   1f634:	df 93       	push	r29
	unsigned char sreg;		// stores the INT-state while int is disabled
	char rc;				// return code
	int i;

	c = toupper(c);
   1f636:	90 e0       	ldi	r25, 0x00	; 0
   1f638:	6b d1       	rcall	.+726    	; 0x1f910 <toupper>
   1f63a:	90 91 b5 02 	lds	r25, 0x02B5

//	IHEX_DEBUG ( "IHEX %c, State %i\r\n", c, ihex_linestate );

	// only 0..9 and A..F is valid inside the line
	if ( !(ihex_linestate == IHEX_START || ihex_linestate == IHEX_END) )
   1f63e:	91 30       	cpi	r25, 0x01	; 1
   1f640:	c1 f1       	breq	.+112    	; 0x1f6b2 <ihex_flash+0x86>
   1f642:	9b 30       	cpi	r25, 0x0B	; 11
   1f644:	09 f4       	brne	.+2      	; 0x1f648 <ihex_flash+0x1c>
   1f646:	de c0       	rjmp	.+444    	; 0x1f804 <ihex_flash+0x1d8>
   1f648:	80 33       	cpi	r24, 0x30	; 48
		if ( (c < '0') || ( c > '9' && c < 'A' ) || ( c > 'F' ) ) {
   1f64a:	30 f0       	brcs	.+12     	; 0x1f658 <ihex_flash+0x2c>
   1f64c:	28 2f       	mov	r18, r24
   1f64e:	2a 53       	subi	r18, 0x3A	; 58
   1f650:	27 30       	cpi	r18, 0x07	; 7
   1f652:	10 f0       	brcs	.+4      	; 0x1f658 <ihex_flash+0x2c>
   1f654:	87 34       	cpi	r24, 0x47	; 71
   1f656:	20 f0       	brcs	.+8      	; 0x1f660 <ihex_flash+0x34>
   1f658:	81 e0       	ldi	r24, 0x01	; 1
			ihex_linestate = IHEX_START;
   1f65a:	80 93 b5 02 	sts	0x02B5, r24
   1f65e:	52 c1       	rjmp	.+676    	; 0x1f904 <ihex_flash+0x2d8>
			return IHEX_ERRCHAR;
   1f660:	96 30       	cpi	r25, 0x06	; 6
		}

	// interpret the char
	switch ( ihex_linestate ) {
   1f662:	09 f4       	brne	.+2      	; 0x1f666 <ihex_flash+0x3a>
   1f664:	77 c0       	rjmp	.+238    	; 0x1f754 <ihex_flash+0x128>
   1f666:	97 30       	cpi	r25, 0x07	; 7
   1f668:	88 f4       	brcc	.+34     	; 0x1f68c <ihex_flash+0x60>
   1f66a:	93 30       	cpi	r25, 0x03	; 3
   1f66c:	c9 f1       	breq	.+114    	; 0x1f6e0 <ihex_flash+0xb4>
   1f66e:	94 30       	cpi	r25, 0x04	; 4
   1f670:	30 f4       	brcc	.+12     	; 0x1f67e <ihex_flash+0x52>
   1f672:	91 30       	cpi	r25, 0x01	; 1
   1f674:	f1 f0       	breq	.+60     	; 0x1f6b2 <ihex_flash+0x86>
   1f676:	92 30       	cpi	r25, 0x02	; 2
   1f678:	09 f0       	breq	.+2      	; 0x1f67c <ihex_flash+0x50>
   1f67a:	3f c1       	rjmp	.+638    	; 0x1f8fa <ihex_flash+0x2ce>
   1f67c:	2a c0       	rjmp	.+84     	; 0x1f6d2 <ihex_flash+0xa6>
   1f67e:	94 30       	cpi	r25, 0x04	; 4
   1f680:	09 f4       	brne	.+2      	; 0x1f684 <ihex_flash+0x58>
   1f682:	3f c0       	rjmp	.+126    	; 0x1f702 <ihex_flash+0xd6>
   1f684:	95 30       	cpi	r25, 0x05	; 5
   1f686:	09 f0       	breq	.+2      	; 0x1f68a <ihex_flash+0x5e>
   1f688:	38 c1       	rjmp	.+624    	; 0x1f8fa <ihex_flash+0x2ce>
   1f68a:	5d c0       	rjmp	.+186    	; 0x1f746 <ihex_flash+0x11a>
   1f68c:	99 30       	cpi	r25, 0x09	; 9
   1f68e:	09 f4       	brne	.+2      	; 0x1f692 <ihex_flash+0x66>
   1f690:	9c c0       	rjmp	.+312    	; 0x1f7ca <ihex_flash+0x19e>
   1f692:	9a 30       	cpi	r25, 0x0A	; 10
   1f694:	38 f4       	brcc	.+14     	; 0x1f6a4 <ihex_flash+0x78>
   1f696:	97 30       	cpi	r25, 0x07	; 7
   1f698:	09 f4       	brne	.+2      	; 0x1f69c <ihex_flash+0x70>
   1f69a:	6c c0       	rjmp	.+216    	; 0x1f774 <ihex_flash+0x148>
   1f69c:	98 30       	cpi	r25, 0x08	; 8
   1f69e:	09 f0       	breq	.+2      	; 0x1f6a2 <ihex_flash+0x76>
   1f6a0:	2c c1       	rjmp	.+600    	; 0x1f8fa <ihex_flash+0x2ce>
   1f6a2:	74 c0       	rjmp	.+232    	; 0x1f78c <ihex_flash+0x160>
   1f6a4:	9a 30       	cpi	r25, 0x0A	; 10
   1f6a6:	09 f4       	brne	.+2      	; 0x1f6aa <ihex_flash+0x7e>
   1f6a8:	99 c0       	rjmp	.+306    	; 0x1f7dc <ihex_flash+0x1b0>
   1f6aa:	9b 30       	cpi	r25, 0x0B	; 11
   1f6ac:	09 f0       	breq	.+2      	; 0x1f6b0 <ihex_flash+0x84>
   1f6ae:	25 c1       	rjmp	.+586    	; 0x1f8fa <ihex_flash+0x2ce>
   1f6b0:	a9 c0       	rjmp	.+338    	; 0x1f804 <ihex_flash+0x1d8>
   1f6b2:	8a 33       	cpi	r24, 0x3A	; 58
		case IHEX_START:						// start byte ':'
			if ( c == IHEX_STARTBYTE ) {
   1f6b4:	09 f0       	breq	.+2      	; 0x1f6b8 <ihex_flash+0x8c>
   1f6b6:	23 c1       	rjmp	.+582    	; 0x1f8fe <ihex_flash+0x2d2>
   1f6b8:	83 e0       	ldi	r24, 0x03	; 3
				ihex_addrbyte = 3;
   1f6ba:	80 93 09 08 	sts	0x0809, r24
   1f6be:	10 92 f6 07 	sts	0x07F6, r1
				ihex_addr = 0;
   1f6c2:	10 92 f5 07 	sts	0x07F5, r1
   1f6c6:	10 92 f4 07 	sts	0x07F4, r1
				ihex_dataidx = 0;
   1f6ca:	10 92 f3 07 	sts	0x07F3, r1
   1f6ce:	82 e0       	ldi	r24, 0x02	; 2
				ihex_linestate = IHEX_LENH;
   1f6d0:	82 c0       	rjmp	.+260    	; 0x1f7d6 <ihex_flash+0x1aa>
   1f6d2:	20 df       	rcall	.-448    	; 0x1f514 <ihex_ascii2val>
			}
			break;
		case IHEX_LENH:							// high nibble of length
			ihex_len = ihex_ascii2val(c) << 4;
   1f6d4:	82 95       	swap	r24
   1f6d6:	80 7f       	andi	r24, 0xF0	; 240
   1f6d8:	80 93 f2 07 	sts	0x07F2, r24
   1f6dc:	83 e0       	ldi	r24, 0x03	; 3
   1f6de:	7b c0       	rjmp	.+246    	; 0x1f7d6 <ihex_flash+0x1aa>
			ihex_linestate = IHEX_LENL;
   1f6e0:	19 df       	rcall	.-462    	; 0x1f514 <ihex_ascii2val>
   1f6e2:	90 91 f2 07 	lds	r25, 0x07F2
			break;
		case IHEX_LENL:							// low nibble of length
			ihex_len += ihex_ascii2val(c);
   1f6e6:	98 0f       	add	r25, r24
   1f6e8:	90 93 f2 07 	sts	0x07F2, r25
   1f6ec:	90 93 07 08 	sts	0x0807, r25
   1f6f0:	91 31       	cpi	r25, 0x11	; 17
			ihex_checksum = ihex_len;			// start calculating the checksum
   1f6f2:	10 f4       	brcc	.+4      	; 0x1f6f8 <ihex_flash+0xcc>
   1f6f4:	84 e0       	ldi	r24, 0x04	; 4
			if ( ihex_len <= IHEX_DATAMAX ) {
   1f6f6:	6f c0       	rjmp	.+222    	; 0x1f7d6 <ihex_flash+0x1aa>
   1f6f8:	81 e0       	ldi	r24, 0x01	; 1
				ihex_linestate = IHEX_ADDR;
   1f6fa:	80 93 b5 02 	sts	0x02B5, r24
			} else {
				ihex_linestate = IHEX_START;
   1f6fe:	82 e0       	ldi	r24, 0x02	; 2
   1f700:	01 c1       	rjmp	.+514    	; 0x1f904 <ihex_flash+0x2d8>
   1f702:	08 df       	rcall	.-496    	; 0x1f514 <ihex_ascii2val>
				return IHEX_ERRLEN;
   1f704:	20 91 f5 07 	lds	r18, 0x07F5
			}
			break;
		case IHEX_ADDR:							// one of the address bytes
			ihex_addr <<= 4;					// shift the result of the nibbles before
			ihex_addr += ihex_ascii2val(c);		// add the current nibble
   1f708:	30 91 f6 07 	lds	r19, 0x07F6
				ihex_linestate = IHEX_START;
				return IHEX_ERRLEN;
			}
			break;
		case IHEX_ADDR:							// one of the address bytes
			ihex_addr <<= 4;					// shift the result of the nibbles before
   1f70c:	04 e0       	ldi	r16, 0x04	; 4
   1f70e:	22 0f       	add	r18, r18
   1f710:	33 1f       	adc	r19, r19
   1f712:	0a 95       	dec	r16
   1f714:	e1 f7       	brne	.-8      	; 0x1f70e <ihex_flash+0xe2>
   1f716:	28 0f       	add	r18, r24
   1f718:	31 1d       	adc	r19, r1
   1f71a:	30 93 f6 07 	sts	0x07F6, r19
			ihex_addr += ihex_ascii2val(c);		// add the current nibble
   1f71e:	20 93 f5 07 	sts	0x07F5, r18
   1f722:	80 91 09 08 	lds	r24, 0x0809
   1f726:	80 fd       	sbrc	r24, 0
   1f728:	05 c0       	rjmp	.+10     	; 0x1f734 <ihex_flash+0x108>
			if ( !(ihex_addrbyte & 0x01) ) {	// calc checksum for second and forth byte of addr
   1f72a:	90 91 07 08 	lds	r25, 0x0807
   1f72e:	92 0f       	add	r25, r18
   1f730:	90 93 07 08 	sts	0x0807, r25
				ihex_checksum += (ihex_addr & 0xff);
   1f734:	98 2f       	mov	r25, r24
   1f736:	91 50       	subi	r25, 0x01	; 1
   1f738:	90 93 09 08 	sts	0x0809, r25
			}
			if ( !(ihex_addrbyte--) )			// last byte of address processed?
   1f73c:	88 23       	and	r24, r24
   1f73e:	09 f0       	breq	.+2      	; 0x1f742 <ihex_flash+0x116>
   1f740:	de c0       	rjmp	.+444    	; 0x1f8fe <ihex_flash+0x2d2>
   1f742:	85 e0       	ldi	r24, 0x05	; 5
   1f744:	48 c0       	rjmp	.+144    	; 0x1f7d6 <ihex_flash+0x1aa>
   1f746:	e6 de       	rcall	.-564    	; 0x1f514 <ihex_ascii2val>
   1f748:	82 95       	swap	r24
				ihex_linestate = IHEX_TYPEH;	// go to next state
   1f74a:	80 7f       	andi	r24, 0xF0	; 240
   1f74c:	80 93 08 08 	sts	0x0808, r24
			break;
		case IHEX_TYPEH:						// high nibble of type
			ihex_type = ihex_ascii2val(c) << 4;
   1f750:	86 e0       	ldi	r24, 0x06	; 6
   1f752:	41 c0       	rjmp	.+130    	; 0x1f7d6 <ihex_flash+0x1aa>
   1f754:	df de       	rcall	.-578    	; 0x1f514 <ihex_ascii2val>
   1f756:	90 91 08 08 	lds	r25, 0x0808
			ihex_linestate = IHEX_TYPEL;
   1f75a:	98 0f       	add	r25, r24
   1f75c:	90 93 08 08 	sts	0x0808, r25
			break;
		case IHEX_TYPEL:						// low nibble of type
			ihex_type += ihex_ascii2val(c);
   1f760:	80 91 07 08 	lds	r24, 0x0807
   1f764:	89 0f       	add	r24, r25
   1f766:	80 93 07 08 	sts	0x0807, r24
   1f76a:	80 91 f2 07 	lds	r24, 0x07F2
			ihex_checksum += ihex_type;			// calculate the checksum
   1f76e:	88 23       	and	r24, r24
   1f770:	51 f1       	breq	.+84     	; 0x1f7c6 <ihex_flash+0x19a>
   1f772:	27 c0       	rjmp	.+78     	; 0x1f7c2 <ihex_flash+0x196>
   1f774:	cf de       	rcall	.-610    	; 0x1f514 <ihex_ascii2val>
			ihex_linestate = ( ihex_len )?IHEX_DATAH:IHEX_CHECKH;
   1f776:	e0 91 f3 07 	lds	r30, 0x07F3
   1f77a:	f0 91 f4 07 	lds	r31, 0x07F4
   1f77e:	e9 50       	subi	r30, 0x09	; 9
			break;
		case IHEX_DATAH:						// high nibble of one data byte
			ihex_data[ihex_dataidx] = ihex_ascii2val(c) << 4;
   1f780:	f8 4f       	sbci	r31, 0xF8	; 248
   1f782:	82 95       	swap	r24
   1f784:	80 7f       	andi	r24, 0xF0	; 240
   1f786:	80 83       	st	Z, r24
   1f788:	88 e0       	ldi	r24, 0x08	; 8
   1f78a:	25 c0       	rjmp	.+74     	; 0x1f7d6 <ihex_flash+0x1aa>
   1f78c:	c0 91 f3 07 	lds	r28, 0x07F3
   1f790:	d0 91 f4 07 	lds	r29, 0x07F4
   1f794:	bf de       	rcall	.-642    	; 0x1f514 <ihex_ascii2val>
			ihex_linestate = IHEX_DATAL;
   1f796:	fe 01       	movw	r30, r28
   1f798:	e9 50       	subi	r30, 0x09	; 9
			break;
		case IHEX_DATAL:						// low nibble of one data byte
			ihex_data[ihex_dataidx] += ihex_ascii2val(c);
   1f79a:	f8 4f       	sbci	r31, 0xF8	; 248
   1f79c:	90 81       	ld	r25, Z
   1f79e:	98 0f       	add	r25, r24
   1f7a0:	90 83       	st	Z, r25
   1f7a2:	80 91 07 08 	lds	r24, 0x0807
   1f7a6:	89 0f       	add	r24, r25
   1f7a8:	80 93 07 08 	sts	0x0807, r24
   1f7ac:	21 96       	adiw	r28, 0x01	; 1
   1f7ae:	d0 93 f4 07 	sts	0x07F4, r29
			ihex_checksum += ihex_data[ihex_dataidx];
   1f7b2:	c0 93 f3 07 	sts	0x07F3, r28
   1f7b6:	80 91 f2 07 	lds	r24, 0x07F2
   1f7ba:	90 e0       	ldi	r25, 0x00	; 0
												// loop for next data byte or terminate data
			ihex_linestate = ( ++ihex_dataidx < ihex_len )?IHEX_DATAH:IHEX_CHECKH;
   1f7bc:	c8 17       	cp	r28, r24
   1f7be:	d9 07       	cpc	r29, r25
   1f7c0:	10 f4       	brcc	.+4      	; 0x1f7c6 <ihex_flash+0x19a>
   1f7c2:	87 e0       	ldi	r24, 0x07	; 7
   1f7c4:	08 c0       	rjmp	.+16     	; 0x1f7d6 <ihex_flash+0x1aa>
   1f7c6:	89 e0       	ldi	r24, 0x09	; 9
   1f7c8:	06 c0       	rjmp	.+12     	; 0x1f7d6 <ihex_flash+0x1aa>
   1f7ca:	a4 de       	rcall	.-696    	; 0x1f514 <ihex_ascii2val>
   1f7cc:	82 95       	swap	r24
   1f7ce:	80 7f       	andi	r24, 0xF0	; 240
   1f7d0:	80 93 0e 08 	sts	0x080E, r24
   1f7d4:	8a e0       	ldi	r24, 0x0A	; 10
   1f7d6:	80 93 b5 02 	sts	0x02B5, r24
			break;
		case IHEX_CHECKH:						// high nibble of checksum
			ihex_check = ihex_ascii2val(c) << 4;
   1f7da:	91 c0       	rjmp	.+290    	; 0x1f8fe <ihex_flash+0x2d2>
   1f7dc:	9b de       	rcall	.-714    	; 0x1f514 <ihex_ascii2val>
   1f7de:	90 91 0e 08 	lds	r25, 0x080E
   1f7e2:	98 0f       	add	r25, r24
   1f7e4:	90 93 0e 08 	sts	0x080E, r25
			ihex_linestate = IHEX_CHECKL;
   1f7e8:	80 91 07 08 	lds	r24, 0x0807
   1f7ec:	89 0f       	add	r24, r25
			break;
		case IHEX_CHECKL:						// low nibble of checksum
			ihex_check += ihex_ascii2val(c);
   1f7ee:	80 93 07 08 	sts	0x0807, r24
   1f7f2:	88 23       	and	r24, r24
   1f7f4:	29 f0       	breq	.+10     	; 0x1f800 <ihex_flash+0x1d4>
   1f7f6:	81 e0       	ldi	r24, 0x01	; 1
   1f7f8:	80 93 b5 02 	sts	0x02B5, r24
			ihex_checksum += ihex_check;		// calculate the checksum
   1f7fc:	84 e0       	ldi	r24, 0x04	; 4
   1f7fe:	82 c0       	rjmp	.+260    	; 0x1f904 <ihex_flash+0x2d8>
   1f800:	8b e0       	ldi	r24, 0x0B	; 11
   1f802:	e9 cf       	rjmp	.-46     	; 0x1f7d6 <ihex_flash+0x1aa>
   1f804:	91 e0       	ldi	r25, 0x01	; 1
			if ( ihex_checksum ) {				// checksum should be zero in this state
   1f806:	90 93 b5 02 	sts	0x02B5, r25
				IHEX_DEBUG ( "IHEX wrong Checksum %x!\n\r", ihex_checksum );
				ihex_linestate = IHEX_START;
   1f80a:	8a 30       	cpi	r24, 0x0A	; 10
   1f80c:	19 f0       	breq	.+6      	; 0x1f814 <ihex_flash+0x1e8>
   1f80e:	8d 30       	cpi	r24, 0x0D	; 13
				return IHEX_ERRCHECK;
   1f810:	09 f0       	breq	.+2      	; 0x1f814 <ihex_flash+0x1e8>
   1f812:	77 c0       	rjmp	.+238    	; 0x1f902 <ihex_flash+0x2d6>
			}
			ihex_linestate = IHEX_END;
   1f814:	ff b6       	in	r15, 0x3f	; 63
   1f816:	f8 94       	cli
			break;
		case IHEX_END:
			ihex_linestate = IHEX_START;		// we are starting a new line
   1f818:	80 91 08 08 	lds	r24, 0x0808
   1f81c:	81 30       	cpi	r24, 0x01	; 1
			if ( c == 0x0a || c == 0x0d ) {		// line is terminated
   1f81e:	d1 f1       	breq	.+116    	; 0x1f894 <ihex_flash+0x268>
   1f820:	81 30       	cpi	r24, 0x01	; 1
   1f822:	38 f0       	brcs	.+14     	; 0x1f832 <ihex_flash+0x206>
   1f824:	82 30       	cpi	r24, 0x02	; 2
   1f826:	09 f4       	brne	.+2      	; 0x1f82a <ihex_flash+0x1fe>
				IHEX_DEBUG ( "IHEX Hurra!\n\r" );
				sreg = SREG;
   1f828:	4b c0       	rjmp	.+150    	; 0x1f8c0 <ihex_flash+0x294>
				cli();
   1f82a:	83 30       	cpi	r24, 0x03	; 3
				rc = 0;
				switch ( ihex_type ) {
   1f82c:	09 f0       	breq	.+2      	; 0x1f830 <ihex_flash+0x204>
   1f82e:	62 c0       	rjmp	.+196    	; 0x1f8f4 <ihex_flash+0x2c8>
   1f830:	5f c0       	rjmp	.+190    	; 0x1f8f0 <ihex_flash+0x2c4>
   1f832:	c7 ef       	ldi	r28, 0xF7	; 247
   1f834:	d7 e0       	ldi	r29, 0x07	; 7
   1f836:	00 e0       	ldi	r16, 0x00	; 0
   1f838:	10 e0       	ldi	r17, 0x00	; 0
   1f83a:	80 e0       	ldi	r24, 0x00	; 0
   1f83c:	22 c0       	rjmp	.+68     	; 0x1f882 <ihex_flash+0x256>
   1f83e:	60 91 f5 07 	lds	r22, 0x07F5
   1f842:	70 91 f6 07 	lds	r23, 0x07F6
   1f846:	80 e0       	ldi	r24, 0x00	; 0
   1f848:	90 e0       	ldi	r25, 0x00	; 0
   1f84a:	20 91 0a 08 	lds	r18, 0x080A
   1f84e:	30 91 0b 08 	lds	r19, 0x080B
					case IHEX_TYPEDATA:
						for ( i=0; (i<ihex_len) && (!rc); i+=2, ihex_addr+=2 )
				  			rc = ihex_program (ihex_addr + ihex_addr_offset, ihex_data[i], ihex_data[i+1]);
   1f852:	40 91 0c 08 	lds	r20, 0x080C
   1f856:	50 91 0d 08 	lds	r21, 0x080D
   1f85a:	62 0f       	add	r22, r18
   1f85c:	73 1f       	adc	r23, r19
   1f85e:	84 1f       	adc	r24, r20
   1f860:	95 1f       	adc	r25, r21
   1f862:	48 81       	ld	r20, Y
   1f864:	29 81       	ldd	r18, Y+1	; 0x01
   1f866:	60 de       	rcall	.-832    	; 0x1f528 <ihex_program>
   1f868:	0e 5f       	subi	r16, 0xFE	; 254
   1f86a:	1f 4f       	sbci	r17, 0xFF	; 255
   1f86c:	20 91 f5 07 	lds	r18, 0x07F5
   1f870:	30 91 f6 07 	lds	r19, 0x07F6
   1f874:	2e 5f       	subi	r18, 0xFE	; 254
   1f876:	3f 4f       	sbci	r19, 0xFF	; 255
   1f878:	30 93 f6 07 	sts	0x07F6, r19
   1f87c:	20 93 f5 07 	sts	0x07F5, r18
				sreg = SREG;
				cli();
				rc = 0;
				switch ( ihex_type ) {
					case IHEX_TYPEDATA:
						for ( i=0; (i<ihex_len) && (!rc); i+=2, ihex_addr+=2 )
   1f880:	22 96       	adiw	r28, 0x02	; 2
   1f882:	20 91 f2 07 	lds	r18, 0x07F2
   1f886:	30 e0       	ldi	r19, 0x00	; 0
   1f888:	02 17       	cp	r16, r18
   1f88a:	13 07       	cpc	r17, r19
   1f88c:	a4 f5       	brge	.+104    	; 0x1f8f6 <ihex_flash+0x2ca>
   1f88e:	88 23       	and	r24, r24
   1f890:	b1 f2       	breq	.-84     	; 0x1f83e <ihex_flash+0x212>
   1f892:	31 c0       	rjmp	.+98     	; 0x1f8f6 <ihex_flash+0x2ca>
   1f894:	60 91 f5 07 	lds	r22, 0x07F5
   1f898:	70 91 f6 07 	lds	r23, 0x07F6
   1f89c:	80 e0       	ldi	r24, 0x00	; 0
   1f89e:	90 e0       	ldi	r25, 0x00	; 0
   1f8a0:	20 91 0a 08 	lds	r18, 0x080A
   1f8a4:	30 91 0b 08 	lds	r19, 0x080B
   1f8a8:	40 91 0c 08 	lds	r20, 0x080C
				  			rc = ihex_program (ihex_addr + ihex_addr_offset, ihex_data[i], ihex_data[i+1]);
				  		break;
				  	case IHEX_TYPEEND:
				  		rc = ihex_program (ihex_addr + ihex_addr_offset, 0, 0);	// complete flash process of last page
   1f8ac:	50 91 0d 08 	lds	r21, 0x080D
   1f8b0:	62 0f       	add	r22, r18
   1f8b2:	73 1f       	adc	r23, r19
   1f8b4:	84 1f       	adc	r24, r20
   1f8b6:	95 1f       	adc	r25, r21
   1f8b8:	40 e0       	ldi	r20, 0x00	; 0
   1f8ba:	20 e0       	ldi	r18, 0x00	; 0
   1f8bc:	35 de       	rcall	.-918    	; 0x1f528 <ihex_program>
   1f8be:	1b c0       	rjmp	.+54     	; 0x1f8f6 <ihex_flash+0x2ca>
   1f8c0:	90 91 f7 07 	lds	r25, 0x07F7
   1f8c4:	80 e0       	ldi	r24, 0x00	; 0
   1f8c6:	20 91 f8 07 	lds	r18, 0x07F8
   1f8ca:	82 0f       	add	r24, r18
   1f8cc:	91 1d       	adc	r25, r1
   1f8ce:	a0 e0       	ldi	r26, 0x00	; 0
   1f8d0:	b0 e0       	ldi	r27, 0x00	; 0
   1f8d2:	14 e0       	ldi	r17, 0x04	; 4
   1f8d4:	88 0f       	add	r24, r24
				  		break;
   1f8d6:	99 1f       	adc	r25, r25
				  	case IHEX_TYPE_EXTSEG:
				  		ihex_addr_offset = ((uint16_t)ihex_data[0] << 8) + ihex_data[1];
   1f8d8:	aa 1f       	adc	r26, r26
   1f8da:	bb 1f       	adc	r27, r27
   1f8dc:	1a 95       	dec	r17
   1f8de:	d1 f7       	brne	.-12     	; 0x1f8d4 <ihex_flash+0x2a8>
   1f8e0:	80 93 0a 08 	sts	0x080A, r24
   1f8e4:	90 93 0b 08 	sts	0x080B, r25
   1f8e8:	a0 93 0c 08 	sts	0x080C, r26
				  		ihex_addr_offset <<= 4;
   1f8ec:	b0 93 0d 08 	sts	0x080D, r27
   1f8f0:	80 e0       	ldi	r24, 0x00	; 0
   1f8f2:	01 c0       	rjmp	.+2      	; 0x1f8f6 <ihex_flash+0x2ca>
   1f8f4:	86 e0       	ldi	r24, 0x06	; 6
   1f8f6:	ff be       	out	0x3f, r15	; 63
   1f8f8:	05 c0       	rjmp	.+10     	; 0x1f904 <ihex_flash+0x2d8>
   1f8fa:	83 e0       	ldi	r24, 0x03	; 3
   1f8fc:	03 c0       	rjmp	.+6      	; 0x1f904 <ihex_flash+0x2d8>
   1f8fe:	80 e0       	ldi	r24, 0x00	; 0
   1f900:	01 c0       	rjmp	.+2      	; 0x1f904 <ihex_flash+0x2d8>
   1f902:	85 e0       	ldi	r24, 0x05	; 5
   1f904:	df 91       	pop	r29
   1f906:	cf 91       	pop	r28
				  		rc = IHEX_NOERR;
   1f908:	1f 91       	pop	r17
				  		break;
   1f90a:	0f 91       	pop	r16
				  	case IHEX_TYPE_STARTSEG:
				  		// found this type at end of hex file. ignore this line.
				  		rc = IHEX_NOERR;
				  		break;
				  	default:
				  		rc = IHEX_ERRTYPE;		// other intel commands are not supported
   1f90c:	ff 90       	pop	r15
				  								// will be needed for addresses > 0xffff
				}
				SREG = sreg;
   1f90e:	08 95       	ret

0001f910 <toupper>:
   1f910:	91 11       	cpse	r25, r1
   1f912:	08 95       	ret
   1f914:	81 56       	subi	r24, 0x61	; 97
   1f916:	8a 51       	subi	r24, 0x1A	; 26
   1f918:	08 f4       	brcc	.+2      	; 0x1f91c <toupper+0xc>
   1f91a:	80 52       	subi	r24, 0x20	; 32
   1f91c:	85 58       	subi	r24, 0x85	; 133
   1f91e:	08 95       	ret

0001f920 <strcpy>:
   1f920:	fb 01       	movw	r30, r22
   1f922:	dc 01       	movw	r26, r24
   1f924:	01 90       	ld	r0, Z+
   1f926:	0d 92       	st	X+, r0
   1f928:	00 20       	and	r0, r0
   1f92a:	e1 f7       	brne	.-8      	; 0x1f924 <strcpy+0x4>
   1f92c:	08 95       	ret

0001f92e <itoa>:
   1f92e:	fb 01       	movw	r30, r22
   1f930:	9f 01       	movw	r18, r30
   1f932:	e8 94       	clt
   1f934:	42 30       	cpi	r20, 0x02	; 2
   1f936:	bc f0       	brlt	.+46     	; 0x1f966 <itoa+0x38>
   1f938:	45 32       	cpi	r20, 0x25	; 37
   1f93a:	ac f4       	brge	.+42     	; 0x1f966 <itoa+0x38>
   1f93c:	4a 30       	cpi	r20, 0x0A	; 10
   1f93e:	29 f4       	brne	.+10     	; 0x1f94a <itoa+0x1c>
   1f940:	97 fb       	bst	r25, 7
   1f942:	1e f4       	brtc	.+6      	; 0x1f94a <itoa+0x1c>
   1f944:	90 95       	com	r25
   1f946:	81 95       	neg	r24
   1f948:	9f 4f       	sbci	r25, 0xFF	; 255
   1f94a:	64 2f       	mov	r22, r20
   1f94c:	77 27       	eor	r23, r23
   1f94e:	3a d0       	rcall	.+116    	; 0x1f9c4 <__udivmodhi4>
   1f950:	80 5d       	subi	r24, 0xD0	; 208
   1f952:	8a 33       	cpi	r24, 0x3A	; 58
   1f954:	0c f0       	brlt	.+2      	; 0x1f958 <itoa+0x2a>
   1f956:	89 5d       	subi	r24, 0xD9	; 217
   1f958:	81 93       	st	Z+, r24
   1f95a:	cb 01       	movw	r24, r22
   1f95c:	00 97       	sbiw	r24, 0x00	; 0
   1f95e:	a9 f7       	brne	.-22     	; 0x1f94a <itoa+0x1c>
   1f960:	16 f4       	brtc	.+4      	; 0x1f966 <itoa+0x38>
   1f962:	5d e2       	ldi	r21, 0x2D	; 45
   1f964:	51 93       	st	Z+, r21
   1f966:	10 82       	st	Z, r1
   1f968:	c9 01       	movw	r24, r18
   1f96a:	1c c0       	rjmp	.+56     	; 0x1f9a4 <strrev>

0001f96c <utoa>:
   1f96c:	fb 01       	movw	r30, r22
   1f96e:	9f 01       	movw	r18, r30
   1f970:	42 30       	cpi	r20, 0x02	; 2
   1f972:	6c f0       	brlt	.+26     	; 0x1f98e <utoa+0x22>
   1f974:	45 32       	cpi	r20, 0x25	; 37
   1f976:	5c f4       	brge	.+22     	; 0x1f98e <utoa+0x22>
   1f978:	64 2f       	mov	r22, r20
   1f97a:	77 27       	eor	r23, r23
   1f97c:	23 d0       	rcall	.+70     	; 0x1f9c4 <__udivmodhi4>
   1f97e:	80 5d       	subi	r24, 0xD0	; 208
   1f980:	8a 33       	cpi	r24, 0x3A	; 58
   1f982:	0c f0       	brlt	.+2      	; 0x1f986 <utoa+0x1a>
   1f984:	89 5d       	subi	r24, 0xD9	; 217
   1f986:	81 93       	st	Z+, r24
   1f988:	cb 01       	movw	r24, r22
   1f98a:	00 97       	sbiw	r24, 0x00	; 0
   1f98c:	a9 f7       	brne	.-22     	; 0x1f978 <utoa+0xc>
   1f98e:	10 82       	st	Z, r1
   1f990:	c9 01       	movw	r24, r18
   1f992:	08 c0       	rjmp	.+16     	; 0x1f9a4 <strrev>

0001f994 <__eerd_byte_m1280>:
   1f994:	f9 99       	sbic	0x1f, 1	; 31
   1f996:	fe cf       	rjmp	.-4      	; 0x1f994 <__eerd_byte_m1280>
   1f998:	92 bd       	out	0x22, r25	; 34
   1f99a:	81 bd       	out	0x21, r24	; 33
   1f99c:	f8 9a       	sbi	0x1f, 0	; 31
   1f99e:	99 27       	eor	r25, r25
   1f9a0:	80 b5       	in	r24, 0x20	; 32
   1f9a2:	08 95       	ret

0001f9a4 <strrev>:
   1f9a4:	dc 01       	movw	r26, r24
   1f9a6:	fc 01       	movw	r30, r24
   1f9a8:	67 2f       	mov	r22, r23
   1f9aa:	71 91       	ld	r23, Z+
   1f9ac:	77 23       	and	r23, r23
   1f9ae:	e1 f7       	brne	.-8      	; 0x1f9a8 <strrev+0x4>
   1f9b0:	32 97       	sbiw	r30, 0x02	; 2
   1f9b2:	04 c0       	rjmp	.+8      	; 0x1f9bc <strrev+0x18>
   1f9b4:	7c 91       	ld	r23, X
   1f9b6:	6d 93       	st	X+, r22
   1f9b8:	70 83       	st	Z, r23
   1f9ba:	62 91       	ld	r22, -Z
   1f9bc:	ae 17       	cp	r26, r30
   1f9be:	bf 07       	cpc	r27, r31
   1f9c0:	c8 f3       	brcs	.-14     	; 0x1f9b4 <strrev+0x10>
   1f9c2:	08 95       	ret

0001f9c4 <__udivmodhi4>:
   1f9c4:	aa 1b       	sub	r26, r26
   1f9c6:	bb 1b       	sub	r27, r27
   1f9c8:	51 e1       	ldi	r21, 0x11	; 17
   1f9ca:	07 c0       	rjmp	.+14     	; 0x1f9da <__udivmodhi4_ep>

0001f9cc <__udivmodhi4_loop>:
   1f9cc:	aa 1f       	adc	r26, r26
   1f9ce:	bb 1f       	adc	r27, r27
   1f9d0:	a6 17       	cp	r26, r22
   1f9d2:	b7 07       	cpc	r27, r23
   1f9d4:	10 f0       	brcs	.+4      	; 0x1f9da <__udivmodhi4_ep>
   1f9d6:	a6 1b       	sub	r26, r22
   1f9d8:	b7 0b       	sbc	r27, r23

0001f9da <__udivmodhi4_ep>:
   1f9da:	88 1f       	adc	r24, r24
   1f9dc:	99 1f       	adc	r25, r25
   1f9de:	5a 95       	dec	r21
   1f9e0:	a9 f7       	brne	.-22     	; 0x1f9cc <__udivmodhi4_loop>
   1f9e2:	80 95       	com	r24
   1f9e4:	90 95       	com	r25
   1f9e6:	bc 01       	movw	r22, r24
   1f9e8:	cd 01       	movw	r24, r26
   1f9ea:	08 95       	ret

0001f9ec <_exit>:
   1f9ec:	f8 94       	cli

0001f9ee <__stop_program>:
   1f9ee:	ff cf       	rjmp	.-2      	; 0x1f9ee <__stop_program>
